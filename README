 = OpenPF: An Open Requirements Engineering Tool =

 == User's manual == 
 * ON reasoning
   * To use the decreasoner (a platform-specific 3rd party tool), you need to copy every precompiled
     file under the project subfolder "Examples/Events/binary/<platform>/*" to "Examples/events/"
   * To initially enable the decreasoner reasoning for argumentation, define the system
     property openpf.argument.reasoning, using one of the following ways:
     * MacOSX:
       open Eclipse.app --args -vmargs -Dopenpf.argument.reasoning
     * Linux/Windows
       eclipse -vmargs -Dopenpf.argument.reasoning
     * And alternatively use the following line in the config.ini:
       echo openpf.argument.reasoning= >> configuration/config.ini
     * Similarly, to monitor the files the physical Examples folders (for Miki),
       define the system property "openpf.monitor"
   * If you haven't initialise the property, then at the runtime, the reasoning feature
     can be enabled in the Windows > Preferences (windows/linux), or Eclipse > Preferences (mac).
     Under the "Argument / Reasoning" preference categorty, you can toggle the feature.

 == Developer's Manual ==

 * To develop OpenPF, you need the following steps:
  * checkout the code for openpf:

    git clone https://github.com/problem-frames/openpf

  * Run Eclipse

    * The following menu/dialog options are used to develop for the first time:
      * import the projects from the workspace
      File > Import ... >  General > Existing Projects into the workspace > Next > Browse > OK > Finish
      * change the compiler settings for the restricted API usages
      Window > Preferences > Java > Compiler > Errors/Warnings > Deprecated and restricted API > Forbidden references (access rules) > Error => Warning > OK > Yes

  * Run the product:
    Project Explorer > problem > Double click at the pf.product file > Testing > Launch an Eclipse Application

 == Maintainer's Manual ==

  * Run the headless script to build locally:

    cd build.x86_64   (or cd build.macosx)
    build.sh 

Enjoy Problem Solving,

Yijun Yu

Appendix A. Checkout OpenOME

  * Currently we are using one version of openome. You can checkout its latest
development from:
    git svn clone -r HEAD https://se.cs.toronto.edu/svn/trac/ome/trunk/workspace ../openome-workspace
	* Note for the checkout access, please ask Jennifer Horkoff <mailto:jenhork@cs.utoronto.ca> at the
	  University of Toronto to get the permission

Appendix B. Full Installation of dependencies

Here are a list of update sites that are necessary if you want to prepare the
IDE yourself:

 * Suppose you have installed the Modeling Tools, e.g., 
eclipse-modeling-helios-incubation-linux-gtk.tar.gz

 * Then you still need to do the following:
    * Select the following features from Help > Install Modeling component
	        Acceleo
	        Xtext
	        GMF
    * Install the epsilon/emfatic tools
	        http://www.scharf.gr/eclipse/emfatic/update/
	        http://download.eclipse.org/modeling/gmt/epsilon/updates/
    * Install Viatra2 tools
	        http://viatra.inf.mit.bme.hu/update/R3.1
    * Install the SWTBot testing tools
	        http://download.eclipse.org/technology/swtbot/helios/dev-build/update-site
    * Install LittleJil plugins:
	        http://laser.cs.umass.edu/eclipse/visualjil/
	        http://laser.cs.umass.edu/eclipse/ljanalysis
	        http://laser.cs.umass.edu/documentation/propelinstall/
        which has a dependency on WST
                http://download.eclipse.org/webtools/downloads/drops/R3.2.2/R-3.2.2-20100915173744
 * Alternatively, all these dependent plugins can be found at:
   http://sead1.open.ac.uk/pf/development-kit/eclipse-SDK-more-required-products.zip
   But you have to use the "IDE/pf-3.6.sh" to install it properly, unpack them
to the dropsin folder won't work.

