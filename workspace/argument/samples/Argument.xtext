grammar argument.Argument with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate argument "http://sead1.open.ac.uk/argument/Argument"

ArgumentDiagram: ("argument:" name=ID)?
        ((nodes+=Argument | links+=Link))*;
// These relationships can be derived
Link: Rebuts | Mitigates;

Rebuts: from=[Argument] "rebutted by" to=[Argument] "on" denies=[Argument] (generated?='@generated')?;
Mitigates: from=[Argument] "mitigated by" to=[Argument] "on" restores=[Argument] (generated?='@generated')?;

Argument: name=ID ":"? // unique identifier
    description=STRING // non-empty description
    ('round' round=INT)? // default is 0
        ('replacing' replaces=[Argument])? // default is null
        ('with' expr=Expression)? // default is the same as the name
    ('foreground' foreground=STRING)? // default is 'black'
    ('background' background=STRING)? // default is 'white'
    ('shape' shape=STRING)? // default is rectangle
    ('image' image=STRING)? // default is null
        ('{' // sub-arguments
                ('supported by' (','? grounds+=Argument)*)?
                ('warranted by' (','? warrants+=Argument)*)?
        '}')?;

// The expression syntax, currently just replaced by a string.
Expression:
        assign=AssignmentOp;

AssignmentOp:
        OrExp (({AssignPlus.left=current} aop='->' | {AssignMin.left=current} aop='<->') right=OrExp)?;

OrExp:
        AndExp ({Or.left=current} or_op='|' right=AndExp)*;

AndExp:
        Relational ({And.left=current} and_op='&' right=Relational)*;

Relational:
        Addition (({RelNotEq.left=current} rel_op='!=' | {RelEqEq.left=current} rel_op='=='
        | {RelLtEq.left=current} rel_op='>=' | {RelGtEq.left=current} rel_op='<='
        | {RelEq.left=current} rel_op='=' | {RelLt.left=current} rel_op='<'
        | {RelGt.left=current} rel_op='>') right=Addition)?;

Addition:
        Multiplication (({Plus.left=current} add_op='+' | {Minus.left=current} add_op='-') right=Multiplication)*;

Multiplication:
        Power (({Multi.left=current} mul_op='*' | {Div.left=current} mul_op='/') right=Power)*;

Power:
        UnaryExpr (({Pow.left=current} pow_op='^') right=UnaryExpr)*;
        
UnaryExpr:
        (uop=UnaryOp)? right=PrePrimaryExpr;

enum UnaryOp:
        DEFAULT='?' | NOT='!';

PrePrimaryExpr:
        TerminalExpression | '(' Expression ')' | '-' n=INT;

TerminalExpression:
          {IntLiteral} value=INT
        | {BooleanLiteral} value=BOOLEAN
        | {Argument} value=[Argument];

terminal INT returns ecore::EInt:
        '0' | '1'..'9' ('0'..'9')*;

terminal BOOLEAN returns ecore::EBoolean:
        'true' | 'false';

terminal ID: ('#' (!('#'))+ '#') |
  ('^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*);

terminal QUALIFIED_NAME : ID ('.' ID)*;

        