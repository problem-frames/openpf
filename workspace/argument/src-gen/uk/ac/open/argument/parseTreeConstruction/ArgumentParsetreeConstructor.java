/*
* generated by Xtext
*/
package uk.ac.open.argument.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import uk.ac.open.argument.services.ArgumentGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class ArgumentParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ArgumentGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentDiagram_Group(this, this, 0, inst);
			case 1: return new Argument_Group(this, this, 1, inst);
			case 2: return new Link_Alternatives(this, this, 2, inst);
			case 3: return new Rebuts_Group(this, this, 3, inst);
			case 4: return new Mitigates_Group(this, this, 4, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule ArgumentDiagram ****************
 *
 * ArgumentDiagram:
 * 	("argument:" name=ID)? (nodes+=Argument | links+=Link)*;
 *
 **/

// ("argument:" name=ID)? (nodes+=Argument | links+=Link)*
protected class ArgumentDiagram_Group extends GroupToken {
	
	public ArgumentDiagram_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentDiagramAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentDiagram_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ArgumentDiagram_Group_0(lastRuleCallOrigin, this, 1, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 2, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArgumentDiagramRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ("argument:" name=ID)?
protected class ArgumentDiagram_Group_0 extends GroupToken {
	
	public ArgumentDiagram_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentDiagramAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentDiagram_NameAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "argument:"
protected class ArgumentDiagram_ArgumentKeyword_0_0 extends KeywordToken  {
	
	public ArgumentDiagram_ArgumentKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentDiagramAccess().getArgumentKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class ArgumentDiagram_NameAssignment_0_1 extends AssignmentToken  {
	
	public ArgumentDiagram_NameAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentDiagramAccess().getNameAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentDiagram_ArgumentKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArgumentDiagramAccess().getNameIDTerminalRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArgumentDiagramAccess().getNameIDTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// (nodes+=Argument | links+=Link)*
protected class ArgumentDiagram_Alternatives_1 extends AlternativesToken {

	public ArgumentDiagram_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getArgumentDiagramAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentDiagram_NodesAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ArgumentDiagram_LinksAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// nodes+=Argument
protected class ArgumentDiagram_NodesAssignment_1_0 extends AssignmentToken  {
	
	public ArgumentDiagram_NodesAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentDiagramAccess().getNodesAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nodes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nodes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getArgumentDiagramAccess().getNodesArgumentParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ArgumentDiagram_Alternatives_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ArgumentDiagram_Group_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 2, consumed);
		}	
	}	
}

// links+=Link
protected class ArgumentDiagram_LinksAssignment_1_1 extends AssignmentToken  {
	
	public ArgumentDiagram_LinksAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentDiagramAccess().getLinksAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Link_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("links",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("links");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLinkRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getArgumentDiagramAccess().getLinksLinkParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ArgumentDiagram_Alternatives_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ArgumentDiagram_Group_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 2, consumed);
		}	
	}	
}



/************ end Rule ArgumentDiagram ****************/


/************ begin Rule Argument ****************
 *
 * Argument:
 * 	name=ID ":"? // unique identifier
 * 	description= // non-empty description
 * 	STRING ("round" round=INT)? // default is 0
 * 	expr=STRING? // default is the same as the name
 * 	("replacing" origin=[Argument])? // default is null
 * 	("foreground" foreground=STRING)? // default is 'black'
 * 	("background" background=STRING)? // default is 'white'
 * 	("shape" shape=STRING)? // default is rectangle 
 * 	("image" image=STRING)? // default is null 
 * 	// sub-arguments
 * 	("{" ("supported by" (","? grounds+=Argument)*)? ("warranted by" (","? warrants+=Argument)*)? "}")?;
 *
 **/

// name=ID ":"? // unique identifier
// description= // non-empty description
// STRING ("round" round=INT)? // default is 0
// expr=STRING? // default is the same as the name
// ("replacing" origin=[Argument])? // default is null
// ("foreground" foreground=STRING)? // default is 'black'
// ("background" background=STRING)? // default is 'white'
// ("shape" shape=STRING)? // default is rectangle 
// ("image" image=STRING)? // default is null 
// // sub-arguments
// ("{" ("supported by" (","? grounds+=Argument)*)? ("warranted by" (","? warrants+=Argument)*)? "}")?
protected class Argument_Group extends GroupToken {
	
	public Argument_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group_10(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Argument_Group_9(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Argument_Group_8(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Argument_Group_7(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Argument_Group_6(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Argument_Group_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Argument_ExprAssignment_4(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Argument_Group_3(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Argument_DescriptionAssignment_2(lastRuleCallOrigin, this, 8, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArgumentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class Argument_NameAssignment_0 extends AssignmentToken  {
	
	public Argument_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// description= // non-empty description
// STRING
protected class Argument_DescriptionAssignment_2 extends AssignmentToken  {
	
	public Argument_DescriptionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getDescriptionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("description",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("description");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArgumentAccess().getDescriptionSTRINGTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArgumentAccess().getDescriptionSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("round" round=INT)?
protected class Argument_Group_3 extends GroupToken {
	
	public Argument_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_RoundAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "round"
protected class Argument_RoundKeyword_3_0 extends KeywordToken  {
	
	public Argument_RoundKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentAccess().getRoundKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_DescriptionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// round=INT
protected class Argument_RoundAssignment_3_1 extends AssignmentToken  {
	
	public Argument_RoundAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getRoundAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_RoundKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("round",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("round");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArgumentAccess().getRoundINTTerminalRuleCall_3_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArgumentAccess().getRoundINTTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// expr=STRING?
protected class Argument_ExprAssignment_4 extends AssignmentToken  {
	
	public Argument_ExprAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getExprAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Argument_DescriptionAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expr",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expr");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArgumentAccess().getExprSTRINGTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArgumentAccess().getExprSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ("replacing" origin=[Argument])?
protected class Argument_Group_5 extends GroupToken {
	
	public Argument_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_OriginAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "replacing"
protected class Argument_ReplacingKeyword_5_0 extends KeywordToken  {
	
	public Argument_ReplacingKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentAccess().getReplacingKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_ExprAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Argument_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Argument_DescriptionAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// origin=[Argument]
protected class Argument_OriginAssignment_5_1 extends AssignmentToken  {
	
	public Argument_OriginAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getOriginAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_ReplacingKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("origin",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("origin");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentAccess().getOriginArgumentCrossReference_5_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getArgumentAccess().getOriginArgumentCrossReference_5_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ("foreground" foreground=STRING)?
protected class Argument_Group_6 extends GroupToken {
	
	public Argument_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_ForegroundAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "foreground"
protected class Argument_ForegroundKeyword_6_0 extends KeywordToken  {
	
	public Argument_ForegroundKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentAccess().getForegroundKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Argument_ExprAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Argument_Group_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Argument_DescriptionAssignment_2(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// foreground=STRING
protected class Argument_ForegroundAssignment_6_1 extends AssignmentToken  {
	
	public Argument_ForegroundAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getForegroundAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_ForegroundKeyword_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("foreground",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("foreground");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArgumentAccess().getForegroundSTRINGTerminalRuleCall_6_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArgumentAccess().getForegroundSTRINGTerminalRuleCall_6_1_0();
			return obj;
		}
		return null;
	}

}


// ("background" background=STRING)?
protected class Argument_Group_7 extends GroupToken {
	
	public Argument_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_BackgroundAssignment_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "background"
protected class Argument_BackgroundKeyword_7_0 extends KeywordToken  {
	
	public Argument_BackgroundKeyword_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentAccess().getBackgroundKeyword_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Argument_Group_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Argument_ExprAssignment_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Argument_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Argument_DescriptionAssignment_2(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

}

// background=STRING
protected class Argument_BackgroundAssignment_7_1 extends AssignmentToken  {
	
	public Argument_BackgroundAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getBackgroundAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_BackgroundKeyword_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("background",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("background");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArgumentAccess().getBackgroundSTRINGTerminalRuleCall_7_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArgumentAccess().getBackgroundSTRINGTerminalRuleCall_7_1_0();
			return obj;
		}
		return null;
	}

}


// ("shape" shape=STRING)?
protected class Argument_Group_8 extends GroupToken {
	
	public Argument_Group_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_ShapeAssignment_8_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "shape"
protected class Argument_ShapeKeyword_8_0 extends KeywordToken  {
	
	public Argument_ShapeKeyword_8_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentAccess().getShapeKeyword_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Argument_Group_6(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Argument_Group_5(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Argument_ExprAssignment_4(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Argument_Group_3(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Argument_DescriptionAssignment_2(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// shape=STRING
protected class Argument_ShapeAssignment_8_1 extends AssignmentToken  {
	
	public Argument_ShapeAssignment_8_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getShapeAssignment_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_ShapeKeyword_8_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("shape",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("shape");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArgumentAccess().getShapeSTRINGTerminalRuleCall_8_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArgumentAccess().getShapeSTRINGTerminalRuleCall_8_1_0();
			return obj;
		}
		return null;
	}

}


// ("image" image=STRING)?
protected class Argument_Group_9 extends GroupToken {
	
	public Argument_Group_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_ImageAssignment_9_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "image"
protected class Argument_ImageKeyword_9_0 extends KeywordToken  {
	
	public Argument_ImageKeyword_9_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentAccess().getImageKeyword_9_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group_8(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Argument_Group_7(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Argument_Group_6(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Argument_Group_5(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Argument_ExprAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Argument_Group_3(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Argument_DescriptionAssignment_2(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

}

// image=STRING
protected class Argument_ImageAssignment_9_1 extends AssignmentToken  {
	
	public Argument_ImageAssignment_9_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getImageAssignment_9_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_ImageKeyword_9_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("image",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("image");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArgumentAccess().getImageSTRINGTerminalRuleCall_9_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArgumentAccess().getImageSTRINGTerminalRuleCall_9_1_0();
			return obj;
		}
		return null;
	}

}


// // sub-arguments
// ("{" ("supported by" (","? grounds+=Argument)*)? ("warranted by" (","? warrants+=Argument)*)? "}")?
protected class Argument_Group_10 extends GroupToken {
	
	public Argument_Group_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_RightCurlyBracketKeyword_10_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// // sub-arguments
// "{"
protected class Argument_LeftCurlyBracketKeyword_10_0 extends KeywordToken  {
	
	public Argument_LeftCurlyBracketKeyword_10_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentAccess().getLeftCurlyBracketKeyword_10_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group_9(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Argument_Group_8(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Argument_Group_7(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Argument_Group_6(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Argument_Group_5(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Argument_ExprAssignment_4(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Argument_Group_3(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Argument_DescriptionAssignment_2(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

}

// ("supported by" (","? grounds+=Argument)*)?
protected class Argument_Group_10_1 extends GroupToken {
	
	public Argument_Group_10_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup_10_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group_10_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "supported by"
protected class Argument_SupportedByKeyword_10_1_0 extends KeywordToken  {
	
	public Argument_SupportedByKeyword_10_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentAccess().getSupportedByKeyword_10_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_LeftCurlyBracketKeyword_10_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (","? grounds+=Argument)*
protected class Argument_Group_10_1_1 extends GroupToken {
	
	public Argument_Group_10_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup_10_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_GroundsAssignment_10_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// grounds+=Argument
protected class Argument_GroundsAssignment_10_1_1_1 extends AssignmentToken  {
	
	public Argument_GroundsAssignment_10_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroundsAssignment_10_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("grounds",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("grounds");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getArgumentAccess().getGroundsArgumentParserRuleCall_10_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Argument_Group_10_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Argument_SupportedByKeyword_10_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ("warranted by" (","? warrants+=Argument)*)?
protected class Argument_Group_10_2 extends GroupToken {
	
	public Argument_Group_10_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup_10_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group_10_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "warranted by"
protected class Argument_WarrantedByKeyword_10_2_0 extends KeywordToken  {
	
	public Argument_WarrantedByKeyword_10_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentAccess().getWarrantedByKeyword_10_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group_10_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Argument_LeftCurlyBracketKeyword_10_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (","? warrants+=Argument)*
protected class Argument_Group_10_2_1 extends GroupToken {
	
	public Argument_Group_10_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup_10_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_WarrantsAssignment_10_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// warrants+=Argument
protected class Argument_WarrantsAssignment_10_2_1_1 extends AssignmentToken  {
	
	public Argument_WarrantsAssignment_10_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getWarrantsAssignment_10_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("warrants",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("warrants");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getArgumentAccess().getWarrantsArgumentParserRuleCall_10_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Argument_Group_10_2_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Argument_WarrantedByKeyword_10_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "}"
protected class Argument_RightCurlyBracketKeyword_10_3 extends KeywordToken  {
	
	public Argument_RightCurlyBracketKeyword_10_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentAccess().getRightCurlyBracketKeyword_10_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group_10_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Argument_Group_10_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule Argument ****************/


/************ begin Rule Link ****************
 *
 * / *
 * // The expression syntax, currently just replaced by a string.
 * Expression:
 * 	assign=AssignmentOp;
 * 		
 * AssignmentOp returns Expression:
 * 	OrExp (({AssignPlus.left=current} aop='->' | {AssignMin.left=current} aop='<->') right=OrExp)?;
 * 
 * OrExp returns Expression:
 * 	AndExp ({Or.left=current} or_op='|' right=AndExp)*;
 * 
 * AndExp returns Expression:
 * 	Relational ({And.left=current} and_op='&' right=Relational)*;
 * 
 * Relational returns Expression:
 * 	Addition (({RelNotEq.left=current} rel_op='!=' | {RelEqEq.left=current} rel_op='==' 
 * 	| {RelLtEq.left=current} rel_op='>=' | {RelGtEq.left=current} rel_op='<=' 
 * 	| {RelEq.left=current} rel_op='=' | {RelLt.left=current} rel_op='<' 
 * 	| {RelGt.left=current} rel_op='>') right=Addition)?;
 * 
 * Addition returns Expression:
 * 	Multiplication (({Plus.left=current} add_op='+' | {Minus.left=current} add_op='-') right=Multiplication)*;
 * 
 * Multiplication returns Expression:
 * 	Power (({Multi.left=current} mul_op='*' | {Div.left=current} mul_op='/') right=Power)*;
 * 
 * Power returns Expression:
 * 	UnaryExpr (({Pow.left=current} pow_op='^') right=UnaryExpr)*;
 * 
 * UnaryExpr returns Expression:
 * 	(uop?=UnaryOp)? right=PrePrimaryExpr;
 * 
 * enum UnaryOp:
 * 	NOT='!';
 * 
 * PrePrimaryExpr returns Expression:
 * 	TerminalExpression | '(' Expression ')' | '-' n=INT;
 * 
 * TerminalExpression:
 * 	  {IntLiteral} value=INT 
 * 	| {StringLiteral} value=STRING 
 * 	| {BooleanLiteral} value=BOOLEAN 
 * 	| {Argument} value=[Argument];
 * * // *
 * These relationships can be derived
 * * /Link:
 * 	Rebuts | Mitigates;
 *
 **/

// Rebuts | Mitigates
protected class Link_Alternatives extends AlternativesToken {

	public Link_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLinkAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Link_RebutsParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Link_MitigatesParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMitigatesRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRebutsRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Rebuts
protected class Link_RebutsParserRuleCall_0 extends RuleCallToken {
	
	public Link_RebutsParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLinkAccess().getRebutsParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Rebuts_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRebutsRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Rebuts_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Mitigates
protected class Link_MitigatesParserRuleCall_1 extends RuleCallToken {
	
	public Link_MitigatesParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLinkAccess().getMitigatesParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mitigates_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMitigatesRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Mitigates_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Link ****************/


/************ begin Rule Rebuts ****************
 *
 * Rebuts:
 * 	from=[Argument] "rebutted by" to=[Argument];
 *
 **/

// from=[Argument] "rebutted by" to=[Argument]
protected class Rebuts_Group extends GroupToken {
	
	public Rebuts_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRebutsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Rebuts_ToAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRebutsRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// from=[Argument]
protected class Rebuts_FromAssignment_0 extends AssignmentToken  {
	
	public Rebuts_FromAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRebutsAccess().getFromAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("from",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("from");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRebutsAccess().getFromArgumentCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getRebutsAccess().getFromArgumentCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "rebutted by"
protected class Rebuts_RebuttedByKeyword_1 extends KeywordToken  {
	
	public Rebuts_RebuttedByKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRebutsAccess().getRebuttedByKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Rebuts_FromAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// to=[Argument]
protected class Rebuts_ToAssignment_2 extends AssignmentToken  {
	
	public Rebuts_ToAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRebutsAccess().getToAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Rebuts_RebuttedByKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("to",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("to");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRebutsAccess().getToArgumentCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getRebutsAccess().getToArgumentCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule Rebuts ****************/


/************ begin Rule Mitigates ****************
 *
 * Mitigates:
 * 	from=[Argument] "mitigated by" to=[Argument] ("for" name=STRING? rebuttal=[Argument]?)?;
 *
 **/

// from=[Argument] "mitigated by" to=[Argument] ("for" name=STRING? rebuttal=[Argument]?)?
protected class Mitigates_Group extends GroupToken {
	
	public Mitigates_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMitigatesAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mitigates_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Mitigates_ToAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMitigatesRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// from=[Argument]
protected class Mitigates_FromAssignment_0 extends AssignmentToken  {
	
	public Mitigates_FromAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMitigatesAccess().getFromAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("from",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("from");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMitigatesAccess().getFromArgumentCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getMitigatesAccess().getFromArgumentCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "mitigated by"
protected class Mitigates_MitigatedByKeyword_1 extends KeywordToken  {
	
	public Mitigates_MitigatedByKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMitigatesAccess().getMitigatedByKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mitigates_FromAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// to=[Argument]
protected class Mitigates_ToAssignment_2 extends AssignmentToken  {
	
	public Mitigates_ToAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMitigatesAccess().getToAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mitigates_MitigatedByKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("to",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("to");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMitigatesAccess().getToArgumentCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getMitigatesAccess().getToArgumentCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("for" name=STRING? rebuttal=[Argument]?)?
protected class Mitigates_Group_3 extends GroupToken {
	
	public Mitigates_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMitigatesAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mitigates_RebuttalAssignment_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Mitigates_NameAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "for"
protected class Mitigates_ForKeyword_3_0 extends KeywordToken  {
	
	public Mitigates_ForKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMitigatesAccess().getForKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mitigates_ToAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=STRING?
protected class Mitigates_NameAssignment_3_1 extends AssignmentToken  {
	
	public Mitigates_NameAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMitigatesAccess().getNameAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mitigates_ForKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMitigatesAccess().getNameSTRINGTerminalRuleCall_3_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMitigatesAccess().getNameSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}

// rebuttal=[Argument]?
protected class Mitigates_RebuttalAssignment_3_2 extends AssignmentToken  {
	
	public Mitigates_RebuttalAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMitigatesAccess().getRebuttalAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mitigates_NameAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Mitigates_ForKeyword_3_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rebuttal",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rebuttal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMitigatesAccess().getRebuttalArgumentCrossReference_3_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getMitigatesAccess().getRebuttalArgumentCrossReference_3_2_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule Mitigates ****************/

}
