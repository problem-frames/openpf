/*
* generated by Xtext
*/

package uk.ac.open.argument.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ArgumentGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ArgumentDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cArgumentKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNodesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNodesArgumentParserRuleCall_1_0_0 = (RuleCall)cNodesAssignment_1_0.eContents().get(0);
		private final Assignment cLinksAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLinksLinkParserRuleCall_1_1_0 = (RuleCall)cLinksAssignment_1_1.eContents().get(0);
		
		//ArgumentDiagram:
		//	("argument:" name=ID)? (nodes+=Argument | links+=Link)*;
		public ParserRule getRule() { return rule; }

		//("argument:" name=ID)? (nodes+=Argument | links+=Link)*
		public Group getGroup() { return cGroup; }

		//("argument:" name=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//"argument:"
		public Keyword getArgumentKeyword_0_0() { return cArgumentKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//(nodes+=Argument | links+=Link)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//nodes+=Argument
		public Assignment getNodesAssignment_1_0() { return cNodesAssignment_1_0; }

		//Argument
		public RuleCall getNodesArgumentParserRuleCall_1_0_0() { return cNodesArgumentParserRuleCall_1_0_0; }

		//links+=Link
		public Assignment getLinksAssignment_1_1() { return cLinksAssignment_1_1; }

		//Link
		public RuleCall getLinksLinkParserRuleCall_1_1_0() { return cLinksLinkParserRuleCall_1_1_0; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRebutsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMitigatesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		//These relationships can be derived
		// * /Link:
		//	Rebuts | Mitigates;
		public ParserRule getRule() { return rule; }

		//Rebuts | Mitigates
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rebuts
		public RuleCall getRebutsParserRuleCall_0() { return cRebutsParserRuleCall_0; }

		//Mitigates
		public RuleCall getMitigatesParserRuleCall_1() { return cMitigatesParserRuleCall_1; }
	}

	public class RebutsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rebuts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromArgumentCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromArgumentIDTerminalRuleCall_0_0_1 = (RuleCall)cFromArgumentCrossReference_0_0.eContents().get(1);
		private final Keyword cRebuttedByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToArgumentCrossReference_2_0 = (CrossReference)cToAssignment_2.eContents().get(0);
		private final RuleCall cToArgumentIDTerminalRuleCall_2_0_1 = (RuleCall)cToArgumentCrossReference_2_0.eContents().get(1);
		
		//Rebuts:
		//	from=[Argument] "rebutted by" to=[Argument];
		public ParserRule getRule() { return rule; }

		//from=[Argument] "rebutted by" to=[Argument]
		public Group getGroup() { return cGroup; }

		//from=[Argument]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//[Argument]
		public CrossReference getFromArgumentCrossReference_0_0() { return cFromArgumentCrossReference_0_0; }

		//ID
		public RuleCall getFromArgumentIDTerminalRuleCall_0_0_1() { return cFromArgumentIDTerminalRuleCall_0_0_1; }

		//"rebutted by"
		public Keyword getRebuttedByKeyword_1() { return cRebuttedByKeyword_1; }

		//to=[Argument]
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//[Argument]
		public CrossReference getToArgumentCrossReference_2_0() { return cToArgumentCrossReference_2_0; }

		//ID
		public RuleCall getToArgumentIDTerminalRuleCall_2_0_1() { return cToArgumentIDTerminalRuleCall_2_0_1; }
	}

	public class MitigatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mitigates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromArgumentCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromArgumentIDTerminalRuleCall_0_0_1 = (RuleCall)cFromArgumentCrossReference_0_0.eContents().get(1);
		private final Keyword cMitigatedByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToArgumentCrossReference_2_0 = (CrossReference)cToAssignment_2.eContents().get(0);
		private final RuleCall cToArgumentIDTerminalRuleCall_2_0_1 = (RuleCall)cToArgumentCrossReference_2_0.eContents().get(1);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRebuttalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRebuttalArgumentCrossReference_4_0 = (CrossReference)cRebuttalAssignment_4.eContents().get(0);
		private final RuleCall cRebuttalArgumentIDTerminalRuleCall_4_0_1 = (RuleCall)cRebuttalArgumentCrossReference_4_0.eContents().get(1);
		
		//Mitigates:
		//	from=[Argument] "mitigated by" to=[Argument] "on" rebuttal=[Argument];
		public ParserRule getRule() { return rule; }

		//from=[Argument] "mitigated by" to=[Argument] "on" rebuttal=[Argument]
		public Group getGroup() { return cGroup; }

		//from=[Argument]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//[Argument]
		public CrossReference getFromArgumentCrossReference_0_0() { return cFromArgumentCrossReference_0_0; }

		//ID
		public RuleCall getFromArgumentIDTerminalRuleCall_0_0_1() { return cFromArgumentIDTerminalRuleCall_0_0_1; }

		//"mitigated by"
		public Keyword getMitigatedByKeyword_1() { return cMitigatedByKeyword_1; }

		//to=[Argument]
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//[Argument]
		public CrossReference getToArgumentCrossReference_2_0() { return cToArgumentCrossReference_2_0; }

		//ID
		public RuleCall getToArgumentIDTerminalRuleCall_2_0_1() { return cToArgumentIDTerminalRuleCall_2_0_1; }

		//"on"
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }

		//rebuttal=[Argument]
		public Assignment getRebuttalAssignment_4() { return cRebuttalAssignment_4; }

		//[Argument]
		public CrossReference getRebuttalArgumentCrossReference_4_0() { return cRebuttalArgumentCrossReference_4_0; }

		//ID
		public RuleCall getRebuttalArgumentIDTerminalRuleCall_4_0_1() { return cRebuttalArgumentIDTerminalRuleCall_4_0_1; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRoundKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRoundAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRoundINTTerminalRuleCall_3_1_0 = (RuleCall)cRoundAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cReplacingKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOriginAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cOriginArgumentCrossReference_4_1_0 = (CrossReference)cOriginAssignment_4_1.eContents().get(0);
		private final RuleCall cOriginArgumentIDTerminalRuleCall_4_1_0_1 = (RuleCall)cOriginArgumentCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExprAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_5_1_0 = (RuleCall)cExprAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cForegroundKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cForegroundAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cForegroundSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cForegroundAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cBackgroundKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBackgroundAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBackgroundSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cBackgroundAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cShapeKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cShapeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cShapeSTRINGTerminalRuleCall_8_1_0 = (RuleCall)cShapeAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cImageKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cImageAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cImageSTRINGTerminalRuleCall_9_1_0 = (RuleCall)cImageAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Keyword cSupportedByKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Group cGroup_10_1_1 = (Group)cGroup_10_1.eContents().get(1);
		private final Keyword cCommaKeyword_10_1_1_0 = (Keyword)cGroup_10_1_1.eContents().get(0);
		private final Assignment cGroundsAssignment_10_1_1_1 = (Assignment)cGroup_10_1_1.eContents().get(1);
		private final RuleCall cGroundsArgumentParserRuleCall_10_1_1_1_0 = (RuleCall)cGroundsAssignment_10_1_1_1.eContents().get(0);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Keyword cWarrantedByKeyword_10_2_0 = (Keyword)cGroup_10_2.eContents().get(0);
		private final Group cGroup_10_2_1 = (Group)cGroup_10_2.eContents().get(1);
		private final Keyword cCommaKeyword_10_2_1_0 = (Keyword)cGroup_10_2_1.eContents().get(0);
		private final Assignment cWarrantsAssignment_10_2_1_1 = (Assignment)cGroup_10_2_1.eContents().get(1);
		private final RuleCall cWarrantsArgumentParserRuleCall_10_2_1_1_0 = (RuleCall)cWarrantsAssignment_10_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		
		//Argument:
		//	name=ID ":"? // unique identifier
		//	description= // non-empty description
		//	STRING ("round" round=INT)? // default is 0
		//	("replacing" origin=[Argument])? // default is null
		//	("with" expr=Expression)? // default is the same as the name
		//	("foreground" foreground=STRING)? // default is 'black'
		//	("background" background=STRING)? // default is 'white'
		//	("shape" shape=STRING)? // default is rectangle 
		//	("image" image=STRING)? // default is null 
		//	// sub-arguments
		//	("{" ("supported by" (","? grounds+=Argument)*)? ("warranted by" (","? warrants+=Argument)*)? "}")?;
		public ParserRule getRule() { return rule; }

		//name=ID ":"? // unique identifier
		//description= // non-empty description
		//STRING ("round" round=INT)? // default is 0
		//("replacing" origin=[Argument])? // default is null
		//("with" expr=Expression)? // default is the same as the name
		//("foreground" foreground=STRING)? // default is 'black'
		//("background" background=STRING)? // default is 'white'
		//("shape" shape=STRING)? // default is rectangle 
		//("image" image=STRING)? // default is null 
		//// sub-arguments
		//("{" ("supported by" (","? grounds+=Argument)*)? ("warranted by" (","? warrants+=Argument)*)? "}")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"?
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//description= // non-empty description
		//STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//// non-empty description
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//("round" round=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"round"
		public Keyword getRoundKeyword_3_0() { return cRoundKeyword_3_0; }

		//round=INT
		public Assignment getRoundAssignment_3_1() { return cRoundAssignment_3_1; }

		//INT
		public RuleCall getRoundINTTerminalRuleCall_3_1_0() { return cRoundINTTerminalRuleCall_3_1_0; }

		//("replacing" origin=[Argument])?
		public Group getGroup_4() { return cGroup_4; }

		//"replacing"
		public Keyword getReplacingKeyword_4_0() { return cReplacingKeyword_4_0; }

		//origin=[Argument]
		public Assignment getOriginAssignment_4_1() { return cOriginAssignment_4_1; }

		//[Argument]
		public CrossReference getOriginArgumentCrossReference_4_1_0() { return cOriginArgumentCrossReference_4_1_0; }

		//ID
		public RuleCall getOriginArgumentIDTerminalRuleCall_4_1_0_1() { return cOriginArgumentIDTerminalRuleCall_4_1_0_1; }

		//("with" expr=Expression)?
		public Group getGroup_5() { return cGroup_5; }

		//"with"
		public Keyword getWithKeyword_5_0() { return cWithKeyword_5_0; }

		//expr=Expression
		public Assignment getExprAssignment_5_1() { return cExprAssignment_5_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_5_1_0() { return cExprExpressionParserRuleCall_5_1_0; }

		//("foreground" foreground=STRING)?
		public Group getGroup_6() { return cGroup_6; }

		//"foreground"
		public Keyword getForegroundKeyword_6_0() { return cForegroundKeyword_6_0; }

		//foreground=STRING
		public Assignment getForegroundAssignment_6_1() { return cForegroundAssignment_6_1; }

		//STRING
		public RuleCall getForegroundSTRINGTerminalRuleCall_6_1_0() { return cForegroundSTRINGTerminalRuleCall_6_1_0; }

		//("background" background=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//"background"
		public Keyword getBackgroundKeyword_7_0() { return cBackgroundKeyword_7_0; }

		//background=STRING
		public Assignment getBackgroundAssignment_7_1() { return cBackgroundAssignment_7_1; }

		//STRING
		public RuleCall getBackgroundSTRINGTerminalRuleCall_7_1_0() { return cBackgroundSTRINGTerminalRuleCall_7_1_0; }

		//("shape" shape=STRING)?
		public Group getGroup_8() { return cGroup_8; }

		//"shape"
		public Keyword getShapeKeyword_8_0() { return cShapeKeyword_8_0; }

		//shape=STRING
		public Assignment getShapeAssignment_8_1() { return cShapeAssignment_8_1; }

		//STRING
		public RuleCall getShapeSTRINGTerminalRuleCall_8_1_0() { return cShapeSTRINGTerminalRuleCall_8_1_0; }

		//("image" image=STRING)?
		public Group getGroup_9() { return cGroup_9; }

		//"image"
		public Keyword getImageKeyword_9_0() { return cImageKeyword_9_0; }

		//image=STRING
		public Assignment getImageAssignment_9_1() { return cImageAssignment_9_1; }

		//STRING
		public RuleCall getImageSTRINGTerminalRuleCall_9_1_0() { return cImageSTRINGTerminalRuleCall_9_1_0; }

		//// sub-arguments
		//("{" ("supported by" (","? grounds+=Argument)*)? ("warranted by" (","? warrants+=Argument)*)? "}")?
		public Group getGroup_10() { return cGroup_10; }

		//// sub-arguments
		//"{"
		public Keyword getLeftCurlyBracketKeyword_10_0() { return cLeftCurlyBracketKeyword_10_0; }

		//("supported by" (","? grounds+=Argument)*)?
		public Group getGroup_10_1() { return cGroup_10_1; }

		//"supported by"
		public Keyword getSupportedByKeyword_10_1_0() { return cSupportedByKeyword_10_1_0; }

		//(","? grounds+=Argument)*
		public Group getGroup_10_1_1() { return cGroup_10_1_1; }

		//","?
		public Keyword getCommaKeyword_10_1_1_0() { return cCommaKeyword_10_1_1_0; }

		//grounds+=Argument
		public Assignment getGroundsAssignment_10_1_1_1() { return cGroundsAssignment_10_1_1_1; }

		//Argument
		public RuleCall getGroundsArgumentParserRuleCall_10_1_1_1_0() { return cGroundsArgumentParserRuleCall_10_1_1_1_0; }

		//("warranted by" (","? warrants+=Argument)*)?
		public Group getGroup_10_2() { return cGroup_10_2; }

		//"warranted by"
		public Keyword getWarrantedByKeyword_10_2_0() { return cWarrantedByKeyword_10_2_0; }

		//(","? warrants+=Argument)*
		public Group getGroup_10_2_1() { return cGroup_10_2_1; }

		//","?
		public Keyword getCommaKeyword_10_2_1_0() { return cCommaKeyword_10_2_1_0; }

		//warrants+=Argument
		public Assignment getWarrantsAssignment_10_2_1_1() { return cWarrantsAssignment_10_2_1_1; }

		//Argument
		public RuleCall getWarrantsArgumentParserRuleCall_10_2_1_1_0() { return cWarrantsArgumentParserRuleCall_10_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10_3() { return cRightCurlyBracketKeyword_10_3; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Assignment cAssignAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAssignAssignmentOpParserRuleCall_0 = (RuleCall)cAssignAssignment.eContents().get(0);
		
		//// The expression syntax, currently just replaced by a string.
		//Expression:
		//	assign=AssignmentOp;
		public ParserRule getRule() { return rule; }

		//assign=AssignmentOp
		public Assignment getAssignAssignment() { return cAssignAssignment; }

		//AssignmentOp
		public RuleCall getAssignAssignmentOpParserRuleCall_0() { return cAssignAssignmentOpParserRuleCall_0; }
	}

	public class AssignmentOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAssignPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cAopAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cAopHyphenMinusGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cAopAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cAssignMinLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cAopAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cAopLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1_0 = (Keyword)cAopAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOrExpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AssignmentOp returns Expression:
		//	OrExp (({AssignPlus.left=current} aop="->" | {AssignMin.left=current} aop="<->") right=OrExp)?;
		public ParserRule getRule() { return rule; }

		//OrExp (({AssignPlus.left=current} aop="->" | {AssignMin.left=current} aop="<->") right=OrExp)?
		public Group getGroup() { return cGroup; }

		//OrExp
		public RuleCall getOrExpParserRuleCall_0() { return cOrExpParserRuleCall_0; }

		//(({AssignPlus.left=current} aop="->" | {AssignMin.left=current} aop="<->") right=OrExp)?
		public Group getGroup_1() { return cGroup_1; }

		//{AssignPlus.left=current} aop="->" | {AssignMin.left=current} aop="<->"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{AssignPlus.left=current} aop="->"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{AssignPlus.left=current}
		public Action getAssignPlusLeftAction_1_0_0_0() { return cAssignPlusLeftAction_1_0_0_0; }

		//aop="->"
		public Assignment getAopAssignment_1_0_0_1() { return cAopAssignment_1_0_0_1; }

		//"->"
		public Keyword getAopHyphenMinusGreaterThanSignKeyword_1_0_0_1_0() { return cAopHyphenMinusGreaterThanSignKeyword_1_0_0_1_0; }

		//{AssignMin.left=current} aop="<->"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{AssignMin.left=current}
		public Action getAssignMinLeftAction_1_0_1_0() { return cAssignMinLeftAction_1_0_1_0; }

		//aop="<->"
		public Assignment getAopAssignment_1_0_1_1() { return cAopAssignment_1_0_1_1; }

		//"<->"
		public Keyword getAopLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1_0() { return cAopLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1_0; }

		//right=OrExp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//OrExp
		public RuleCall getRightOrExpParserRuleCall_1_1_0() { return cRightOrExpParserRuleCall_1_1_0; }
	}

	public class OrExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOr_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOr_opVerticalLineKeyword_1_1_0 = (Keyword)cOr_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExp returns Expression:
		//	AndExp ({Or.left=current} or_op="|" right=AndExp)*;
		public ParserRule getRule() { return rule; }

		//AndExp ({Or.left=current} or_op="|" right=AndExp)*
		public Group getGroup() { return cGroup; }

		//AndExp
		public RuleCall getAndExpParserRuleCall_0() { return cAndExpParserRuleCall_0; }

		//({Or.left=current} or_op="|" right=AndExp)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//or_op="|"
		public Assignment getOr_opAssignment_1_1() { return cOr_opAssignment_1_1; }

		//"|"
		public Keyword getOr_opVerticalLineKeyword_1_1_0() { return cOr_opVerticalLineKeyword_1_1_0; }

		//right=AndExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExp
		public RuleCall getRightAndExpParserRuleCall_1_2_0() { return cRightAndExpParserRuleCall_1_2_0; }
	}

	public class AndExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAnd_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cAnd_opAmpersandKeyword_1_1_0 = (Keyword)cAnd_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationalParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExp returns Expression:
		//	Relational ({And.left=current} and_op="&" right=Relational)*;
		public ParserRule getRule() { return rule; }

		//Relational ({And.left=current} and_op="&" right=Relational)*
		public Group getGroup() { return cGroup; }

		//Relational
		public RuleCall getRelationalParserRuleCall_0() { return cRelationalParserRuleCall_0; }

		//({And.left=current} and_op="&" right=Relational)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//and_op="&"
		public Assignment getAnd_opAssignment_1_1() { return cAnd_opAssignment_1_1; }

		//"&"
		public Keyword getAnd_opAmpersandKeyword_1_1_0() { return cAnd_opAmpersandKeyword_1_1_0; }

		//right=Relational
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Relational
		public RuleCall getRightRelationalParserRuleCall_1_2_0() { return cRightRelationalParserRuleCall_1_2_0; }
	}

	public class RelationalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relational");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cRelNotEqLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cRel_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cRel_opExclamationMarkEqualsSignKeyword_1_0_0_1_0 = (Keyword)cRel_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cRelEqEqLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cRel_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cRel_opEqualsSignEqualsSignKeyword_1_0_1_1_0 = (Keyword)cRel_opAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cRelLtEqLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Assignment cRel_opAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final Keyword cRel_opGreaterThanSignEqualsSignKeyword_1_0_2_1_0 = (Keyword)cRel_opAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cRelGtEqLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Assignment cRel_opAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final Keyword cRel_opLessThanSignEqualsSignKeyword_1_0_3_1_0 = (Keyword)cRel_opAssignment_1_0_3_1.eContents().get(0);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cRelEqLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Assignment cRel_opAssignment_1_0_4_1 = (Assignment)cGroup_1_0_4.eContents().get(1);
		private final Keyword cRel_opEqualsSignKeyword_1_0_4_1_0 = (Keyword)cRel_opAssignment_1_0_4_1.eContents().get(0);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Action cRelLtLeftAction_1_0_5_0 = (Action)cGroup_1_0_5.eContents().get(0);
		private final Assignment cRel_opAssignment_1_0_5_1 = (Assignment)cGroup_1_0_5.eContents().get(1);
		private final Keyword cRel_opLessThanSignKeyword_1_0_5_1_0 = (Keyword)cRel_opAssignment_1_0_5_1.eContents().get(0);
		private final Group cGroup_1_0_6 = (Group)cAlternatives_1_0.eContents().get(6);
		private final Action cRelGtLeftAction_1_0_6_0 = (Action)cGroup_1_0_6.eContents().get(0);
		private final Assignment cRel_opAssignment_1_0_6_1 = (Assignment)cGroup_1_0_6.eContents().get(1);
		private final Keyword cRel_opGreaterThanSignKeyword_1_0_6_1_0 = (Keyword)cRel_opAssignment_1_0_6_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Relational returns Expression:
		//	Addition (({RelNotEq.left=current} rel_op="!=" | {RelEqEq.left=current} rel_op="==" | {RelLtEq.left=current}
		//	rel_op=">=" | {RelGtEq.left=current} rel_op="<=" | {RelEq.left=current} rel_op="=" | {RelLt.left=current} rel_op="<" |
		//	{RelGt.left=current} rel_op=">") right=Addition)?;
		public ParserRule getRule() { return rule; }

		//Addition (({RelNotEq.left=current} rel_op="!=" | {RelEqEq.left=current} rel_op="==" | {RelLtEq.left=current} rel_op=">="
		//| {RelGtEq.left=current} rel_op="<=" | {RelEq.left=current} rel_op="=" | {RelLt.left=current} rel_op="<" |
		//{RelGt.left=current} rel_op=">") right=Addition)?
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//(({RelNotEq.left=current} rel_op="!=" | {RelEqEq.left=current} rel_op="==" | {RelLtEq.left=current} rel_op=">=" |
		//{RelGtEq.left=current} rel_op="<=" | {RelEq.left=current} rel_op="=" | {RelLt.left=current} rel_op="<" |
		//{RelGt.left=current} rel_op=">") right=Addition)?
		public Group getGroup_1() { return cGroup_1; }

		//{RelNotEq.left=current} rel_op="!=" | {RelEqEq.left=current} rel_op="==" | {RelLtEq.left=current} rel_op=">=" |
		//{RelGtEq.left=current} rel_op="<=" | {RelEq.left=current} rel_op="=" | {RelLt.left=current} rel_op="<" |
		//{RelGt.left=current} rel_op=">"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{RelNotEq.left=current} rel_op="!="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{RelNotEq.left=current}
		public Action getRelNotEqLeftAction_1_0_0_0() { return cRelNotEqLeftAction_1_0_0_0; }

		//rel_op="!="
		public Assignment getRel_opAssignment_1_0_0_1() { return cRel_opAssignment_1_0_0_1; }

		//"!="
		public Keyword getRel_opExclamationMarkEqualsSignKeyword_1_0_0_1_0() { return cRel_opExclamationMarkEqualsSignKeyword_1_0_0_1_0; }

		//{RelEqEq.left=current} rel_op="=="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{RelEqEq.left=current}
		public Action getRelEqEqLeftAction_1_0_1_0() { return cRelEqEqLeftAction_1_0_1_0; }

		//rel_op="=="
		public Assignment getRel_opAssignment_1_0_1_1() { return cRel_opAssignment_1_0_1_1; }

		//"=="
		public Keyword getRel_opEqualsSignEqualsSignKeyword_1_0_1_1_0() { return cRel_opEqualsSignEqualsSignKeyword_1_0_1_1_0; }

		//{RelLtEq.left=current} rel_op=">="
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{RelLtEq.left=current}
		public Action getRelLtEqLeftAction_1_0_2_0() { return cRelLtEqLeftAction_1_0_2_0; }

		//rel_op=">="
		public Assignment getRel_opAssignment_1_0_2_1() { return cRel_opAssignment_1_0_2_1; }

		//">="
		public Keyword getRel_opGreaterThanSignEqualsSignKeyword_1_0_2_1_0() { return cRel_opGreaterThanSignEqualsSignKeyword_1_0_2_1_0; }

		//{RelGtEq.left=current} rel_op="<="
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{RelGtEq.left=current}
		public Action getRelGtEqLeftAction_1_0_3_0() { return cRelGtEqLeftAction_1_0_3_0; }

		//rel_op="<="
		public Assignment getRel_opAssignment_1_0_3_1() { return cRel_opAssignment_1_0_3_1; }

		//"<="
		public Keyword getRel_opLessThanSignEqualsSignKeyword_1_0_3_1_0() { return cRel_opLessThanSignEqualsSignKeyword_1_0_3_1_0; }

		//{RelEq.left=current} rel_op="="
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//{RelEq.left=current}
		public Action getRelEqLeftAction_1_0_4_0() { return cRelEqLeftAction_1_0_4_0; }

		//rel_op="="
		public Assignment getRel_opAssignment_1_0_4_1() { return cRel_opAssignment_1_0_4_1; }

		//"="
		public Keyword getRel_opEqualsSignKeyword_1_0_4_1_0() { return cRel_opEqualsSignKeyword_1_0_4_1_0; }

		//{RelLt.left=current} rel_op="<"
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//{RelLt.left=current}
		public Action getRelLtLeftAction_1_0_5_0() { return cRelLtLeftAction_1_0_5_0; }

		//rel_op="<"
		public Assignment getRel_opAssignment_1_0_5_1() { return cRel_opAssignment_1_0_5_1; }

		//"<"
		public Keyword getRel_opLessThanSignKeyword_1_0_5_1_0() { return cRel_opLessThanSignKeyword_1_0_5_1_0; }

		//{RelGt.left=current} rel_op=">"
		public Group getGroup_1_0_6() { return cGroup_1_0_6; }

		//{RelGt.left=current}
		public Action getRelGtLeftAction_1_0_6_0() { return cRelGtLeftAction_1_0_6_0; }

		//rel_op=">"
		public Assignment getRel_opAssignment_1_0_6_1() { return cRel_opAssignment_1_0_6_1; }

		//">"
		public Keyword getRel_opGreaterThanSignKeyword_1_0_6_1_0() { return cRel_opGreaterThanSignKeyword_1_0_6_1_0; }

		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cAdd_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cAdd_opPlusSignKeyword_1_0_0_1_0 = (Keyword)cAdd_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cAdd_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cAdd_opHyphenMinusKeyword_1_0_1_1_0 = (Keyword)cAdd_opAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication (({Plus.left=current} add_op="+" | {Minus.left=current} add_op="-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Plus.left=current} add_op="+" | {Minus.left=current} add_op="-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Plus.left=current} add_op="+" | {Minus.left=current} add_op="-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} add_op="+" | {Minus.left=current} add_op="-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} add_op="+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//add_op="+"
		public Assignment getAdd_opAssignment_1_0_0_1() { return cAdd_opAssignment_1_0_0_1; }

		//"+"
		public Keyword getAdd_opPlusSignKeyword_1_0_0_1_0() { return cAdd_opPlusSignKeyword_1_0_0_1_0; }

		//{Minus.left=current} add_op="-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//add_op="-"
		public Assignment getAdd_opAssignment_1_0_1_1() { return cAdd_opAssignment_1_0_1_1; }

		//"-"
		public Keyword getAdd_opHyphenMinusKeyword_1_0_1_1_0() { return cAdd_opHyphenMinusKeyword_1_0_1_1_0; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cMul_opAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cMul_opAsteriskKeyword_1_0_0_1_0 = (Keyword)cMul_opAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cMul_opAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cMul_opSolidusKeyword_1_0_1_1_0 = (Keyword)cMul_opAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPowerParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//	Power (({Multi.left=current} mul_op="*" | {Div.left=current} mul_op="/") right=Power)*;
		public ParserRule getRule() { return rule; }

		//Power (({Multi.left=current} mul_op="*" | {Div.left=current} mul_op="/") right=Power)*
		public Group getGroup() { return cGroup; }

		//Power
		public RuleCall getPowerParserRuleCall_0() { return cPowerParserRuleCall_0; }

		//(({Multi.left=current} mul_op="*" | {Div.left=current} mul_op="/") right=Power)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current} mul_op="*" | {Div.left=current} mul_op="/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multi.left=current} mul_op="*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }

		//mul_op="*"
		public Assignment getMul_opAssignment_1_0_0_1() { return cMul_opAssignment_1_0_0_1; }

		//"*"
		public Keyword getMul_opAsteriskKeyword_1_0_0_1_0() { return cMul_opAsteriskKeyword_1_0_0_1_0; }

		//{Div.left=current} mul_op="/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }

		//mul_op="/"
		public Assignment getMul_opAssignment_1_0_1_1() { return cMul_opAssignment_1_0_1_1; }

		//"/"
		public Keyword getMul_opSolidusKeyword_1_0_1_1_0() { return cMul_opSolidusKeyword_1_0_1_1_0; }

		//right=Power
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Power
		public RuleCall getRightPowerParserRuleCall_1_1_0() { return cRightPowerParserRuleCall_1_1_0; }
	}

	public class PowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Power");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cPowLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cPow_opAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cPow_opCircumflexAccentKeyword_1_0_1_0 = (Keyword)cPow_opAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Power returns Expression:
		//	UnaryExpr (({Pow.left=current} pow_op="^") right=UnaryExpr)*;
		public ParserRule getRule() { return rule; }

		//UnaryExpr (({Pow.left=current} pow_op="^") right=UnaryExpr)*
		public Group getGroup() { return cGroup; }

		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }

		//(({Pow.left=current} pow_op="^") right=UnaryExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//{Pow.left=current} pow_op="^"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Pow.left=current}
		public Action getPowLeftAction_1_0_0() { return cPowLeftAction_1_0_0; }

		//pow_op="^"
		public Assignment getPow_opAssignment_1_0_1() { return cPow_opAssignment_1_0_1; }

		//"^"
		public Keyword getPow_opCircumflexAccentKeyword_1_0_1_0() { return cPow_opCircumflexAccentKeyword_1_0_1_0; }

		//right=UnaryExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryExpr
		public RuleCall getRightUnaryExprParserRuleCall_1_1_0() { return cRightUnaryExprParserRuleCall_1_1_0; }
	}

	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUopAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUopUnaryOpEnumRuleCall_0_0 = (RuleCall)cUopAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightPrePrimaryExprParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//UnaryExpr returns Expression:
		//	uop=UnaryOp? right=PrePrimaryExpr;
		public ParserRule getRule() { return rule; }

		//uop=UnaryOp? right=PrePrimaryExpr
		public Group getGroup() { return cGroup; }

		//uop=UnaryOp?
		public Assignment getUopAssignment_0() { return cUopAssignment_0; }

		//UnaryOp
		public RuleCall getUopUnaryOpEnumRuleCall_0_0() { return cUopUnaryOpEnumRuleCall_0_0; }

		//right=PrePrimaryExpr
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//PrePrimaryExpr
		public RuleCall getRightPrePrimaryExprParserRuleCall_1_0() { return cRightPrePrimaryExprParserRuleCall_1_0; }
	}

	public class PrePrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrePrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_2_1_0 = (RuleCall)cNAssignment_2_1.eContents().get(0);
		
		//PrePrimaryExpr returns Expression:
		//	TerminalExpression | "(" Expression ")" | "-" n=INT;
		public ParserRule getRule() { return rule; }

		//TerminalExpression | "(" Expression ")" | "-" n=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//"(" Expression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//"-" n=INT
		public Group getGroup_2() { return cGroup_2; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_0() { return cHyphenMinusKeyword_2_0; }

		//n=INT
		public Assignment getNAssignment_2_1() { return cNAssignment_2_1; }

		//INT
		public RuleCall getNINTTerminalRuleCall_2_1_0() { return cNINTTerminalRuleCall_2_1_0; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cArgumentAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cValueArgumentCrossReference_2_1_0 = (CrossReference)cValueAssignment_2_1.eContents().get(0);
		private final RuleCall cValueArgumentIDTerminalRuleCall_2_1_0_1 = (RuleCall)cValueArgumentCrossReference_2_1_0.eContents().get(1);
		
		//TerminalExpression:
		//	{IntLiteral} value=INT | {BooleanLiteral} value=BOOLEAN | {Argument} value=[Argument];
		public ParserRule getRule() { return rule; }

		//{IntLiteral} value=INT | {BooleanLiteral} value=BOOLEAN | {Argument} value=[Argument]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntLiteral} value=INT
		public Group getGroup_0() { return cGroup_0; }

		//{IntLiteral}
		public Action getIntLiteralAction_0_0() { return cIntLiteralAction_0_0; }

		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }

		//{BooleanLiteral} value=BOOLEAN
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_1_0() { return cBooleanLiteralAction_1_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_1_1_0() { return cValueBOOLEANTerminalRuleCall_1_1_0; }

		//{Argument} value=[Argument]
		public Group getGroup_2() { return cGroup_2; }

		//{Argument}
		public Action getArgumentAction_2_0() { return cArgumentAction_2_0; }

		//value=[Argument]
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//[Argument]
		public CrossReference getValueArgumentCrossReference_2_1_0() { return cValueArgumentCrossReference_2_1_0; }

		//ID
		public RuleCall getValueArgumentIDTerminalRuleCall_2_1_0_1() { return cValueArgumentIDTerminalRuleCall_2_1_0_1; }
	}
	
	
	public class UnaryOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEFAULTQuestionMarkKeyword_0_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTExclamationMarkKeyword_1_0 = (Keyword)cNOTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UnaryOp:
		//	DEFAULT="?" | NOT="!";
		public EnumRule getRule() { return rule; }

		//DEFAULT="?" | NOT="!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DEFAULT="?"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_0() { return cDEFAULTEnumLiteralDeclaration_0; }

		//"?"
		public Keyword getDEFAULTQuestionMarkKeyword_0_0() { return cDEFAULTQuestionMarkKeyword_0_0; }

		//NOT="!"
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_1() { return cNOTEnumLiteralDeclaration_1; }

		//"!"
		public Keyword getNOTExclamationMarkKeyword_1_0() { return cNOTExclamationMarkKeyword_1_0; }
	}
	
	private ArgumentDiagramElements pArgumentDiagram;
	private LinkElements pLink;
	private RebutsElements pRebuts;
	private MitigatesElements pMitigates;
	private ArgumentElements pArgument;
	private ExpressionElements pExpression;
	private AssignmentOpElements pAssignmentOp;
	private OrExpElements pOrExp;
	private AndExpElements pAndExp;
	private RelationalElements pRelational;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private PowerElements pPower;
	private UnaryExprElements pUnaryExpr;
	private UnaryOpElements unknownRuleUnaryOp;
	private PrePrimaryExprElements pPrePrimaryExpr;
	private TerminalExpressionElements pTerminalExpression;
	private TerminalRule tINT;
	private TerminalRule tBOOLEAN;
	private TerminalRule tID;
	private TerminalRule tQUALIFIED_NAME;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArgumentGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ArgumentDiagram:
	//	("argument:" name=ID)? (nodes+=Argument | links+=Link)*;
	public ArgumentDiagramElements getArgumentDiagramAccess() {
		return (pArgumentDiagram != null) ? pArgumentDiagram : (pArgumentDiagram = new ArgumentDiagramElements());
	}
	
	public ParserRule getArgumentDiagramRule() {
		return getArgumentDiagramAccess().getRule();
	}

	/// *
	//These relationships can be derived
	// * /Link:
	//	Rebuts | Mitigates;
	public LinkElements getLinkAccess() {
		return (pLink != null) ? pLink : (pLink = new LinkElements());
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//Rebuts:
	//	from=[Argument] "rebutted by" to=[Argument];
	public RebutsElements getRebutsAccess() {
		return (pRebuts != null) ? pRebuts : (pRebuts = new RebutsElements());
	}
	
	public ParserRule getRebutsRule() {
		return getRebutsAccess().getRule();
	}

	//Mitigates:
	//	from=[Argument] "mitigated by" to=[Argument] "on" rebuttal=[Argument];
	public MitigatesElements getMitigatesAccess() {
		return (pMitigates != null) ? pMitigates : (pMitigates = new MitigatesElements());
	}
	
	public ParserRule getMitigatesRule() {
		return getMitigatesAccess().getRule();
	}

	//Argument:
	//	name=ID ":"? // unique identifier
	//	description= // non-empty description
	//	STRING ("round" round=INT)? // default is 0
	//	("replacing" origin=[Argument])? // default is null
	//	("with" expr=Expression)? // default is the same as the name
	//	("foreground" foreground=STRING)? // default is 'black'
	//	("background" background=STRING)? // default is 'white'
	//	("shape" shape=STRING)? // default is rectangle 
	//	("image" image=STRING)? // default is null 
	//	// sub-arguments
	//	("{" ("supported by" (","? grounds+=Argument)*)? ("warranted by" (","? warrants+=Argument)*)? "}")?;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//// The expression syntax, currently just replaced by a string.
	//Expression:
	//	assign=AssignmentOp;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AssignmentOp returns Expression:
	//	OrExp (({AssignPlus.left=current} aop="->" | {AssignMin.left=current} aop="<->") right=OrExp)?;
	public AssignmentOpElements getAssignmentOpAccess() {
		return (pAssignmentOp != null) ? pAssignmentOp : (pAssignmentOp = new AssignmentOpElements());
	}
	
	public ParserRule getAssignmentOpRule() {
		return getAssignmentOpAccess().getRule();
	}

	//OrExp returns Expression:
	//	AndExp ({Or.left=current} or_op="|" right=AndExp)*;
	public OrExpElements getOrExpAccess() {
		return (pOrExp != null) ? pOrExp : (pOrExp = new OrExpElements());
	}
	
	public ParserRule getOrExpRule() {
		return getOrExpAccess().getRule();
	}

	//AndExp returns Expression:
	//	Relational ({And.left=current} and_op="&" right=Relational)*;
	public AndExpElements getAndExpAccess() {
		return (pAndExp != null) ? pAndExp : (pAndExp = new AndExpElements());
	}
	
	public ParserRule getAndExpRule() {
		return getAndExpAccess().getRule();
	}

	//Relational returns Expression:
	//	Addition (({RelNotEq.left=current} rel_op="!=" | {RelEqEq.left=current} rel_op="==" | {RelLtEq.left=current}
	//	rel_op=">=" | {RelGtEq.left=current} rel_op="<=" | {RelEq.left=current} rel_op="=" | {RelLt.left=current} rel_op="<" |
	//	{RelGt.left=current} rel_op=">") right=Addition)?;
	public RelationalElements getRelationalAccess() {
		return (pRelational != null) ? pRelational : (pRelational = new RelationalElements());
	}
	
	public ParserRule getRelationalRule() {
		return getRelationalAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication (({Plus.left=current} add_op="+" | {Minus.left=current} add_op="-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	Power (({Multi.left=current} mul_op="*" | {Div.left=current} mul_op="/") right=Power)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Power returns Expression:
	//	UnaryExpr (({Pow.left=current} pow_op="^") right=UnaryExpr)*;
	public PowerElements getPowerAccess() {
		return (pPower != null) ? pPower : (pPower = new PowerElements());
	}
	
	public ParserRule getPowerRule() {
		return getPowerAccess().getRule();
	}

	//UnaryExpr returns Expression:
	//	uop=UnaryOp? right=PrePrimaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return (pUnaryExpr != null) ? pUnaryExpr : (pUnaryExpr = new UnaryExprElements());
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}

	//enum UnaryOp:
	//	DEFAULT="?" | NOT="!";
	public UnaryOpElements getUnaryOpAccess() {
		return (unknownRuleUnaryOp != null) ? unknownRuleUnaryOp : (unknownRuleUnaryOp = new UnaryOpElements());
	}
	
	public EnumRule getUnaryOpRule() {
		return getUnaryOpAccess().getRule();
	}

	//PrePrimaryExpr returns Expression:
	//	TerminalExpression | "(" Expression ")" | "-" n=INT;
	public PrePrimaryExprElements getPrePrimaryExprAccess() {
		return (pPrePrimaryExpr != null) ? pPrePrimaryExpr : (pPrePrimaryExpr = new PrePrimaryExprElements());
	}
	
	public ParserRule getPrePrimaryExprRule() {
		return getPrePrimaryExprAccess().getRule();
	}

	//TerminalExpression:
	//	{IntLiteral} value=INT | {BooleanLiteral} value=BOOLEAN | {Argument} value=[Argument];
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0" | "1".."9" "0".."9"*;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal ID:
	//	"#" !"#"+ "#" | "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal QUALIFIED_NAME:
	//	ID ("." ID)*;
	public TerminalRule getQUALIFIED_NAMERule() {
		return (tQUALIFIED_NAME != null) ? tQUALIFIED_NAME : (tQUALIFIED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUALIFIED_NAME"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
