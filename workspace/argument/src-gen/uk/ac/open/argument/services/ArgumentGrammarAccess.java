/*
* generated by Xtext
*/

package uk.ac.open.argument.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ArgumentGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ArgumentDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cArgumentKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cForKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cHighlightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cHighlightNodeCrossReference_1_1_0 = (CrossReference)cHighlightAssignment_1_1.eContents().get(0);
		private final RuleCall cHighlightNodeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cHighlightNodeCrossReference_1_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNodesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNodesNodeParserRuleCall_2_0_0 = (RuleCall)cNodesAssignment_2_0.eContents().get(0);
		private final Assignment cLinksAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cLinksLinkParserRuleCall_2_1_0 = (RuleCall)cLinksAssignment_2_1.eContents().get(0);
		
		//ArgumentDiagram:
		//	("argument:" name=ID)? ("for" highlight=[Node])? (nodes+=Node | links+=Link)*;
		public ParserRule getRule() { return rule; }

		//("argument:" name=ID)? ("for" highlight=[Node])? (nodes+=Node | links+=Link)*
		public Group getGroup() { return cGroup; }

		//("argument:" name=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//"argument:"
		public Keyword getArgumentKeyword_0_0() { return cArgumentKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//("for" highlight=[Node])?
		public Group getGroup_1() { return cGroup_1; }

		//"for"
		public Keyword getForKeyword_1_0() { return cForKeyword_1_0; }

		//highlight=[Node]
		public Assignment getHighlightAssignment_1_1() { return cHighlightAssignment_1_1; }

		//[Node]
		public CrossReference getHighlightNodeCrossReference_1_1_0() { return cHighlightNodeCrossReference_1_1_0; }

		//ID
		public RuleCall getHighlightNodeIDTerminalRuleCall_1_1_0_1() { return cHighlightNodeIDTerminalRuleCall_1_1_0_1; }

		//(nodes+=Node | links+=Link)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//nodes+=Node
		public Assignment getNodesAssignment_2_0() { return cNodesAssignment_2_0; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_2_0_0() { return cNodesNodeParserRuleCall_2_0_0; }

		//links+=Link
		public Assignment getLinksAssignment_2_1() { return cLinksAssignment_2_1; }

		//Link
		public RuleCall getLinksLinkParserRuleCall_2_1_0() { return cLinksLinkParserRuleCall_2_1_0; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArgumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFactParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Node:
		//	Argument | Fact;
		public ParserRule getRule() { return rule; }

		//Argument | Fact
		public Alternatives getAlternatives() { return cAlternatives; }

		//Argument
		public RuleCall getArgumentParserRuleCall_0() { return cArgumentParserRuleCall_0; }

		//Fact
		public RuleCall getFactParserRuleCall_1() { return cFactParserRuleCall_1; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cRoundKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cRoundAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cRoundSTRINGTerminalRuleCall_4_1_1_0 = (RuleCall)cRoundAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cSupportedByKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cGroup_4_2.eContents().get(1);
		private final Keyword cCommaKeyword_4_2_1_0 = (Keyword)cGroup_4_2_1.eContents().get(0);
		private final Assignment cGroundsAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cGroundsFactParserRuleCall_4_2_1_1_0 = (RuleCall)cGroundsAssignment_4_2_1_1.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cWarrantedByKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Group cGroup_4_3_1 = (Group)cGroup_4_3.eContents().get(1);
		private final Keyword cCommaKeyword_4_3_1_0 = (Keyword)cGroup_4_3_1.eContents().get(0);
		private final Assignment cWarrantsAssignment_4_3_1_1 = (Assignment)cGroup_4_3_1.eContents().get(1);
		private final RuleCall cWarrantsArgumentParserRuleCall_4_3_1_1_0 = (RuleCall)cWarrantsAssignment_4_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//Argument:
		//	name=ID "A" ":"? description=STRING? ("{" ("round" round=STRING)? ("supported by" (","? grounds+=Fact)*)?
		//	("warranted by" (","? warrants+=Argument)*)? "}")?;
		public ParserRule getRule() { return rule; }

		//name=ID "A" ":"? description=STRING? ("{" ("round" round=STRING)? ("supported by" (","? grounds+=Fact)*)?
		//("warranted by" (","? warrants+=Argument)*)? "}")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"A"
		public Keyword getAKeyword_1() { return cAKeyword_1; }

		//":"?
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//description=STRING?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }

		//("{" ("round" round=STRING)? ("supported by" (","? grounds+=Fact)*)? ("warranted by" (","? warrants+=Argument)*)? "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//("round" round=STRING)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"round"
		public Keyword getRoundKeyword_4_1_0() { return cRoundKeyword_4_1_0; }

		//round=STRING
		public Assignment getRoundAssignment_4_1_1() { return cRoundAssignment_4_1_1; }

		//STRING
		public RuleCall getRoundSTRINGTerminalRuleCall_4_1_1_0() { return cRoundSTRINGTerminalRuleCall_4_1_1_0; }

		//("supported by" (","? grounds+=Fact)*)?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"supported by"
		public Keyword getSupportedByKeyword_4_2_0() { return cSupportedByKeyword_4_2_0; }

		//(","? grounds+=Fact)*
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }

		//","?
		public Keyword getCommaKeyword_4_2_1_0() { return cCommaKeyword_4_2_1_0; }

		//grounds+=Fact
		public Assignment getGroundsAssignment_4_2_1_1() { return cGroundsAssignment_4_2_1_1; }

		//Fact
		public RuleCall getGroundsFactParserRuleCall_4_2_1_1_0() { return cGroundsFactParserRuleCall_4_2_1_1_0; }

		//("warranted by" (","? warrants+=Argument)*)?
		public Group getGroup_4_3() { return cGroup_4_3; }

		//"warranted by"
		public Keyword getWarrantedByKeyword_4_3_0() { return cWarrantedByKeyword_4_3_0; }

		//(","? warrants+=Argument)*
		public Group getGroup_4_3_1() { return cGroup_4_3_1; }

		//","?
		public Keyword getCommaKeyword_4_3_1_0() { return cCommaKeyword_4_3_1_0; }

		//warrants+=Argument
		public Assignment getWarrantsAssignment_4_3_1_1() { return cWarrantsAssignment_4_3_1_1; }

		//Argument
		public RuleCall getWarrantsArgumentParserRuleCall_4_3_1_1_0() { return cWarrantsArgumentParserRuleCall_4_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
	}

	public class FactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cGKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		private final Assignment cExprAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExprSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cExprAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cReplacingKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cOriginAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final CrossReference cOriginNodeCrossReference_2_3_1_0 = (CrossReference)cOriginAssignment_2_3_1.eContents().get(0);
		private final RuleCall cOriginNodeIDTerminalRuleCall_2_3_1_0_1 = (RuleCall)cOriginNodeCrossReference_2_3_1_0.eContents().get(1);
		
		/// *
		//Fact: (name=ID "G"
		//	((":")? description=STRING expr=Expression ('replacing' origin=[Node])? )?);
		// * /Fact:
		//	name=ID "G" (":"? description=STRING expr=STRING ("replacing" origin=[Node])?)?;
		public ParserRule getRule() { return rule; }

		//name=ID "G" (":"? description=STRING expr=STRING ("replacing" origin=[Node])?)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"G"
		public Keyword getGKeyword_1() { return cGKeyword_1; }

		//(":"? description=STRING expr=STRING ("replacing" origin=[Node])?)?
		public Group getGroup_2() { return cGroup_2; }

		//":"?
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }

		//expr=STRING
		public Assignment getExprAssignment_2_2() { return cExprAssignment_2_2; }

		//STRING
		public RuleCall getExprSTRINGTerminalRuleCall_2_2_0() { return cExprSTRINGTerminalRuleCall_2_2_0; }

		//("replacing" origin=[Node])?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"replacing"
		public Keyword getReplacingKeyword_2_3_0() { return cReplacingKeyword_2_3_0; }

		//origin=[Node]
		public Assignment getOriginAssignment_2_3_1() { return cOriginAssignment_2_3_1; }

		//[Node]
		public CrossReference getOriginNodeCrossReference_2_3_1_0() { return cOriginNodeCrossReference_2_3_1_0; }

		//ID
		public RuleCall getOriginNodeIDTerminalRuleCall_2_3_1_0_1() { return cOriginNodeIDTerminalRuleCall_2_3_1_0_1; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRebutsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMitigatesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		//Expression:
		//	assign=AssignmentOp;
		//		
		//AssignmentOp returns Expression:
		//	OrExp (({AssignPlus.left=current} aop='->' | {AssignMin.left=current} aop='<->') right=OrExp)?;
		//
		//OrExp returns Expression:
		//	AndExp ({Or.left=current} or_op='|' right=AndExp)*;
		//
		//AndExp returns Expression:
		//	Relational ({And.left=current} and_op='&' right=Relational)*;
		//
		//Relational returns Expression:
		//	Addition (({RelNotEq.left=current} rel_op='!=' | {RelEqEq.left=current} rel_op='==' 
		//	| {RelLtEq.left=current} rel_op='>=' | {RelGtEq.left=current} rel_op='<=' 
		//	| {RelEq.left=current} rel_op='=' | {RelLt.left=current} rel_op='<' 
		//	| {RelGt.left=current} rel_op='>') right=Addition)?;
		//
		//Addition returns Expression:
		//	Multiplication (({Plus.left=current} add_op='+' | {Minus.left=current} add_op='-') right=Multiplication)*;
		//
		//Multiplication returns Expression:
		//	Power (({Multi.left=current} mul_op='*' | {Div.left=current} mul_op='/') right=Power)*;
		//
		//Power returns Expression:
		//	UnaryExpr (({Pow.left=current} pow_op='^') right=UnaryExpr)*;
		//
		//UnaryExpr returns Expression:
		//	(uop?=UnaryOp)? right=PrePrimaryExpr;
		//
		//enum UnaryOp:
		//	NOT='!';
		//
		//PrePrimaryExpr returns Expression:
		//	TerminalExpression | '(' Expression ')' | '-' n=INT;
		//
		//TerminalExpression:
		//	  {IntLiteral} value=INT 
		//	| {StringLiteral} value=STRING 
		//	| {BooleanLiteral} value=BOOLEAN 
		//	| {Node} value=[Node];
		// * /Link:
		//	Rebuts | Mitigates;
		public ParserRule getRule() { return rule; }

		//Rebuts | Mitigates
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rebuts
		public RuleCall getRebutsParserRuleCall_0() { return cRebutsParserRuleCall_0; }

		//Mitigates
		public RuleCall getMitigatesParserRuleCall_1() { return cMitigatesParserRuleCall_1; }
	}

	public class RebutsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rebuts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromArgumentCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromArgumentIDTerminalRuleCall_0_0_1 = (RuleCall)cFromArgumentCrossReference_0_0.eContents().get(1);
		private final Keyword cRebuttedByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToArgumentCrossReference_2_0 = (CrossReference)cToAssignment_2.eContents().get(0);
		private final RuleCall cToArgumentIDTerminalRuleCall_2_0_1 = (RuleCall)cToArgumentCrossReference_2_0.eContents().get(1);
		
		//Rebuts:
		//	from=[Argument] "rebutted by" to=[Argument];
		public ParserRule getRule() { return rule; }

		//from=[Argument] "rebutted by" to=[Argument]
		public Group getGroup() { return cGroup; }

		//from=[Argument]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//[Argument]
		public CrossReference getFromArgumentCrossReference_0_0() { return cFromArgumentCrossReference_0_0; }

		//ID
		public RuleCall getFromArgumentIDTerminalRuleCall_0_0_1() { return cFromArgumentIDTerminalRuleCall_0_0_1; }

		//"rebutted by"
		public Keyword getRebuttedByKeyword_1() { return cRebuttedByKeyword_1; }

		//to=[Argument]
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//[Argument]
		public CrossReference getToArgumentCrossReference_2_0() { return cToArgumentCrossReference_2_0; }

		//ID
		public RuleCall getToArgumentIDTerminalRuleCall_2_0_1() { return cToArgumentIDTerminalRuleCall_2_0_1; }
	}

	public class MitigatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mitigates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromArgumentCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromArgumentIDTerminalRuleCall_0_0_1 = (RuleCall)cFromArgumentCrossReference_0_0.eContents().get(1);
		private final Keyword cMitigatedByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToArgumentCrossReference_2_0 = (CrossReference)cToAssignment_2.eContents().get(0);
		private final RuleCall cToArgumentIDTerminalRuleCall_2_0_1 = (RuleCall)cToArgumentCrossReference_2_0.eContents().get(1);
		
		//Mitigates:
		//	from=[Argument] "mitigated by" to=[Argument];
		public ParserRule getRule() { return rule; }

		//from=[Argument] "mitigated by" to=[Argument]
		public Group getGroup() { return cGroup; }

		//from=[Argument]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//[Argument]
		public CrossReference getFromArgumentCrossReference_0_0() { return cFromArgumentCrossReference_0_0; }

		//ID
		public RuleCall getFromArgumentIDTerminalRuleCall_0_0_1() { return cFromArgumentIDTerminalRuleCall_0_0_1; }

		//"mitigated by"
		public Keyword getMitigatedByKeyword_1() { return cMitigatedByKeyword_1; }

		//to=[Argument]
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//[Argument]
		public CrossReference getToArgumentCrossReference_2_0() { return cToArgumentCrossReference_2_0; }

		//ID
		public RuleCall getToArgumentIDTerminalRuleCall_2_0_1() { return cToArgumentIDTerminalRuleCall_2_0_1; }
	}
	
	
	private ArgumentDiagramElements pArgumentDiagram;
	private NodeElements pNode;
	private ArgumentElements pArgument;
	private FactElements pFact;
	private LinkElements pLink;
	private RebutsElements pRebuts;
	private MitigatesElements pMitigates;
	private TerminalRule tINT;
	private TerminalRule tBOOLEAN;
	private TerminalRule tID;
	private TerminalRule tQUALIFIED_NAME;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArgumentGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ArgumentDiagram:
	//	("argument:" name=ID)? ("for" highlight=[Node])? (nodes+=Node | links+=Link)*;
	public ArgumentDiagramElements getArgumentDiagramAccess() {
		return (pArgumentDiagram != null) ? pArgumentDiagram : (pArgumentDiagram = new ArgumentDiagramElements());
	}
	
	public ParserRule getArgumentDiagramRule() {
		return getArgumentDiagramAccess().getRule();
	}

	//Node:
	//	Argument | Fact;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//Argument:
	//	name=ID "A" ":"? description=STRING? ("{" ("round" round=STRING)? ("supported by" (","? grounds+=Fact)*)?
	//	("warranted by" (","? warrants+=Argument)*)? "}")?;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	/// *
	//Fact: (name=ID "G"
	//	((":")? description=STRING expr=Expression ('replacing' origin=[Node])? )?);
	// * /Fact:
	//	name=ID "G" (":"? description=STRING expr=STRING ("replacing" origin=[Node])?)?;
	public FactElements getFactAccess() {
		return (pFact != null) ? pFact : (pFact = new FactElements());
	}
	
	public ParserRule getFactRule() {
		return getFactAccess().getRule();
	}

	/// *
	//Expression:
	//	assign=AssignmentOp;
	//		
	//AssignmentOp returns Expression:
	//	OrExp (({AssignPlus.left=current} aop='->' | {AssignMin.left=current} aop='<->') right=OrExp)?;
	//
	//OrExp returns Expression:
	//	AndExp ({Or.left=current} or_op='|' right=AndExp)*;
	//
	//AndExp returns Expression:
	//	Relational ({And.left=current} and_op='&' right=Relational)*;
	//
	//Relational returns Expression:
	//	Addition (({RelNotEq.left=current} rel_op='!=' | {RelEqEq.left=current} rel_op='==' 
	//	| {RelLtEq.left=current} rel_op='>=' | {RelGtEq.left=current} rel_op='<=' 
	//	| {RelEq.left=current} rel_op='=' | {RelLt.left=current} rel_op='<' 
	//	| {RelGt.left=current} rel_op='>') right=Addition)?;
	//
	//Addition returns Expression:
	//	Multiplication (({Plus.left=current} add_op='+' | {Minus.left=current} add_op='-') right=Multiplication)*;
	//
	//Multiplication returns Expression:
	//	Power (({Multi.left=current} mul_op='*' | {Div.left=current} mul_op='/') right=Power)*;
	//
	//Power returns Expression:
	//	UnaryExpr (({Pow.left=current} pow_op='^') right=UnaryExpr)*;
	//
	//UnaryExpr returns Expression:
	//	(uop?=UnaryOp)? right=PrePrimaryExpr;
	//
	//enum UnaryOp:
	//	NOT='!';
	//
	//PrePrimaryExpr returns Expression:
	//	TerminalExpression | '(' Expression ')' | '-' n=INT;
	//
	//TerminalExpression:
	//	  {IntLiteral} value=INT 
	//	| {StringLiteral} value=STRING 
	//	| {BooleanLiteral} value=BOOLEAN 
	//	| {Node} value=[Node];
	// * /Link:
	//	Rebuts | Mitigates;
	public LinkElements getLinkAccess() {
		return (pLink != null) ? pLink : (pLink = new LinkElements());
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//Rebuts:
	//	from=[Argument] "rebutted by" to=[Argument];
	public RebutsElements getRebutsAccess() {
		return (pRebuts != null) ? pRebuts : (pRebuts = new RebutsElements());
	}
	
	public ParserRule getRebutsRule() {
		return getRebutsAccess().getRule();
	}

	//Mitigates:
	//	from=[Argument] "mitigated by" to=[Argument];
	public MitigatesElements getMitigatesAccess() {
		return (pMitigates != null) ? pMitigates : (pMitigates = new MitigatesElements());
	}
	
	public ParserRule getMitigatesRule() {
		return getMitigatesAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0" | "1".."9" "0".."9"*;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal ID:
	//	"#" !"#"+ "#" | "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal QUALIFIED_NAME:
	//	ID ("." ID)*;
	public TerminalRule getQUALIFIED_NAMERule() {
		return (tQUALIFIED_NAME != null) ? tQUALIFIED_NAME : (tQUALIFIED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUALIFIED_NAME"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
