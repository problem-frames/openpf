/*
* generated by Xtext
*/

package uk.ac.open.argument.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ArgumentGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cGivenGroundsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cGroundsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cGroundsStatementParserRuleCall_0_1_0 = (RuleCall)cGroundsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWarrantedByKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cWarrantsAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cWarrantsStatementParserRuleCall_1_1_0_0 = (RuleCall)cWarrantsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cWarrantsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cWarrantsArgumentParserRuleCall_1_1_1_1_0 = (RuleCall)cWarrantsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		private final Keyword cThusClaimKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStrAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStrSTRINGTerminalRuleCall_5_0 = (RuleCall)cStrAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRebuttedByKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRebuttsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRebuttsStatementParserRuleCall_6_1_0 = (RuleCall)cRebuttsAssignment_6_1.eContents().get(0);
		
		//Argument:
		//	("given grounds" grounds+=Statement+)? ("warranted by" (warrants+=Statement | "(" warrants+=Argument ")")+)?
		//	"thus claim" name=ID ":" str=STRING ("rebutted by" rebutts+=Statement+)?;
		public ParserRule getRule() { return rule; }

		//("given grounds" grounds+=Statement+)? ("warranted by" (warrants+=Statement | "(" warrants+=Argument ")")+)?
		//"thus claim" name=ID ":" str=STRING ("rebutted by" rebutts+=Statement+)?
		public Group getGroup() { return cGroup; }

		//("given grounds" grounds+=Statement+)?
		public Group getGroup_0() { return cGroup_0; }

		//"given grounds"
		public Keyword getGivenGroundsKeyword_0_0() { return cGivenGroundsKeyword_0_0; }

		//grounds+=Statement+
		public Assignment getGroundsAssignment_0_1() { return cGroundsAssignment_0_1; }

		//Statement
		public RuleCall getGroundsStatementParserRuleCall_0_1_0() { return cGroundsStatementParserRuleCall_0_1_0; }

		//("warranted by" (warrants+=Statement | "(" warrants+=Argument ")")+)?
		public Group getGroup_1() { return cGroup_1; }

		//"warranted by"
		public Keyword getWarrantedByKeyword_1_0() { return cWarrantedByKeyword_1_0; }

		//(warrants+=Statement | "(" warrants+=Argument ")")+
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//warrants+=Statement
		public Assignment getWarrantsAssignment_1_1_0() { return cWarrantsAssignment_1_1_0; }

		//Statement
		public RuleCall getWarrantsStatementParserRuleCall_1_1_0_0() { return cWarrantsStatementParserRuleCall_1_1_0_0; }

		//"(" warrants+=Argument ")"
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1_0() { return cLeftParenthesisKeyword_1_1_1_0; }

		//warrants+=Argument
		public Assignment getWarrantsAssignment_1_1_1_1() { return cWarrantsAssignment_1_1_1_1; }

		//Argument
		public RuleCall getWarrantsArgumentParserRuleCall_1_1_1_1_0() { return cWarrantsArgumentParserRuleCall_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_1_2() { return cRightParenthesisKeyword_1_1_1_2; }

		//"thus claim"
		public Keyword getThusClaimKeyword_2() { return cThusClaimKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//str=STRING
		public Assignment getStrAssignment_5() { return cStrAssignment_5; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_5_0() { return cStrSTRINGTerminalRuleCall_5_0; }

		//("rebutted by" rebutts+=Statement+)?
		public Group getGroup_6() { return cGroup_6; }

		//"rebutted by"
		public Keyword getRebuttedByKeyword_6_0() { return cRebuttedByKeyword_6_0; }

		//rebutts+=Statement+
		public Assignment getRebuttsAssignment_6_1() { return cRebuttsAssignment_6_1; }

		//Statement
		public RuleCall getRebuttsStatementParserRuleCall_6_1_0() { return cRebuttsStatementParserRuleCall_6_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStrSTRINGTerminalRuleCall_2_0 = (RuleCall)cStrAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRebuttedByKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRebuttsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRebuttsStatementParserRuleCall_3_1_0 = (RuleCall)cRebuttsAssignment_3_1.eContents().get(0);
		
		//Statement:
		//	name=ID ":" str=STRING ("rebutted by" rebutts+=Statement+)?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" str=STRING ("rebutted by" rebutts+=Statement+)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//str=STRING
		public Assignment getStrAssignment_2() { return cStrAssignment_2; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_2_0() { return cStrSTRINGTerminalRuleCall_2_0; }

		//("rebutted by" rebutts+=Statement+)?
		public Group getGroup_3() { return cGroup_3; }

		//"rebutted by"
		public Keyword getRebuttedByKeyword_3_0() { return cRebuttedByKeyword_3_0; }

		//rebutts+=Statement+
		public Assignment getRebuttsAssignment_3_1() { return cRebuttsAssignment_3_1; }

		//Statement
		public RuleCall getRebuttsStatementParserRuleCall_3_1_0() { return cRebuttsStatementParserRuleCall_3_1_0; }
	}
	
	
	private ArgumentElements pArgument;
	private StatementElements pStatement;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArgumentGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Argument:
	//	("given grounds" grounds+=Statement+)? ("warranted by" (warrants+=Statement | "(" warrants+=Argument ")")+)?
	//	"thus claim" name=ID ":" str=STRING ("rebutted by" rebutts+=Statement+)?;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//Statement:
	//	name=ID ":" str=STRING ("rebutted by" rebutts+=Statement+)?;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
