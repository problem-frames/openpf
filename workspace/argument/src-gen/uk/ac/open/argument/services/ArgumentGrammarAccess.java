/*
* generated by Xtext
*/

package uk.ac.open.argument.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ArgumentGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ArgumentDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cArgumentKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNodesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNodesArgumentParserRuleCall_1_0_0 = (RuleCall)cNodesAssignment_1_0.eContents().get(0);
		private final Assignment cLinksAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLinksLinkParserRuleCall_1_1_0 = (RuleCall)cLinksAssignment_1_1.eContents().get(0);
		
		//ArgumentDiagram:
		//	("argument:" name=ID)? (nodes+=Argument | links+=Link)*;
		public ParserRule getRule() { return rule; }

		//("argument:" name=ID)? (nodes+=Argument | links+=Link)*
		public Group getGroup() { return cGroup; }

		//("argument:" name=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//"argument:"
		public Keyword getArgumentKeyword_0_0() { return cArgumentKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//(nodes+=Argument | links+=Link)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//nodes+=Argument
		public Assignment getNodesAssignment_1_0() { return cNodesAssignment_1_0; }

		//Argument
		public RuleCall getNodesArgumentParserRuleCall_1_0_0() { return cNodesArgumentParserRuleCall_1_0_0; }

		//links+=Link
		public Assignment getLinksAssignment_1_1() { return cLinksAssignment_1_1; }

		//Link
		public RuleCall getLinksLinkParserRuleCall_1_1_0() { return cLinksLinkParserRuleCall_1_1_0; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRoundKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRoundAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRoundINTTerminalRuleCall_3_1_0 = (RuleCall)cRoundAssignment_3_1.eContents().get(0);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprSTRINGTerminalRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReplacingKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOriginAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cOriginArgumentCrossReference_5_1_0 = (CrossReference)cOriginAssignment_5_1.eContents().get(0);
		private final RuleCall cOriginArgumentIDTerminalRuleCall_5_1_0_1 = (RuleCall)cOriginArgumentCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cForegroundKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cForegroundAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cForegroundSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cForegroundAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cBackgroundKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBackgroundAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBackgroundSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cBackgroundAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cShapeKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cShapeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cShapeSTRINGTerminalRuleCall_8_1_0 = (RuleCall)cShapeAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cImageKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cImageAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cImageSTRINGTerminalRuleCall_9_1_0 = (RuleCall)cImageAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Keyword cSupportedByKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Group cGroup_10_1_1 = (Group)cGroup_10_1.eContents().get(1);
		private final Keyword cCommaKeyword_10_1_1_0 = (Keyword)cGroup_10_1_1.eContents().get(0);
		private final Assignment cGroundsAssignment_10_1_1_1 = (Assignment)cGroup_10_1_1.eContents().get(1);
		private final RuleCall cGroundsArgumentParserRuleCall_10_1_1_1_0 = (RuleCall)cGroundsAssignment_10_1_1_1.eContents().get(0);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Keyword cWarrantedByKeyword_10_2_0 = (Keyword)cGroup_10_2.eContents().get(0);
		private final Group cGroup_10_2_1 = (Group)cGroup_10_2.eContents().get(1);
		private final Keyword cCommaKeyword_10_2_1_0 = (Keyword)cGroup_10_2_1.eContents().get(0);
		private final Assignment cWarrantsAssignment_10_2_1_1 = (Assignment)cGroup_10_2_1.eContents().get(1);
		private final RuleCall cWarrantsArgumentParserRuleCall_10_2_1_1_0 = (RuleCall)cWarrantsAssignment_10_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		
		//Argument:
		//	name=ID ":"? // unique identifier
		//	description= // non-empty description
		//	STRING ("round" round=INT)? // default is 0
		//	expr=STRING? // default is the same as the name
		//	("replacing" origin=[Argument])? // default is null
		//	("foreground" foreground=STRING)? // default is 'black'
		//	("background" background=STRING)? // default is 'white'
		//	("shape" shape=STRING)? // default is rectangle 
		//	("image" image=STRING)? // default is null 
		//	// sub-arguments
		//	("{" ("supported by" (","? grounds+=Argument)*)? ("warranted by" (","? warrants+=Argument)*)? "}")?;
		public ParserRule getRule() { return rule; }

		//name=ID ":"? // unique identifier
		//description= // non-empty description
		//STRING ("round" round=INT)? // default is 0
		//expr=STRING? // default is the same as the name
		//("replacing" origin=[Argument])? // default is null
		//("foreground" foreground=STRING)? // default is 'black'
		//("background" background=STRING)? // default is 'white'
		//("shape" shape=STRING)? // default is rectangle 
		//("image" image=STRING)? // default is null 
		//// sub-arguments
		//("{" ("supported by" (","? grounds+=Argument)*)? ("warranted by" (","? warrants+=Argument)*)? "}")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"?
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//description= // non-empty description
		//STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//// non-empty description
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//("round" round=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"round"
		public Keyword getRoundKeyword_3_0() { return cRoundKeyword_3_0; }

		//round=INT
		public Assignment getRoundAssignment_3_1() { return cRoundAssignment_3_1; }

		//INT
		public RuleCall getRoundINTTerminalRuleCall_3_1_0() { return cRoundINTTerminalRuleCall_3_1_0; }

		//expr=STRING?
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//STRING
		public RuleCall getExprSTRINGTerminalRuleCall_4_0() { return cExprSTRINGTerminalRuleCall_4_0; }

		//("replacing" origin=[Argument])?
		public Group getGroup_5() { return cGroup_5; }

		//"replacing"
		public Keyword getReplacingKeyword_5_0() { return cReplacingKeyword_5_0; }

		//origin=[Argument]
		public Assignment getOriginAssignment_5_1() { return cOriginAssignment_5_1; }

		//[Argument]
		public CrossReference getOriginArgumentCrossReference_5_1_0() { return cOriginArgumentCrossReference_5_1_0; }

		//ID
		public RuleCall getOriginArgumentIDTerminalRuleCall_5_1_0_1() { return cOriginArgumentIDTerminalRuleCall_5_1_0_1; }

		//("foreground" foreground=STRING)?
		public Group getGroup_6() { return cGroup_6; }

		//"foreground"
		public Keyword getForegroundKeyword_6_0() { return cForegroundKeyword_6_0; }

		//foreground=STRING
		public Assignment getForegroundAssignment_6_1() { return cForegroundAssignment_6_1; }

		//STRING
		public RuleCall getForegroundSTRINGTerminalRuleCall_6_1_0() { return cForegroundSTRINGTerminalRuleCall_6_1_0; }

		//("background" background=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//"background"
		public Keyword getBackgroundKeyword_7_0() { return cBackgroundKeyword_7_0; }

		//background=STRING
		public Assignment getBackgroundAssignment_7_1() { return cBackgroundAssignment_7_1; }

		//STRING
		public RuleCall getBackgroundSTRINGTerminalRuleCall_7_1_0() { return cBackgroundSTRINGTerminalRuleCall_7_1_0; }

		//("shape" shape=STRING)?
		public Group getGroup_8() { return cGroup_8; }

		//"shape"
		public Keyword getShapeKeyword_8_0() { return cShapeKeyword_8_0; }

		//shape=STRING
		public Assignment getShapeAssignment_8_1() { return cShapeAssignment_8_1; }

		//STRING
		public RuleCall getShapeSTRINGTerminalRuleCall_8_1_0() { return cShapeSTRINGTerminalRuleCall_8_1_0; }

		//("image" image=STRING)?
		public Group getGroup_9() { return cGroup_9; }

		//"image"
		public Keyword getImageKeyword_9_0() { return cImageKeyword_9_0; }

		//image=STRING
		public Assignment getImageAssignment_9_1() { return cImageAssignment_9_1; }

		//STRING
		public RuleCall getImageSTRINGTerminalRuleCall_9_1_0() { return cImageSTRINGTerminalRuleCall_9_1_0; }

		//// sub-arguments
		//("{" ("supported by" (","? grounds+=Argument)*)? ("warranted by" (","? warrants+=Argument)*)? "}")?
		public Group getGroup_10() { return cGroup_10; }

		//// sub-arguments
		//"{"
		public Keyword getLeftCurlyBracketKeyword_10_0() { return cLeftCurlyBracketKeyword_10_0; }

		//("supported by" (","? grounds+=Argument)*)?
		public Group getGroup_10_1() { return cGroup_10_1; }

		//"supported by"
		public Keyword getSupportedByKeyword_10_1_0() { return cSupportedByKeyword_10_1_0; }

		//(","? grounds+=Argument)*
		public Group getGroup_10_1_1() { return cGroup_10_1_1; }

		//","?
		public Keyword getCommaKeyword_10_1_1_0() { return cCommaKeyword_10_1_1_0; }

		//grounds+=Argument
		public Assignment getGroundsAssignment_10_1_1_1() { return cGroundsAssignment_10_1_1_1; }

		//Argument
		public RuleCall getGroundsArgumentParserRuleCall_10_1_1_1_0() { return cGroundsArgumentParserRuleCall_10_1_1_1_0; }

		//("warranted by" (","? warrants+=Argument)*)?
		public Group getGroup_10_2() { return cGroup_10_2; }

		//"warranted by"
		public Keyword getWarrantedByKeyword_10_2_0() { return cWarrantedByKeyword_10_2_0; }

		//(","? warrants+=Argument)*
		public Group getGroup_10_2_1() { return cGroup_10_2_1; }

		//","?
		public Keyword getCommaKeyword_10_2_1_0() { return cCommaKeyword_10_2_1_0; }

		//warrants+=Argument
		public Assignment getWarrantsAssignment_10_2_1_1() { return cWarrantsAssignment_10_2_1_1; }

		//Argument
		public RuleCall getWarrantsArgumentParserRuleCall_10_2_1_1_0() { return cWarrantsArgumentParserRuleCall_10_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10_3() { return cRightCurlyBracketKeyword_10_3; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRebutsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMitigatesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		//// The expression syntax, currently just replaced by a string.
		//Expression:
		//	assign=AssignmentOp;
		//		
		//AssignmentOp returns Expression:
		//	OrExp (({AssignPlus.left=current} aop='->' | {AssignMin.left=current} aop='<->') right=OrExp)?;
		//
		//OrExp returns Expression:
		//	AndExp ({Or.left=current} or_op='|' right=AndExp)*;
		//
		//AndExp returns Expression:
		//	Relational ({And.left=current} and_op='&' right=Relational)*;
		//
		//Relational returns Expression:
		//	Addition (({RelNotEq.left=current} rel_op='!=' | {RelEqEq.left=current} rel_op='==' 
		//	| {RelLtEq.left=current} rel_op='>=' | {RelGtEq.left=current} rel_op='<=' 
		//	| {RelEq.left=current} rel_op='=' | {RelLt.left=current} rel_op='<' 
		//	| {RelGt.left=current} rel_op='>') right=Addition)?;
		//
		//Addition returns Expression:
		//	Multiplication (({Plus.left=current} add_op='+' | {Minus.left=current} add_op='-') right=Multiplication)*;
		//
		//Multiplication returns Expression:
		//	Power (({Multi.left=current} mul_op='*' | {Div.left=current} mul_op='/') right=Power)*;
		//
		//Power returns Expression:
		//	UnaryExpr (({Pow.left=current} pow_op='^') right=UnaryExpr)*;
		//
		//UnaryExpr returns Expression:
		//	(uop?=UnaryOp)? right=PrePrimaryExpr;
		//
		//enum UnaryOp:
		//	NOT='!';
		//
		//PrePrimaryExpr returns Expression:
		//	TerminalExpression | '(' Expression ')' | '-' n=INT;
		//
		//TerminalExpression:
		//	  {IntLiteral} value=INT 
		//	| {StringLiteral} value=STRING 
		//	| {BooleanLiteral} value=BOOLEAN 
		//	| {Argument} value=[Argument];
		// * // *
		//These relationships can be derived
		// * /Link:
		//	Rebuts | Mitigates;
		public ParserRule getRule() { return rule; }

		//Rebuts | Mitigates
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rebuts
		public RuleCall getRebutsParserRuleCall_0() { return cRebutsParserRuleCall_0; }

		//Mitigates
		public RuleCall getMitigatesParserRuleCall_1() { return cMitigatesParserRuleCall_1; }
	}

	public class RebutsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rebuts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromArgumentCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromArgumentIDTerminalRuleCall_0_0_1 = (RuleCall)cFromArgumentCrossReference_0_0.eContents().get(1);
		private final Keyword cRebuttedByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToArgumentCrossReference_2_0 = (CrossReference)cToAssignment_2.eContents().get(0);
		private final RuleCall cToArgumentIDTerminalRuleCall_2_0_1 = (RuleCall)cToArgumentCrossReference_2_0.eContents().get(1);
		
		//Rebuts:
		//	from=[Argument] "rebutted by" to=[Argument];
		public ParserRule getRule() { return rule; }

		//from=[Argument] "rebutted by" to=[Argument]
		public Group getGroup() { return cGroup; }

		//from=[Argument]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//[Argument]
		public CrossReference getFromArgumentCrossReference_0_0() { return cFromArgumentCrossReference_0_0; }

		//ID
		public RuleCall getFromArgumentIDTerminalRuleCall_0_0_1() { return cFromArgumentIDTerminalRuleCall_0_0_1; }

		//"rebutted by"
		public Keyword getRebuttedByKeyword_1() { return cRebuttedByKeyword_1; }

		//to=[Argument]
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//[Argument]
		public CrossReference getToArgumentCrossReference_2_0() { return cToArgumentCrossReference_2_0; }

		//ID
		public RuleCall getToArgumentIDTerminalRuleCall_2_0_1() { return cToArgumentIDTerminalRuleCall_2_0_1; }
	}

	public class MitigatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mitigates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Assignment cRebuttalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRebuttalArgumentCrossReference_2_0 = (CrossReference)cRebuttalAssignment_2.eContents().get(0);
		private final RuleCall cRebuttalArgumentIDTerminalRuleCall_2_0_1 = (RuleCall)cRebuttalArgumentCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFromArgumentCrossReference_4_0 = (CrossReference)cFromAssignment_4.eContents().get(0);
		private final RuleCall cFromArgumentIDTerminalRuleCall_4_0_1 = (RuleCall)cFromArgumentCrossReference_4_0.eContents().get(1);
		private final Keyword cMitigatedByKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cToArgumentCrossReference_6_0 = (CrossReference)cToAssignment_6.eContents().get(0);
		private final RuleCall cToArgumentIDTerminalRuleCall_6_0_1 = (RuleCall)cToArgumentCrossReference_6_0.eContents().get(1);
		
		//Mitigates:
		//	"for" label=STRING rebuttal=[Argument] ":" from=[Argument] "mitigated by" to=[Argument];
		public ParserRule getRule() { return rule; }

		//"for" label=STRING rebuttal=[Argument] ":" from=[Argument] "mitigated by" to=[Argument]
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//label=STRING
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_0() { return cLabelSTRINGTerminalRuleCall_1_0; }

		//rebuttal=[Argument]
		public Assignment getRebuttalAssignment_2() { return cRebuttalAssignment_2; }

		//[Argument]
		public CrossReference getRebuttalArgumentCrossReference_2_0() { return cRebuttalArgumentCrossReference_2_0; }

		//ID
		public RuleCall getRebuttalArgumentIDTerminalRuleCall_2_0_1() { return cRebuttalArgumentIDTerminalRuleCall_2_0_1; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//from=[Argument]
		public Assignment getFromAssignment_4() { return cFromAssignment_4; }

		//[Argument]
		public CrossReference getFromArgumentCrossReference_4_0() { return cFromArgumentCrossReference_4_0; }

		//ID
		public RuleCall getFromArgumentIDTerminalRuleCall_4_0_1() { return cFromArgumentIDTerminalRuleCall_4_0_1; }

		//"mitigated by"
		public Keyword getMitigatedByKeyword_5() { return cMitigatedByKeyword_5; }

		//to=[Argument]
		public Assignment getToAssignment_6() { return cToAssignment_6; }

		//[Argument]
		public CrossReference getToArgumentCrossReference_6_0() { return cToArgumentCrossReference_6_0; }

		//ID
		public RuleCall getToArgumentIDTerminalRuleCall_6_0_1() { return cToArgumentIDTerminalRuleCall_6_0_1; }
	}
	
	
	private ArgumentDiagramElements pArgumentDiagram;
	private ArgumentElements pArgument;
	private LinkElements pLink;
	private RebutsElements pRebuts;
	private MitigatesElements pMitigates;
	private TerminalRule tINT;
	private TerminalRule tBOOLEAN;
	private TerminalRule tID;
	private TerminalRule tQUALIFIED_NAME;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArgumentGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ArgumentDiagram:
	//	("argument:" name=ID)? (nodes+=Argument | links+=Link)*;
	public ArgumentDiagramElements getArgumentDiagramAccess() {
		return (pArgumentDiagram != null) ? pArgumentDiagram : (pArgumentDiagram = new ArgumentDiagramElements());
	}
	
	public ParserRule getArgumentDiagramRule() {
		return getArgumentDiagramAccess().getRule();
	}

	//Argument:
	//	name=ID ":"? // unique identifier
	//	description= // non-empty description
	//	STRING ("round" round=INT)? // default is 0
	//	expr=STRING? // default is the same as the name
	//	("replacing" origin=[Argument])? // default is null
	//	("foreground" foreground=STRING)? // default is 'black'
	//	("background" background=STRING)? // default is 'white'
	//	("shape" shape=STRING)? // default is rectangle 
	//	("image" image=STRING)? // default is null 
	//	// sub-arguments
	//	("{" ("supported by" (","? grounds+=Argument)*)? ("warranted by" (","? warrants+=Argument)*)? "}")?;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	/// *
	//// The expression syntax, currently just replaced by a string.
	//Expression:
	//	assign=AssignmentOp;
	//		
	//AssignmentOp returns Expression:
	//	OrExp (({AssignPlus.left=current} aop='->' | {AssignMin.left=current} aop='<->') right=OrExp)?;
	//
	//OrExp returns Expression:
	//	AndExp ({Or.left=current} or_op='|' right=AndExp)*;
	//
	//AndExp returns Expression:
	//	Relational ({And.left=current} and_op='&' right=Relational)*;
	//
	//Relational returns Expression:
	//	Addition (({RelNotEq.left=current} rel_op='!=' | {RelEqEq.left=current} rel_op='==' 
	//	| {RelLtEq.left=current} rel_op='>=' | {RelGtEq.left=current} rel_op='<=' 
	//	| {RelEq.left=current} rel_op='=' | {RelLt.left=current} rel_op='<' 
	//	| {RelGt.left=current} rel_op='>') right=Addition)?;
	//
	//Addition returns Expression:
	//	Multiplication (({Plus.left=current} add_op='+' | {Minus.left=current} add_op='-') right=Multiplication)*;
	//
	//Multiplication returns Expression:
	//	Power (({Multi.left=current} mul_op='*' | {Div.left=current} mul_op='/') right=Power)*;
	//
	//Power returns Expression:
	//	UnaryExpr (({Pow.left=current} pow_op='^') right=UnaryExpr)*;
	//
	//UnaryExpr returns Expression:
	//	(uop?=UnaryOp)? right=PrePrimaryExpr;
	//
	//enum UnaryOp:
	//	NOT='!';
	//
	//PrePrimaryExpr returns Expression:
	//	TerminalExpression | '(' Expression ')' | '-' n=INT;
	//
	//TerminalExpression:
	//	  {IntLiteral} value=INT 
	//	| {StringLiteral} value=STRING 
	//	| {BooleanLiteral} value=BOOLEAN 
	//	| {Argument} value=[Argument];
	// * // *
	//These relationships can be derived
	// * /Link:
	//	Rebuts | Mitigates;
	public LinkElements getLinkAccess() {
		return (pLink != null) ? pLink : (pLink = new LinkElements());
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//Rebuts:
	//	from=[Argument] "rebutted by" to=[Argument];
	public RebutsElements getRebutsAccess() {
		return (pRebuts != null) ? pRebuts : (pRebuts = new RebutsElements());
	}
	
	public ParserRule getRebutsRule() {
		return getRebutsAccess().getRule();
	}

	//Mitigates:
	//	"for" label=STRING rebuttal=[Argument] ":" from=[Argument] "mitigated by" to=[Argument];
	public MitigatesElements getMitigatesAccess() {
		return (pMitigates != null) ? pMitigates : (pMitigates = new MitigatesElements());
	}
	
	public ParserRule getMitigatesRule() {
		return getMitigatesAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0" | "1".."9" "0".."9"*;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal ID:
	//	"#" !"#"+ "#" | "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal QUALIFIED_NAME:
	//	ID ("." ID)*;
	public TerminalRule getQUALIFIED_NAMERule() {
		return (tQUALIFIED_NAME != null) ? tQUALIFIED_NAME : (tQUALIFIED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUALIFIED_NAME"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
