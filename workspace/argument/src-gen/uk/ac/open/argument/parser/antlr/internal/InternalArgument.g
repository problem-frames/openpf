/*
* generated by Xtext
*/
grammar InternalArgument;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package uk.ac.open.argument.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.open.argument.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import uk.ac.open.argument.services.ArgumentGrammarAccess;

}

@parser::members {

 	private ArgumentGrammarAccess grammarAccess;
 	
    public InternalArgumentParser(TokenStream input, IAstFactory factory, ArgumentGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("uk/ac/open/argument/parser/antlr/internal/InternalArgument.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Arg";	
   	}
   	
   	@Override
   	protected ArgumentGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleArg
entryRuleArg returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArgRule(), currentNode); }
	 iv_ruleArg=ruleArg 
	 { $current=$iv_ruleArg.current; } 
	 EOF 
;

// Rule Arg
ruleArg returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'given' 
    {
        createLeafNode(grammarAccess.getArgAccess().getGivenKeyword_0(), null); 
    }
	'grounds' 
    {
        createLeafNode(grammarAccess.getArgAccess().getGroundsKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArgAccess().getGroundstatementsGStatementParserRuleCall_2_0(), currentNode); 
	    }
		lv_groundstatements_2_0=rulegStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groundstatements",
	        		lv_groundstatements_2_0, 
	        		"gStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+	'warranted' 
    {
        createLeafNode(grammarAccess.getArgAccess().getWarrantedKeyword_3(), null); 
    }
	'by' 
    {
        createLeafNode(grammarAccess.getArgAccess().getByKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArgAccess().getGroundstatementsGStatementParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_groundstatements_5_0=rulegStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groundstatements",
	        		lv_groundstatements_5_0, 
	        		"gStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
    |(	'(' 
    {
        createLeafNode(grammarAccess.getArgAccess().getLeftParenthesisKeyword_5_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArgAccess().getInnerRecArgParserRuleCall_5_1_1_0(), currentNode); 
	    }
		lv_inner_7_0=ruleRecArg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"inner",
	        		lv_inner_7_0, 
	        		"RecArg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getArgAccess().getRightParenthesisKeyword_5_1_2(), null); 
    }
))	'thus' 
    {
        createLeafNode(grammarAccess.getArgAccess().getThusKeyword_6(), null); 
    }
	'claim' 
    {
        createLeafNode(grammarAccess.getArgAccess().getClaimKeyword_7(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArgAccess().getGroundstatementsGStatementParserRuleCall_8_0(), currentNode); 
	    }
		lv_groundstatements_11_0=rulegStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groundstatements",
	        		lv_groundstatements_11_0, 
	        		"gStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+(	'rebutted' 
    {
        createLeafNode(grammarAccess.getArgAccess().getRebuttedKeyword_9_0(), null); 
    }
	'by' 
    {
        createLeafNode(grammarAccess.getArgAccess().getByKeyword_9_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArgAccess().getGroundstatementsGStatementParserRuleCall_9_2_0(), currentNode); 
	    }
		lv_groundstatements_14_0=rulegStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groundstatements",
	        		lv_groundstatements_14_0, 
	        		"gStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)?	'.' 
    {
        createLeafNode(grammarAccess.getArgAccess().getFullStopKeyword_10(), null); 
    }
)
;





// Entry rule entryRulegStatement
entryRulegStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGStatementRule(), currentNode); }
	 iv_rulegStatement=rulegStatement 
	 { $current=$iv_rulegStatement.current; } 
	 EOF 
;

// Rule gStatement
rulegStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getGStatementAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getGStatementAccess().getColonKeyword_1(), null); 
    }
(
(
		lv_groundstr_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getGStatementAccess().getGroundstrSTRINGTerminalRuleCall_2_0(), "groundstr"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"groundstr",
	        		lv_groundstr_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleRecArg
entryRuleRecArg returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRecArgRule(), currentNode); }
	 iv_ruleRecArg=ruleRecArg 
	 { $current=$iv_ruleRecArg.current; } 
	 EOF 
;

// Rule RecArg
ruleRecArg returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'given' 
    {
        createLeafNode(grammarAccess.getRecArgAccess().getGivenKeyword_0(), null); 
    }
	'grounds' 
    {
        createLeafNode(grammarAccess.getRecArgAccess().getGroundsKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRecArgAccess().getGroundstatementsGStatementParserRuleCall_2_0(), currentNode); 
	    }
		lv_groundstatements_2_0=rulegStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecArgRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groundstatements",
	        		lv_groundstatements_2_0, 
	        		"gStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+	'warranted' 
    {
        createLeafNode(grammarAccess.getRecArgAccess().getWarrantedKeyword_3(), null); 
    }
	'by' 
    {
        createLeafNode(grammarAccess.getRecArgAccess().getByKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRecArgAccess().getGroundstatementsGStatementParserRuleCall_5_0(), currentNode); 
	    }
		lv_groundstatements_5_0=rulegStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecArgRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groundstatements",
	        		lv_groundstatements_5_0, 
	        		"gStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+	'thus' 
    {
        createLeafNode(grammarAccess.getRecArgAccess().getThusKeyword_6(), null); 
    }
	'claim' 
    {
        createLeafNode(grammarAccess.getRecArgAccess().getClaimKeyword_7(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRecArgAccess().getGroundstatementsGStatementParserRuleCall_8_0(), currentNode); 
	    }
		lv_groundstatements_8_0=rulegStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecArgRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groundstatements",
	        		lv_groundstatements_8_0, 
	        		"gStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


