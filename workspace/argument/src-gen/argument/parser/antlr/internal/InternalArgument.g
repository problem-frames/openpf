/*
 * generated by Xtext
 */
grammar InternalArgument;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package argument.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package argument.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import argument.services.ArgumentGrammarAccess;

}

@parser::members {

 	private ArgumentGrammarAccess grammarAccess;
 	
    public InternalArgumentParser(TokenStream input, ArgumentGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ArgumentDiagram";	
   	}
   	
   	@Override
   	protected ArgumentGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleArgumentDiagram
entryRuleArgumentDiagram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentDiagramRule()); }
	 iv_ruleArgumentDiagram=ruleArgumentDiagram 
	 { $current=$iv_ruleArgumentDiagram.current; } 
	 EOF 
;

// Rule ArgumentDiagram
ruleArgumentDiagram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='argument:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArgumentDiagramAccess().getArgumentKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getArgumentDiagramAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentDiagramRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"argument.Argument.ID");
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentDiagramAccess().getNodesArgumentParserRuleCall_1_0_0()); 
	    }
		lv_nodes_2_0=ruleArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentDiagramRule());
	        }
       		add(
       			$current, 
       			"nodes",
        		lv_nodes_2_0, 
        		"argument.Argument.Argument");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentDiagramAccess().getLinksLinkParserRuleCall_1_1_0()); 
	    }
		lv_links_3_0=ruleLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentDiagramRule());
	        }
       		add(
       			$current, 
       			"links",
        		lv_links_3_0, 
        		"argument.Argument.Link");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLink
entryRuleLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkRule()); }
	 iv_ruleLink=ruleLink 
	 { $current=$iv_ruleLink.current; } 
	 EOF 
;

// Rule Link
ruleLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLinkAccess().getRebutsParserRuleCall_0()); 
    }
    this_Rebuts_0=ruleRebuts
    { 
        $current = $this_Rebuts_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLinkAccess().getMitigatesParserRuleCall_1()); 
    }
    this_Mitigates_1=ruleMitigates
    { 
        $current = $this_Mitigates_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRebuts
entryRuleRebuts returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRebutsRule()); }
	 iv_ruleRebuts=ruleRebuts 
	 { $current=$iv_ruleRebuts.current; } 
	 EOF 
;

// Rule Rebuts
ruleRebuts returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRebutsRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getRebutsAccess().getFromArgumentCrossReference_0_0()); 
	}

)
)	otherlv_1='rebutted by' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRebutsAccess().getRebuttedByKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRebutsRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRebutsAccess().getToArgumentCrossReference_2_0()); 
	}

)
)	otherlv_3='on' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRebutsAccess().getOnKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRebutsRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getRebutsAccess().getDeniesArgumentCrossReference_4_0()); 
	}

)
)(
(
		lv_generated_5_0=	'@generated' 
    {
        newLeafNode(lv_generated_5_0, grammarAccess.getRebutsAccess().getGeneratedGeneratedKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRebutsRule());
	        }
       		setWithLastConsumed($current, "generated", true, "@generated");
	    }

)
)?)
;





// Entry rule entryRuleMitigates
entryRuleMitigates returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMitigatesRule()); }
	 iv_ruleMitigates=ruleMitigates 
	 { $current=$iv_ruleMitigates.current; } 
	 EOF 
;

// Rule Mitigates
ruleMitigates returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMitigatesRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getMitigatesAccess().getFromArgumentCrossReference_0_0()); 
	}

)
)	otherlv_1='mitigated by' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMitigatesAccess().getMitigatedByKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMitigatesRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getMitigatesAccess().getToArgumentCrossReference_2_0()); 
	}

)
)	otherlv_3='on' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMitigatesAccess().getOnKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMitigatesRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getMitigatesAccess().getRestoresArgumentCrossReference_4_0()); 
	}

)
)(
(
		lv_generated_5_0=	'@generated' 
    {
        newLeafNode(lv_generated_5_0, grammarAccess.getMitigatesAccess().getGeneratedGeneratedKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMitigatesRule());
	        }
       		setWithLastConsumed($current, "generated", true, "@generated");
	    }

)
)?)
;





// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	 iv_ruleArgument=ruleArgument 
	 { $current=$iv_ruleArgument.current; } 
	 EOF 
;

// Rule Argument
ruleArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"argument.Argument.ID");
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentAccess().getColonKeyword_1());
    }
)?(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getArgumentAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)(	otherlv_3='round' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArgumentAccess().getRoundKeyword_3_0());
    }
(
(
		lv_round_4_0=RULE_INT
		{
			newLeafNode(lv_round_4_0, grammarAccess.getArgumentAccess().getRoundINTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"round",
        		lv_round_4_0, 
        		"argument.Argument.INT");
	    }

)
))?(	otherlv_5='replacing' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArgumentAccess().getReplacingKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getArgumentAccess().getReplacesArgumentCrossReference_4_1_0()); 
	}

)
))?(	otherlv_7='with' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getArgumentAccess().getWithKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getExprExpressionParserRuleCall_5_1_0()); 
	    }
		lv_expr_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_8_0, 
        		"argument.Argument.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_9='foreground' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getArgumentAccess().getForegroundKeyword_6_0());
    }
(
(
		lv_foreground_10_0=RULE_STRING
		{
			newLeafNode(lv_foreground_10_0, grammarAccess.getArgumentAccess().getForegroundSTRINGTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"foreground",
        		lv_foreground_10_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?(	otherlv_11='background' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getArgumentAccess().getBackgroundKeyword_7_0());
    }
(
(
		lv_background_12_0=RULE_STRING
		{
			newLeafNode(lv_background_12_0, grammarAccess.getArgumentAccess().getBackgroundSTRINGTerminalRuleCall_7_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"background",
        		lv_background_12_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?(	otherlv_13='shape' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getArgumentAccess().getShapeKeyword_8_0());
    }
(
(
		lv_shape_14_0=RULE_STRING
		{
			newLeafNode(lv_shape_14_0, grammarAccess.getArgumentAccess().getShapeSTRINGTerminalRuleCall_8_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"shape",
        		lv_shape_14_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?(	otherlv_15='image' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getArgumentAccess().getImageKeyword_9_0());
    }
(
(
		lv_image_16_0=RULE_STRING
		{
			newLeafNode(lv_image_16_0, grammarAccess.getArgumentAccess().getImageSTRINGTerminalRuleCall_9_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"image",
        		lv_image_16_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?(	otherlv_17='{' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getArgumentAccess().getLeftCurlyBracketKeyword_10_0());
    }
(	otherlv_18='supported by' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getArgumentAccess().getSupportedByKeyword_10_1_0());
    }
((	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getArgumentAccess().getCommaKeyword_10_1_1_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getGroundsArgumentParserRuleCall_10_1_1_1_0()); 
	    }
		lv_grounds_20_0=ruleArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		add(
       			$current, 
       			"grounds",
        		lv_grounds_20_0, 
        		"argument.Argument.Argument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_21='warranted by' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getArgumentAccess().getWarrantedByKeyword_10_2_0());
    }
((	otherlv_22=',' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getArgumentAccess().getCommaKeyword_10_2_1_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getWarrantsArgumentParserRuleCall_10_2_1_1_0()); 
	    }
		lv_warrants_23_0=ruleArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		add(
       			$current, 
       			"warrants",
        		lv_warrants_23_0, 
        		"argument.Argument.Argument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_24='}' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getArgumentAccess().getRightCurlyBracketKeyword_10_3());
    }
)?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAssignAssignmentOpParserRuleCall_0()); 
	    }
		lv_assign_0_0=ruleAssignmentOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"assign",
        		lv_assign_0_0, 
        		"argument.Argument.AssignmentOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAssignmentOp
entryRuleAssignmentOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentOpRule()); }
	 iv_ruleAssignmentOp=ruleAssignmentOp 
	 { $current=$iv_ruleAssignmentOp.current; } 
	 EOF 
;

// Rule AssignmentOp
ruleAssignmentOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignmentOpAccess().getOrExpParserRuleCall_0()); 
    }
    this_OrExp_0=ruleOrExp
    { 
        $current = $this_OrExp_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentOpAccess().getAssignPlusLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_aop_2_0=	'->' 
    {
        newLeafNode(lv_aop_2_0, grammarAccess.getAssignmentOpAccess().getAopHyphenMinusGreaterThanSignKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentOpRule());
	        }
       		setWithLastConsumed($current, "aop", lv_aop_2_0, "->");
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentOpAccess().getAssignMinLeftAction_1_0_1_0(),
            $current);
    }
)(
(
		lv_aop_4_0=	'<->' 
    {
        newLeafNode(lv_aop_4_0, grammarAccess.getAssignmentOpAccess().getAopLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentOpRule());
	        }
       		setWithLastConsumed($current, "aop", lv_aop_4_0, "<->");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentOpAccess().getRightOrExpParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleOrExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentOpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"argument.Argument.OrExp");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExp
entryRuleOrExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpRule()); }
	 iv_ruleOrExp=ruleOrExp 
	 { $current=$iv_ruleOrExp.current; } 
	 EOF 
;

// Rule OrExp
ruleOrExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpAccess().getAndExpParserRuleCall_0()); 
    }
    this_AndExp_0=ruleAndExp
    { 
        $current = $this_AndExp_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpAccess().getOrLeftAction_1_0(),
            $current);
    }
)(
(
		lv_or_op_2_0=	'|' 
    {
        newLeafNode(lv_or_op_2_0, grammarAccess.getOrExpAccess().getOr_opVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExpRule());
	        }
       		setWithLastConsumed($current, "or_op", lv_or_op_2_0, "|");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpAccess().getRightAndExpParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"argument.Argument.AndExp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExp
entryRuleAndExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpRule()); }
	 iv_ruleAndExp=ruleAndExp 
	 { $current=$iv_ruleAndExp.current; } 
	 EOF 
;

// Rule AndExp
ruleAndExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpAccess().getRelationalParserRuleCall_0()); 
    }
    this_Relational_0=ruleRelational
    { 
        $current = $this_Relational_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpAccess().getAndLeftAction_1_0(),
            $current);
    }
)(
(
		lv_and_op_2_0=	'&' 
    {
        newLeafNode(lv_and_op_2_0, grammarAccess.getAndExpAccess().getAnd_opAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExpRule());
	        }
       		setWithLastConsumed($current, "and_op", lv_and_op_2_0, "&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpAccess().getRightRelationalParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRelational		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"argument.Argument.Relational");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelational
entryRuleRelational returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalRule()); }
	 iv_ruleRelational=ruleRelational 
	 { $current=$iv_ruleRelational.current; } 
	 EOF 
;

// Rule Relational
ruleRelational returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalAccess().getAdditionParserRuleCall_0()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelNotEqLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_rel_op_2_0=	'!=' 
    {
        newLeafNode(lv_rel_op_2_0, grammarAccess.getRelationalAccess().getRel_opExclamationMarkEqualsSignKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalRule());
	        }
       		setWithLastConsumed($current, "rel_op", lv_rel_op_2_0, "!=");
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelEqEqLeftAction_1_0_1_0(),
            $current);
    }
)(
(
		lv_rel_op_4_0=	'==' 
    {
        newLeafNode(lv_rel_op_4_0, grammarAccess.getRelationalAccess().getRel_opEqualsSignEqualsSignKeyword_1_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalRule());
	        }
       		setWithLastConsumed($current, "rel_op", lv_rel_op_4_0, "==");
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelLtEqLeftAction_1_0_2_0(),
            $current);
    }
)(
(
		lv_rel_op_6_0=	'>=' 
    {
        newLeafNode(lv_rel_op_6_0, grammarAccess.getRelationalAccess().getRel_opGreaterThanSignEqualsSignKeyword_1_0_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalRule());
	        }
       		setWithLastConsumed($current, "rel_op", lv_rel_op_6_0, ">=");
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelGtEqLeftAction_1_0_3_0(),
            $current);
    }
)(
(
		lv_rel_op_8_0=	'<=' 
    {
        newLeafNode(lv_rel_op_8_0, grammarAccess.getRelationalAccess().getRel_opLessThanSignEqualsSignKeyword_1_0_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalRule());
	        }
       		setWithLastConsumed($current, "rel_op", lv_rel_op_8_0, "<=");
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelEqLeftAction_1_0_4_0(),
            $current);
    }
)(
(
		lv_rel_op_10_0=	'=' 
    {
        newLeafNode(lv_rel_op_10_0, grammarAccess.getRelationalAccess().getRel_opEqualsSignKeyword_1_0_4_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalRule());
	        }
       		setWithLastConsumed($current, "rel_op", lv_rel_op_10_0, "=");
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelLtLeftAction_1_0_5_0(),
            $current);
    }
)(
(
		lv_rel_op_12_0=	'<' 
    {
        newLeafNode(lv_rel_op_12_0, grammarAccess.getRelationalAccess().getRel_opLessThanSignKeyword_1_0_5_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalRule());
	        }
       		setWithLastConsumed($current, "rel_op", lv_rel_op_12_0, "<");
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelGtLeftAction_1_0_6_0(),
            $current);
    }
)(
(
		lv_rel_op_14_0=	'>' 
    {
        newLeafNode(lv_rel_op_14_0, grammarAccess.getRelationalAccess().getRel_opGreaterThanSignKeyword_1_0_6_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalRule());
	        }
       		setWithLastConsumed($current, "rel_op", lv_rel_op_14_0, ">");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalAccess().getRightAdditionParserRuleCall_1_1_0()); 
	    }
		lv_right_15_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_15_0, 
        		"argument.Argument.Addition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_add_op_2_0=	'+' 
    {
        newLeafNode(lv_add_op_2_0, grammarAccess.getAdditionAccess().getAdd_opPlusSignKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditionRule());
	        }
       		setWithLastConsumed($current, "add_op", lv_add_op_2_0, "+");
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(),
            $current);
    }
)(
(
		lv_add_op_4_0=	'-' 
    {
        newLeafNode(lv_add_op_4_0, grammarAccess.getAdditionAccess().getAdd_opHyphenMinusKeyword_1_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditionRule());
	        }
       		setWithLastConsumed($current, "add_op", lv_add_op_4_0, "-");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"argument.Argument.Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getPowerParserRuleCall_0()); 
    }
    this_Power_0=rulePower
    { 
        $current = $this_Power_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_mul_op_2_0=	'*' 
    {
        newLeafNode(lv_mul_op_2_0, grammarAccess.getMultiplicationAccess().getMul_opAsteriskKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "mul_op", lv_mul_op_2_0, "*");
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0(),
            $current);
    }
)(
(
		lv_mul_op_4_0=	'/' 
    {
        newLeafNode(lv_mul_op_4_0, grammarAccess.getMultiplicationAccess().getMul_opSolidusKeyword_1_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "mul_op", lv_mul_op_4_0, "/");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPowerParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=rulePower		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"argument.Argument.Power");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePower
entryRulePower returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowerRule()); }
	 iv_rulePower=rulePower 
	 { $current=$iv_rulePower.current; } 
	 EOF 
;

// Rule Power
rulePower returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPowerAccess().getUnaryExprParserRuleCall_0()); 
    }
    this_UnaryExpr_0=ruleUnaryExpr
    { 
        $current = $this_UnaryExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPowerAccess().getPowLeftAction_1_0_0(),
            $current);
    }
)(
(
		lv_pow_op_2_0=	'^' 
    {
        newLeafNode(lv_pow_op_2_0, grammarAccess.getPowerAccess().getPow_opCircumflexAccentKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPowerRule());
	        }
       		setWithLastConsumed($current, "pow_op", lv_pow_op_2_0, "^");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getRightUnaryExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleUnaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"argument.Argument.UnaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	 iv_ruleUnaryExpr=ruleUnaryExpr 
	 { $current=$iv_ruleUnaryExpr.current; } 
	 EOF 
;

// Rule UnaryExpr
ruleUnaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprAccess().getUopUnaryOpEnumRuleCall_0_0()); 
	    }
		lv_uop_0_0=ruleUnaryOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprRule());
	        }
       		set(
       			$current, 
       			"uop",
        		lv_uop_0_0, 
        		"argument.Argument.UnaryOp");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprAccess().getRightPrePrimaryExprParserRuleCall_1_0()); 
	    }
		lv_right_1_0=rulePrePrimaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"argument.Argument.PrePrimaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrePrimaryExpr
entryRulePrePrimaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrePrimaryExprRule()); }
	 iv_rulePrePrimaryExpr=rulePrePrimaryExpr 
	 { $current=$iv_rulePrePrimaryExpr.current; } 
	 EOF 
;

// Rule PrePrimaryExpr
rulePrePrimaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrePrimaryExprAccess().getTerminalExpressionParserRuleCall_0()); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrePrimaryExprAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrePrimaryExprAccess().getExpressionParserRuleCall_1_1()); 
    }
    this_Expression_2=ruleExpression
    { 
        $current = $this_Expression_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrePrimaryExprAccess().getRightParenthesisKeyword_1_2());
    }
)
    |(	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrePrimaryExprAccess().getHyphenMinusKeyword_2_0());
    }
(
(
		lv_n_5_0=RULE_INT
		{
			newLeafNode(lv_n_5_0, grammarAccess.getPrePrimaryExprAccess().getNINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrePrimaryExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"n",
        		lv_n_5_0, 
        		"argument.Argument.INT");
	    }

)
)))
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getIntLiteralAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"argument.Argument.INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getBooleanLiteralAction_1_0(),
            $current);
    }
)(
(
		lv_value_3_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_3_0, grammarAccess.getTerminalExpressionAccess().getValueBOOLEANTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"argument.Argument.BOOLEAN");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getArgumentAction_2_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getTerminalExpressionAccess().getValueArgumentCrossReference_2_1_0()); 
	}

)
)))
;





// Rule UnaryOp
ruleUnaryOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='?' 
	{
        $current = grammarAccess.getUnaryOpAccess().getDEFAULTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOpAccess().getDEFAULTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!' 
	{
        $current = grammarAccess.getUnaryOpAccess().getNOTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryOpAccess().getNOTEnumLiteralDeclaration_1()); 
    }
));



RULE_INT : ('0'|'1'..'9' ('0'..'9')*);

RULE_BOOLEAN : ('true'|'false');

RULE_ID : ('#' ~('#')+ '#'|'^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*);

RULE_QUALIFIED_NAME : RULE_ID ('.' RULE_ID)*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


