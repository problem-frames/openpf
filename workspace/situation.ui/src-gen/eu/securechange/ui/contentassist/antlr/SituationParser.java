/*
* generated by Xtext
*/
package eu.securechange.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import eu.securechange.services.SituationGrammarAccess;

public class SituationParser extends AbstractContentAssistParser {
	
	@Inject
	private SituationGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected eu.securechange.ui.contentassist.antlr.internal.InternalSituationParser createParser() {
		eu.securechange.ui.contentassist.antlr.internal.InternalSituationParser result = new eu.securechange.ui.contentassist.antlr.internal.InternalSituationParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getThingAccess().getAlternatives(), "rule__Thing__Alternatives");
					put(grammarAccess.getEntityTypeAccess().getAlternatives(), "rule__EntityType__Alternatives");
					put(grammarAccess.getDomainTypeAccess().getAlternatives(), "rule__DomainType__Alternatives");
					put(grammarAccess.getRelationshipTypeAccess().getAlternatives(), "rule__RelationshipType__Alternatives");
					put(grammarAccess.getSituationAccess().getGroup(), "rule__Situation__Group__0");
					put(grammarAccess.getSituationAccess().getGroup_0(), "rule__Situation__Group_0__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getRelationshipAccess().getGroup(), "rule__Relationship__Group__0");
					put(grammarAccess.getDomainAccess().getGroup(), "rule__Domain__Group__0");
					put(grammarAccess.getDomainAccess().getGroup_3(), "rule__Domain__Group_3__0");
					put(grammarAccess.getSituationAccess().getTimeAssignment_0_1(), "rule__Situation__TimeAssignment_0_1");
					put(grammarAccess.getSituationAccess().getThingsAssignment_1(), "rule__Situation__ThingsAssignment_1");
					put(grammarAccess.getEntityAccess().getTypeAssignment_0(), "rule__Entity__TypeAssignment_0");
					put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
					put(grammarAccess.getRelationshipAccess().getTypeAssignment_0(), "rule__Relationship__TypeAssignment_0");
					put(grammarAccess.getRelationshipAccess().getSourceAssignment_2(), "rule__Relationship__SourceAssignment_2");
					put(grammarAccess.getRelationshipAccess().getTargetAssignment_4(), "rule__Relationship__TargetAssignment_4");
					put(grammarAccess.getDomainAccess().getNameAssignment_0(), "rule__Domain__NameAssignment_0");
					put(grammarAccess.getDomainAccess().getTypeAssignment_1(), "rule__Domain__TypeAssignment_1");
					put(grammarAccess.getDomainAccess().getPropertiesAssignment_2(), "rule__Domain__PropertiesAssignment_2");
					put(grammarAccess.getDomainAccess().getPropertiesAssignment_3_1(), "rule__Domain__PropertiesAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			eu.securechange.ui.contentassist.antlr.internal.InternalSituationParser typedParser = (eu.securechange.ui.contentassist.antlr.internal.InternalSituationParser) parser;
			typedParser.entryRuleSituation();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SituationGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SituationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
