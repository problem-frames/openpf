namespace secmer.sistar;
import nemf.packages.secmertool.troposAspect;

machine transform 
{
	pattern modelMappingTropos(Situation, TroposDiagram) = {
		nemf.packages.secmertool.SecMERIntegrationModel(SecMERIntegrationModel);	 	
		nemf.packages.secmertool.SecMERIntegrationModel.TroposModel(TM, SecMERIntegrationModel, TroposDiagram);
		find secmer.sistar.wrap.model(TroposDiagram);
		find secmer.ontology.situationModel(SecMERIntegrationModel, Situation);
	}
	
	pattern troposReferenceModel(TroposReferenceModel) = {
		nemf.packages.secmertool.troposAspect.TroposReferenceModel(TroposReferenceModel);
	}
	
	// ACTOR
	
	pattern actorMappingToTropos(Actor, Link) = {
		find secmer.ontology.actor(Actor);
		TroposActorLink.secmer(LS, Link, Actor);
		TroposActorLink(Link);
	}
	pattern actorMappingToTroposWithName(Actor, Link, Name) = {
		find actorMappingToTropos(Actor, Link);
		find secmer.ontology.actorName(Actor, Name);
		find secmer.core.linkName(Link, Name);
	}
	pattern actorMappingFromTropos(Link, TroposActor) = {
		TroposActorLink(Link);
		TroposActorLink.tropos(LT, Link, TroposActor);
		find secmer.sistar.wrap.actor(TroposActor);
	}
	pattern actorMappingFromTroposWithName(Link, TroposActor, Name) = {
		find actorMappingFromTropos(Link, TroposActor);
		find secmer.sistar.wrap.actorName(TroposActor, Name);
		find secmer.core.linkName(Link, Name);
	}
	pattern actorMappingTropos(Actor, Link, TroposActor) = {
		find actorMappingToTropos(Actor, Link);
		find actorMappingFromTropos(Link, TroposActor);
	} 
	
	// GUARD
	pattern actorNewToTropos(Actor) = {
		find secmer.ontology.actor(Actor);
		neg find actorMappingToTropos(Actor, Link);
	}
	// GUARD
	pattern actorNewFromTropos(TroposActor) = {
		find secmer.sistar.wrap.actor(TroposActor);
		neg find actorMappingFromTropos(Link, TroposActor);
	}
	// GUARD
	pattern actorDelFromTropos(Actor, Link) = {
		find actorMappingToTropos(Actor, Link);
		neg find actorMappingFromTropos(Link, TroposActor);
	}
	// GUARD
	pattern actorDelToTropos(Link, TroposActor) = {
		find actorMappingFromTropos(Link, TroposActor);
		neg find actorMappingToTropos(Actor, Link);
	}
	// GUARD
	pattern actorNameToTropos(Actor, Link, TroposActor, Name) = {
		find actorMappingTropos(Actor, Link, TroposActor);
		neg find actorMappingToTroposWithName(Actor, Link, Name);
		find actorMappingFromTroposWithName(Link, TroposActor, Name);
	}
	// GUARD
	pattern actorNameFromTropos(Actor, Link, TroposActor, Name) = {
		find actorMappingTropos(Actor, Link, TroposActor);
		find actorMappingToTroposWithName(Actor, Link, Name);
		neg find actorMappingFromTroposWithName(Link, TroposActor, Name);
	}



}
