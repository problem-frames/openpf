/*******************************************************************************
 * EMF Specific pattern signature of the secmer.core.linkName pattern
 * Generated by EMF-IncQuery
 *******************************************************************************/

package signatures.secmer.core;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.viatra2.compiled.emf.runtime.api.IPatternSignature;

/**
 * Domain specific Data transfer Object of the secmer.core.linkName pattern.
 * Class fields correspond to parameters of the pattern. Fields with value null are considered unassigned.
 * Each instance is a partial substitution of pattern parameters, 
 * usable e.g. to represent a match of the pattern.
 */
public class LinkNameSignature implements IPatternSignature {

	//constructor
	public LinkNameSignature(Object ReferenceLink, Object Name) {
		this.ReferenceLink = ReferenceLink;
		this.Name = Name;	
	}

	//private attributes
	private Object ReferenceLink;	private Object Name;
	
	//getter methods
	public Object getReferenceLink(){
		 return ReferenceLink;
	}

	public Object getName(){
		 return Name;
	}
	
	//setter methods
	public void setReferenceLink(Object ReferenceLink){
		 this.ReferenceLink=ReferenceLink;
	}
	public void setName(Object Name){
		 this.Name=Name;
	}

	//overridden hashCode() and equals() with Tuple-semantics
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		LinkNameSignature other = (LinkNameSignature) obj;
		if (ReferenceLink == null) {if (other.ReferenceLink != null) return false;}
		else if (!ReferenceLink.equals(other.ReferenceLink)) return false;
		if (Name == null) {if (other.Name != null) return false;}
		else if (!Name.equals(other.Name)) return false;
		return true;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((ReferenceLink == null) ? 0 : ReferenceLink.hashCode());
		result = prime * result + ((Name == null) ? 0 : Name.hashCode());
		return result;
	}

	@Override
	public String toString(){
		EStructuralFeature feature = null;
		String _temp = " A(n) linkName signature object ("+hashCode()+")\n";
		// Checks that ReferenceLink has a name attribute and uses if it has 
		_temp += "\tReferenceLink = ";
		feature = null;
		if(ReferenceLink instanceof EObject)
			feature = ((EObject)ReferenceLink).eClass().getEStructuralFeature("name");

		if(feature != null && ((EObject)ReferenceLink).eGet(feature) != null) _temp += ((EObject)ReferenceLink).eGet(feature).toString();
		else _temp += ReferenceLink.toString();
		_temp += "\n";

		// Checks that Name has a name attribute and uses if it has 
		_temp += "\tName = ";
		feature = null;
		if(Name instanceof EObject)
			feature = ((EObject)Name).eClass().getEStructuralFeature("name");

		if(feature != null && ((EObject)Name).eGet(feature) != null) _temp += ((EObject)Name).eGet(feature).toString();
		else _temp += Name.toString();
		_temp += "\n";

		return _temp;
	}

	@Override
	public Object[] toArray() {
		return new Object[] {ReferenceLink, Name};
	}
}
