/*******************************************************************************
 * EMF Specific pattern signature of the secmer.ontology.fulfill pattern
 * Generated by EMF-IncQuery
 *******************************************************************************/

package signatures.secmer.ontology;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.viatra2.compiled.emf.runtime.api.IPatternSignature;

/**
 * Domain specific Data transfer Object of the secmer.ontology.fulfill pattern.
 * Class fields correspond to parameters of the pattern. Fields with value null are considered unassigned.
 * Each instance is a partial substitution of pattern parameters, 
 * usable e.g. to represent a match of the pattern.
 */
public class FulfillSignature implements IPatternSignature {

	//constructor
	public FulfillSignature(Object Process, Object Proposition) {
		this.Process = Process;
		this.Proposition = Proposition;	
	}

	//private attributes
	private Object Process;	private Object Proposition;
	
	//getter methods
	public Object getProcess(){
		 return Process;
	}

	public Object getProposition(){
		 return Proposition;
	}
	
	//setter methods
	public void setProcess(Object Process){
		 this.Process=Process;
	}
	public void setProposition(Object Proposition){
		 this.Proposition=Proposition;
	}

	//overridden hashCode() and equals() with Tuple-semantics
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		FulfillSignature other = (FulfillSignature) obj;
		if (Process == null) {if (other.Process != null) return false;}
		else if (!Process.equals(other.Process)) return false;
		if (Proposition == null) {if (other.Proposition != null) return false;}
		else if (!Proposition.equals(other.Proposition)) return false;
		return true;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((Process == null) ? 0 : Process.hashCode());
		result = prime * result + ((Proposition == null) ? 0 : Proposition.hashCode());
		return result;
	}

	@Override
	public String toString(){
		EStructuralFeature feature = null;
		String _temp = " A(n) fulfill signature object ("+hashCode()+")\n";
		// Checks that Process has a name attribute and uses if it has 
		_temp += "\tProcess = ";
		feature = null;
		if(Process instanceof EObject)
			feature = ((EObject)Process).eClass().getEStructuralFeature("name");

		if(feature != null && ((EObject)Process).eGet(feature) != null) _temp += ((EObject)Process).eGet(feature).toString();
		else _temp += Process.toString();
		_temp += "\n";

		// Checks that Proposition has a name attribute and uses if it has 
		_temp += "\tProposition = ";
		feature = null;
		if(Proposition instanceof EObject)
			feature = ((EObject)Proposition).eClass().getEStructuralFeature("name");

		if(feature != null && ((EObject)Proposition).eGet(feature) != null) _temp += ((EObject)Proposition).eGet(feature).toString();
		else _temp += Proposition.toString();
		_temp += "\n";

		return _temp;
	}

	@Override
	public Object[] toArray() {
		return new Object[] {Process, Proposition};
	}
}
