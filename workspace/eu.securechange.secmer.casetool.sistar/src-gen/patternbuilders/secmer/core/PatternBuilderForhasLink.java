/*******************************************************************************
 * Pattern builder for pattern secmer.core.hasLink
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.core;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.core.hasLink
 */
public class PatternBuilderForhasLink implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.core.hasLink".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.core.hasLink");
		
		final Address<? extends Receiver> var_1044 = buildable.patternCollector("secmer.core.hasLink");
		final Stub<Address<? extends Supplier>> var_1045 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_1046 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/secmer/tool").getEClassifier("ReferenceModel"))).getEStructuralFeature("links");
		final Stub<Address<? extends Supplier>> var_1047 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ReferenceModel", "ReferenceLink"}), var_1046);
		final TupleMask var_1048 = new TupleMask(new int[] {}, 0);
		final TupleMask var_1049 = new TupleMask(new int[] {}, 2);
		final TupleMask var_1050 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_1051 = buildable.buildBetaNode(var_1045, var_1047, var_1048, var_1049, var_1050, false);
		final Stub<Address<? extends Supplier>> var_1052 = buildable.buildInjectivityChecker(var_1051, 1, new int[] {0});
		final TupleMask var_1053 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_1054 = buildable.buildTrimmer(var_1052, var_1053);
		buildable.buildConnection(var_1054, var_1044);
		return var_1044;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.core.hasLink".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("ReferenceModel", 0);
			posMapping.put("ReferenceLink", 1);

		}
		return posMapping;
	}
}
