/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.dependency
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.dependency
 */
public class PatternBuilderFordependency implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.dependency".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.dependency");
		
		final Address<? extends Receiver> var_846 = buildable.patternCollector("secmer.ontology.dependency");
		final Stub<Address<? extends Supplier>> var_847 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_848 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Delegates"))).getEStructuralFeature("source");
		final Stub<Address<? extends Supplier>> var_849 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Delegates", "Act1"}), var_848);
		final TupleMask var_850 = new TupleMask(new int[] {}, 0);
		final TupleMask var_851 = new TupleMask(new int[] {}, 2);
		final TupleMask var_852 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_853 = buildable.buildBetaNode(var_847, var_849, var_850, var_851, var_852, false);
		final Stub<Address<? extends Supplier>> var_854 = buildable.buildInjectivityChecker(var_853, 1, new int[] {0});
		final Object var_855 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Delegates"))).getEStructuralFeature("target");
		final Stub<Address<? extends Supplier>> var_856 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Delegates", "Act2"}), var_855);
		final TupleMask var_857 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_858 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_859 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_860 = buildable.buildBetaNode(var_854, var_856, var_857, var_858, var_859, false);
		final Stub<Address<? extends Supplier>> var_861 = buildable.buildInjectivityChecker(var_860, 2, new int[] {0, 1});
		final Object var_862 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Delegates"))).getEStructuralFeature("type");
		final Stub<Address<? extends Supplier>> var_863 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Delegates", "DependencyType"}), var_862);
		final TupleMask var_864 = new TupleMask(new int[] {0}, 3);
		final TupleMask var_865 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_866 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_867 = buildable.buildBetaNode(var_861, var_863, var_864, var_865, var_866, false);
		final Stub<Address<? extends Supplier>> var_868 = buildable.buildInjectivityChecker(var_867, 3, new int[] {0, 1, 2});
		final Object var_869 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Delegates"))).getEStructuralFeature("entity");
		final Stub<Address<? extends Supplier>> var_870 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Delegates", "Dependum"}), var_869);
		final TupleMask var_871 = new TupleMask(new int[] {0}, 4);
		final TupleMask var_872 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_873 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_874 = buildable.buildBetaNode(var_868, var_870, var_871, var_872, var_873, false);
		final Stub<Address<? extends Supplier>> var_875 = buildable.buildInjectivityChecker(var_874, 4, new int[] {0, 1, 2, 3});
		final TupleMask var_876 = new TupleMask(new int[] {1, 2, 3, 4}, 5);
		final Stub<Address<? extends Supplier>> var_877 = buildable.buildTrimmer(var_875, var_876);
		buildable.buildConnection(var_877, var_846);
		return var_846;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.dependency".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Act1", 0);
			posMapping.put("Act2", 1);
			posMapping.put("DependencyType", 2);
			posMapping.put("Dependum", 3);

		}
		return posMapping;
	}
}
