/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.actorWantsGoalDirect
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.actorWantsGoalDirect
 */
public class PatternBuilderForactorWantsGoalDirect implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.actorWantsGoalDirect".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.actorWantsGoalDirect");
		
		final Address<? extends Receiver> var_278 = buildable.patternCollector("secmer.ontology.actorWantsGoalDirect");
		final Stub<Address<? extends Supplier>> var_279 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_280 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Wants"))).getEStructuralFeature("source");
		final Stub<Address<? extends Supplier>> var_281 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Wants", "Actor"}), var_280);
		final TupleMask var_282 = new TupleMask(new int[] {}, 0);
		final TupleMask var_283 = new TupleMask(new int[] {}, 2);
		final TupleMask var_284 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_285 = buildable.buildBetaNode(var_279, var_281, var_282, var_283, var_284, false);
		final Stub<Address<? extends Supplier>> var_286 = buildable.buildInjectivityChecker(var_285, 1, new int[] {0});
		final Object var_287 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Wants"))).getEStructuralFeature("target");
		final Stub<Address<? extends Supplier>> var_288 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Wants", "Goal"}), var_287);
		final TupleMask var_289 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_290 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_291 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_292 = buildable.buildBetaNode(var_286, var_288, var_289, var_290, var_291, false);
		final Stub<Address<? extends Supplier>> var_293 = buildable.buildInjectivityChecker(var_292, 2, new int[] {0, 1});
		final TupleMask var_294 = new TupleMask(new int[] {1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_295 = buildable.buildTrimmer(var_293, var_294);
		buildable.buildConnection(var_295, var_278);
		return var_278;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.actorWantsGoalDirect".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Goal", 1);

		}
		return posMapping;
	}
}
