/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.carryOut
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.carryOut
 */
public class PatternBuilderForcarryOut implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.carryOut".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.carryOut");
		
		final Address<? extends Receiver> var_902 = buildable.patternCollector("secmer.ontology.carryOut");
		final Stub<Address<? extends Supplier>> var_903 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_904 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Process"}), "secmer.ontology.carryOutDirect");
		final TupleMask var_905 = new TupleMask(new int[] {}, 0);
		final TupleMask var_906 = new TupleMask(new int[] {}, 2);
		final TupleMask var_907 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_908 = buildable.buildBetaNode(var_903, var_904, var_905, var_906, var_907, false);
		final TupleMask var_909 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_910 = buildable.buildTrimmer(var_908, var_909);
		buildable.buildConnection(var_910, var_902);
		final Stub<Address<? extends Supplier>> var_911 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_912 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "SuperProcess"}), "secmer.ontology.carryOut");
		final TupleMask var_913 = new TupleMask(new int[] {}, 0);
		final TupleMask var_914 = new TupleMask(new int[] {}, 2);
		final TupleMask var_915 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_916 = buildable.buildBetaNode(var_911, var_912, var_913, var_914, var_915, false);
		final Stub<Address<? extends Supplier>> var_917 = buildable.patternCallStub(new FlatTuple(new Object[] {"SuperProcess", "Process"}), "secmer.ontology.decomposeDirect");
		final TupleMask var_918 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_919 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_920 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_921 = buildable.buildBetaNode(var_916, var_917, var_918, var_919, var_920, false);
		final Stub<Address<? extends Supplier>> var_922 = buildable.buildInjectivityChecker(var_921, 2, new int[] {0});
		final TupleMask var_923 = new TupleMask(new int[] {0, 2}, 3);
		final Stub<Address<? extends Supplier>> var_924 = buildable.buildTrimmer(var_922, var_923);
		buildable.buildConnection(var_924, var_902);
		return var_902;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.carryOut".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Process", 1);

		}
		return posMapping;
	}
}
