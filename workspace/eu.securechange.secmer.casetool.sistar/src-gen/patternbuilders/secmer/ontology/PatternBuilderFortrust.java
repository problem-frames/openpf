/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.trust
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.trust
 */
public class PatternBuilderFortrust implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.trust".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.trust");
		
		final Address<? extends Receiver> var_619 = buildable.patternCollector("secmer.ontology.trust");
		final Stub<Address<? extends Supplier>> var_620 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_621 = buildable.patternCallStub(new FlatTuple(new Object[] {"Act1", "Act2", "Dependum"}), "secmer.ontology.trustDirect");
		final TupleMask var_622 = new TupleMask(new int[] {}, 0);
		final TupleMask var_623 = new TupleMask(new int[] {}, 3);
		final TupleMask var_624 = new TupleMask(new int[] {0, 1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_625 = buildable.buildBetaNode(var_620, var_621, var_622, var_623, var_624, false);
		final TupleMask var_626 = new TupleMask(new int[] {0, 1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_627 = buildable.buildTrimmer(var_625, var_626);
		buildable.buildConnection(var_627, var_619);
		final Stub<Address<? extends Supplier>> var_628 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_629 = buildable.patternCallStub(new FlatTuple(new Object[] {"SuperDependum", "Dependum"}), "secmer.ontology.decomposeDirect");
		final TupleMask var_630 = new TupleMask(new int[] {}, 0);
		final TupleMask var_631 = new TupleMask(new int[] {}, 2);
		final TupleMask var_632 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_633 = buildable.buildBetaNode(var_628, var_629, var_630, var_631, var_632, false);
		final Stub<Address<? extends Supplier>> var_634 = buildable.patternCallStub(new FlatTuple(new Object[] {"Act1", "Act2", "SuperDependum"}), "secmer.ontology.trust");
		final TupleMask var_635 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_636 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_637 = new TupleMask(new int[] {0, 1}, 3);
		final Stub<Address<? extends Supplier>> var_638 = buildable.buildBetaNode(var_633, var_634, var_635, var_636, var_637, false);
		final Stub<Address<? extends Supplier>> var_639 = buildable.buildInjectivityChecker(var_638, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_640 = buildable.buildInjectivityChecker(var_639, 3, new int[] {1});
		final TupleMask var_641 = new TupleMask(new int[] {2, 3, 1}, 4);
		final Stub<Address<? extends Supplier>> var_642 = buildable.buildTrimmer(var_640, var_641);
		buildable.buildConnection(var_642, var_619);
		return var_619;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.trust".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Act1", 0);
			posMapping.put("Act2", 1);
			posMapping.put("Dependum", 2);

		}
		return posMapping;
	}
}
