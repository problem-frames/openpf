/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.doDelegation
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.doDelegation
 */
public class PatternBuilderFordoDelegation implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.doDelegation".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.doDelegation");
		
		final Address<? extends Receiver> var_423 = buildable.patternCollector("secmer.ontology.doDelegation");
		final Stub<Address<? extends Supplier>> var_424 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_425 = buildable.patternCallStub(new FlatTuple(new Object[] {"Act1", "Act2", "Dependum"}), "secmer.ontology.doDelegationDirect");
		final TupleMask var_426 = new TupleMask(new int[] {}, 0);
		final TupleMask var_427 = new TupleMask(new int[] {}, 3);
		final TupleMask var_428 = new TupleMask(new int[] {0, 1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_429 = buildable.buildBetaNode(var_424, var_425, var_426, var_427, var_428, false);
		final TupleMask var_430 = new TupleMask(new int[] {0, 1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_431 = buildable.buildTrimmer(var_429, var_430);
		buildable.buildConnection(var_431, var_423);
		final Stub<Address<? extends Supplier>> var_432 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_433 = buildable.patternCallStub(new FlatTuple(new Object[] {"SuperDependum", "Dependum"}), "secmer.ontology.decomposeDirect");
		final TupleMask var_434 = new TupleMask(new int[] {}, 0);
		final TupleMask var_435 = new TupleMask(new int[] {}, 2);
		final TupleMask var_436 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_437 = buildable.buildBetaNode(var_432, var_433, var_434, var_435, var_436, false);
		final Stub<Address<? extends Supplier>> var_438 = buildable.patternCallStub(new FlatTuple(new Object[] {"Act1", "Act2", "SuperDependum"}), "secmer.ontology.doDelegation");
		final TupleMask var_439 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_440 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_441 = new TupleMask(new int[] {0, 1}, 3);
		final Stub<Address<? extends Supplier>> var_442 = buildable.buildBetaNode(var_437, var_438, var_439, var_440, var_441, false);
		final Stub<Address<? extends Supplier>> var_443 = buildable.buildInjectivityChecker(var_442, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_444 = buildable.buildInjectivityChecker(var_443, 3, new int[] {1});
		final TupleMask var_445 = new TupleMask(new int[] {2, 3, 1}, 4);
		final Stub<Address<? extends Supplier>> var_446 = buildable.buildTrimmer(var_444, var_445);
		buildable.buildConnection(var_446, var_423);
		return var_423;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.doDelegation".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Act1", 0);
			posMapping.put("Act2", 1);
			posMapping.put("Dependum", 2);

		}
		return posMapping;
	}
}
