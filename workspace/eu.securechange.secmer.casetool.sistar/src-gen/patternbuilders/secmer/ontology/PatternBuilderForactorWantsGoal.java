/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.actorWantsGoal
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.actorWantsGoal
 */
public class PatternBuilderForactorWantsGoal implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.actorWantsGoal".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.actorWantsGoal");
		
		final Address<? extends Receiver> var_9 = buildable.patternCollector("secmer.ontology.actorWantsGoal");
		final Stub<Address<? extends Supplier>> var_10 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_11 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Goal"}), "secmer.ontology.actorWantsGoalDirect");
		final TupleMask var_12 = new TupleMask(new int[] {}, 0);
		final TupleMask var_13 = new TupleMask(new int[] {}, 2);
		final TupleMask var_14 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_15 = buildable.buildBetaNode(var_10, var_11, var_12, var_13, var_14, false);
		final TupleMask var_16 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_17 = buildable.buildTrimmer(var_15, var_16);
		buildable.buildConnection(var_17, var_9);
		final Stub<Address<? extends Supplier>> var_18 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_19 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "GParent"}), "secmer.ontology.actorWantsGoal");
		final TupleMask var_20 = new TupleMask(new int[] {}, 0);
		final TupleMask var_21 = new TupleMask(new int[] {}, 2);
		final TupleMask var_22 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_23 = buildable.buildBetaNode(var_18, var_19, var_20, var_21, var_22, false);
		final Stub<Address<? extends Supplier>> var_24 = buildable.patternCallStub(new FlatTuple(new Object[] {"GParent", "Goal"}), "secmer.ontology.decomposeDirect");
		final TupleMask var_25 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_26 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_27 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_28 = buildable.buildBetaNode(var_23, var_24, var_25, var_26, var_27, false);
		final Stub<Address<? extends Supplier>> var_29 = buildable.buildInjectivityChecker(var_28, 2, new int[] {0});
		final TupleMask var_30 = new TupleMask(new int[] {0, 2}, 3);
		final Stub<Address<? extends Supplier>> var_31 = buildable.buildTrimmer(var_29, var_30);
		buildable.buildConnection(var_31, var_9);
		return var_9;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.actorWantsGoal".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Goal", 1);

		}
		return posMapping;
	}
}
