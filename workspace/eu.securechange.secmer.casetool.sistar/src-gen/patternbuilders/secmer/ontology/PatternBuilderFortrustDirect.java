/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.trustDirect
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.trustDirect
 */
public class PatternBuilderFortrustDirect implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.trustDirect".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.trustDirect");
		
		final Address<? extends Receiver> var_1055 = buildable.patternCollector("secmer.ontology.trustDirect");
		final Stub<Address<? extends Supplier>> var_1056 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_1057 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Trusts"))).getEStructuralFeature("source");
		final Stub<Address<? extends Supplier>> var_1058 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Trusts", "Act1"}), var_1057);
		final TupleMask var_1059 = new TupleMask(new int[] {}, 0);
		final TupleMask var_1060 = new TupleMask(new int[] {}, 2);
		final TupleMask var_1061 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_1062 = buildable.buildBetaNode(var_1056, var_1058, var_1059, var_1060, var_1061, false);
		final Stub<Address<? extends Supplier>> var_1063 = buildable.buildInjectivityChecker(var_1062, 1, new int[] {0});
		final Object var_1064 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Trusts"))).getEStructuralFeature("target");
		final Stub<Address<? extends Supplier>> var_1065 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Trusts", "Act2"}), var_1064);
		final TupleMask var_1066 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_1067 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_1068 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_1069 = buildable.buildBetaNode(var_1063, var_1065, var_1066, var_1067, var_1068, false);
		final Stub<Address<? extends Supplier>> var_1070 = buildable.buildInjectivityChecker(var_1069, 2, new int[] {0, 1});
		final Object var_1071 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Trusts"))).getEStructuralFeature("entity");
		final Stub<Address<? extends Supplier>> var_1072 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Trusts", "Dependum"}), var_1071);
		final TupleMask var_1073 = new TupleMask(new int[] {0}, 3);
		final TupleMask var_1074 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_1075 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_1076 = buildable.buildBetaNode(var_1070, var_1072, var_1073, var_1074, var_1075, false);
		final Stub<Address<? extends Supplier>> var_1077 = buildable.buildInjectivityChecker(var_1076, 3, new int[] {0, 1, 2});
		final TupleMask var_1078 = new TupleMask(new int[] {1, 2, 3}, 4);
		final Stub<Address<? extends Supplier>> var_1079 = buildable.buildTrimmer(var_1077, var_1078);
		buildable.buildConnection(var_1079, var_1055);
		return var_1055;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.trustDirect".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Act1", 0);
			posMapping.put("Act2", 1);
			posMapping.put("Dependum", 2);

		}
		return posMapping;
	}
}
