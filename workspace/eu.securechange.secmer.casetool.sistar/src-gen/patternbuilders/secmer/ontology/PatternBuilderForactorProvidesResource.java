/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.actorProvidesResource
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.actorProvidesResource
 */
public class PatternBuilderForactorProvidesResource implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.actorProvidesResource".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.actorProvidesResource");
		
		final Address<? extends Receiver> var_595 = buildable.patternCollector("secmer.ontology.actorProvidesResource");
		final Stub<Address<? extends Supplier>> var_596 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_597 = EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Actor");
		final Stub<Address<? extends Supplier>> var_598 = buildable.unaryTypeStub(new FlatTuple(new Object[] {"Actor"}), var_597);
		final TupleMask var_599 = new TupleMask(new int[] {}, 0);
		final TupleMask var_600 = new TupleMask(new int[] {}, 1);
		final TupleMask var_601 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_602 = buildable.buildBetaNode(var_596, var_598, var_599, var_600, var_601, false);
		final Object var_603 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Provides"))).getEStructuralFeature("source");
		final Stub<Address<? extends Supplier>> var_604 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Provides", "Actor"}), var_603);
		final TupleMask var_605 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_606 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_607 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_608 = buildable.buildBetaNode(var_602, var_604, var_605, var_606, var_607, false);
		final Stub<Address<? extends Supplier>> var_609 = buildable.buildInjectivityChecker(var_608, 1, new int[] {0});
		final Object var_610 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Provides"))).getEStructuralFeature("target");
		final Stub<Address<? extends Supplier>> var_611 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Provides", "Resource"}), var_610);
		final TupleMask var_612 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_613 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_614 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_615 = buildable.buildBetaNode(var_609, var_611, var_612, var_613, var_614, false);
		final Stub<Address<? extends Supplier>> var_616 = buildable.buildInjectivityChecker(var_615, 2, new int[] {0, 1});
		final TupleMask var_617 = new TupleMask(new int[] {0, 2}, 3);
		final Stub<Address<? extends Supplier>> var_618 = buildable.buildTrimmer(var_616, var_617);
		buildable.buildConnection(var_618, var_595);
		return var_595;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.actorProvidesResource".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Resource", 1);

		}
		return posMapping;
	}
}
