/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.wrap.carryOutDirect
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.wrap;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.wrap.carryOutDirect
 */
public class PatternBuilderForcarryOutDirect implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.wrap.carryOutDirect".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.wrap.carryOutDirect");
		
		final Address<? extends Receiver> var_353 = buildable.patternCollector("secmer.sistar.wrap.carryOutDirect");
		final Stub<Address<? extends Supplier>> var_354 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_355 = buildable.patternCallStub(new FlatTuple(new Object[] {"Action"}), "secmer.sistar.wrap.Action");
		final TupleMask var_356 = new TupleMask(new int[] {}, 0);
		final TupleMask var_357 = new TupleMask(new int[] {}, 1);
		final TupleMask var_358 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_359 = buildable.buildBetaNode(var_354, var_355, var_356, var_357, var_358, false);
		final Object var_360 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://www.troposproject.org").getEClassifier("Actor"))).getEStructuralFeature("services");
		final Stub<Address<? extends Supplier>> var_361 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Actor", "Action"}), var_360);
		final TupleMask var_362 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_363 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_364 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_365 = buildable.buildBetaNode(var_359, var_361, var_362, var_363, var_364, false);
		final Stub<Address<? extends Supplier>> var_366 = buildable.buildInjectivityChecker(var_365, 1, new int[] {0});
		final Stub<Address<? extends Supplier>> var_367 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor"}), "secmer.sistar.wrap.actor");
		final TupleMask var_368 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_369 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_370 = new TupleMask(new int[] {}, 1);
		final Stub<Address<? extends Supplier>> var_371 = buildable.buildBetaNode(var_366, var_367, var_368, var_369, var_370, false);
		final TupleMask var_372 = new TupleMask(new int[] {1, 0}, 2);
		final Stub<Address<? extends Supplier>> var_373 = buildable.buildTrimmer(var_371, var_372);
		buildable.buildConnection(var_373, var_353);
		return var_353;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.wrap.carryOutDirect".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Action", 1);

		}
		return posMapping;
	}
}
