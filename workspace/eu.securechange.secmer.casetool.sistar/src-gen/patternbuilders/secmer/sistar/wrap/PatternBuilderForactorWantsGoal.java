/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.wrap.actorWantsGoal
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.wrap;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.wrap.actorWantsGoal
 */
public class PatternBuilderForactorWantsGoal implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.wrap.actorWantsGoal".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.wrap.actorWantsGoal");
		
		final Address<? extends Receiver> var_955 = buildable.patternCollector("secmer.sistar.wrap.actorWantsGoal");
		final Stub<Address<? extends Supplier>> var_956 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_957 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Goal"}), "secmer.sistar.wrap.actorWantsGoalDirect");
		final TupleMask var_958 = new TupleMask(new int[] {}, 0);
		final TupleMask var_959 = new TupleMask(new int[] {}, 2);
		final TupleMask var_960 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_961 = buildable.buildBetaNode(var_956, var_957, var_958, var_959, var_960, false);
		final TupleMask var_962 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_963 = buildable.buildTrimmer(var_961, var_962);
		buildable.buildConnection(var_963, var_955);
		final Stub<Address<? extends Supplier>> var_964 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_965 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "GParent"}), "secmer.sistar.wrap.actorWantsGoal");
		final TupleMask var_966 = new TupleMask(new int[] {}, 0);
		final TupleMask var_967 = new TupleMask(new int[] {}, 2);
		final TupleMask var_968 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_969 = buildable.buildBetaNode(var_964, var_965, var_966, var_967, var_968, false);
		final Stub<Address<? extends Supplier>> var_970 = buildable.patternCallStub(new FlatTuple(new Object[] {"GParent", "Goal"}), "secmer.sistar.wrap.decomposeDirect");
		final TupleMask var_971 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_972 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_973 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_974 = buildable.buildBetaNode(var_969, var_970, var_971, var_972, var_973, false);
		final Stub<Address<? extends Supplier>> var_975 = buildable.buildInjectivityChecker(var_974, 2, new int[] {0});
		final TupleMask var_976 = new TupleMask(new int[] {0, 2}, 3);
		final Stub<Address<? extends Supplier>> var_977 = buildable.buildTrimmer(var_975, var_976);
		buildable.buildConnection(var_977, var_955);
		return var_955;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.wrap.actorWantsGoal".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Goal", 1);

		}
		return posMapping;
	}
}
