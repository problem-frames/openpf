/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.wrap.actorProvidesResource
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.wrap;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.wrap.actorProvidesResource
 */
public class PatternBuilderForactorProvidesResource implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.wrap.actorProvidesResource".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.wrap.actorProvidesResource");
		
		final Address<? extends Receiver> var_808 = buildable.patternCollector("secmer.sistar.wrap.actorProvidesResource");
		final Stub<Address<? extends Supplier>> var_809 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_810 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://www.troposproject.org").getEClassifier("Actor"))).getEStructuralFeature("services");
		final Stub<Address<? extends Supplier>> var_811 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Actor", "Resource"}), var_810);
		final TupleMask var_812 = new TupleMask(new int[] {}, 0);
		final TupleMask var_813 = new TupleMask(new int[] {}, 2);
		final TupleMask var_814 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_815 = buildable.buildBetaNode(var_809, var_811, var_812, var_813, var_814, false);
		final Stub<Address<? extends Supplier>> var_816 = buildable.buildInjectivityChecker(var_815, 1, new int[] {0});
		final Object var_817 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://www.troposproject.org").getEClassifier("Service"))).getEStructuralFeature("serviceType");
		final Stub<Address<? extends Supplier>> var_818 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Resource", "ResourceType"}), var_817);
		final TupleMask var_819 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_820 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_821 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_822 = buildable.buildBetaNode(var_816, var_818, var_819, var_820, var_821, false);
		final Stub<Address<? extends Supplier>> var_823 = buildable.buildInjectivityChecker(var_822, 2, new int[] {0, 1});
		final AbstractEvaluator var_824 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(2).toString(),"RESOURCE");
			}
		};
		final Stub<Address<? extends Supplier>> var_825 = buildable.buildPredicateChecker(var_824, null, new int[] {2}, var_823);
		final TupleMask var_826 = new TupleMask(new int[] {0, 1}, 3);
		final Stub<Address<? extends Supplier>> var_827 = buildable.buildTrimmer(var_825, var_826);
		buildable.buildConnection(var_827, var_808);
		return var_808;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.wrap.actorProvidesResource".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Resource", 1);

		}
		return posMapping;
	}
}
