/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.wrap.fulfill
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.wrap;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.wrap.fulfill
 */
public class PatternBuilderForfulfill implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.wrap.fulfill".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.wrap.fulfill");
		
		final Address<? extends Receiver> var_1019 = buildable.patternCollector("secmer.sistar.wrap.fulfill");
		final Stub<Address<? extends Supplier>> var_1020 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_1021 = buildable.patternCallStub(new FlatTuple(new Object[] {"Goal"}), "secmer.sistar.wrap.goal");
		final TupleMask var_1022 = new TupleMask(new int[] {}, 0);
		final TupleMask var_1023 = new TupleMask(new int[] {}, 1);
		final TupleMask var_1024 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_1025 = buildable.buildBetaNode(var_1020, var_1021, var_1022, var_1023, var_1024, false);
		final Stub<Address<? extends Supplier>> var_1026 = buildable.patternCallStub(new FlatTuple(new Object[] {"Rel", "Process", "Goal"}), "secmer.sistar.wrap.troposRelation");
		final TupleMask var_1027 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_1028 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_1029 = new TupleMask(new int[] {0, 1}, 3);
		final Stub<Address<? extends Supplier>> var_1030 = buildable.buildBetaNode(var_1025, var_1026, var_1027, var_1028, var_1029, false);
		final Stub<Address<? extends Supplier>> var_1031 = buildable.patternCallStub(new FlatTuple(new Object[] {"Process"}), "secmer.sistar.wrap.Action");
		final TupleMask var_1032 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_1033 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_1034 = new TupleMask(new int[] {}, 1);
		final Stub<Address<? extends Supplier>> var_1035 = buildable.buildBetaNode(var_1030, var_1031, var_1032, var_1033, var_1034, false);
		final Object var_1036 = EPackage.Registry.INSTANCE.getEPackage("http://www.troposproject.org").getEClassifier("MeansEnd");
		final Stub<Address<? extends Supplier>> var_1037 = buildable.unaryTypeStub(new FlatTuple(new Object[] {"Rel"}), var_1036);
		final TupleMask var_1038 = new TupleMask(new int[] {1}, 3);
		final TupleMask var_1039 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_1040 = new TupleMask(new int[] {}, 1);
		final Stub<Address<? extends Supplier>> var_1041 = buildable.buildBetaNode(var_1035, var_1037, var_1038, var_1039, var_1040, false);
		final TupleMask var_1042 = new TupleMask(new int[] {2, 0}, 3);
		final Stub<Address<? extends Supplier>> var_1043 = buildable.buildTrimmer(var_1041, var_1042);
		buildable.buildConnection(var_1043, var_1019);
		return var_1019;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.wrap.fulfill".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Process", 0);
			posMapping.put("Goal", 1);

		}
		return posMapping;
	}
}
