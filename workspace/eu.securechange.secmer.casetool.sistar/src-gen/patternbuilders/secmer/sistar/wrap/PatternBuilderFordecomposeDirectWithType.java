/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.wrap.decomposeDirectWithType
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.wrap;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.wrap.decomposeDirectWithType
 */
public class PatternBuilderFordecomposeDirectWithType implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.wrap.decomposeDirectWithType".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.wrap.decomposeDirectWithType");
		
		final Address<? extends Receiver> var_695 = buildable.patternCollector("secmer.sistar.wrap.decomposeDirectWithType");
		final Stub<Address<? extends Supplier>> var_696 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_697 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://www.troposproject.org").getEClassifier("Composition"))).getEStructuralFeature("compositionType");
		final Stub<Address<? extends Supplier>> var_698 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Composition", "CompositionType"}), var_697);
		final TupleMask var_699 = new TupleMask(new int[] {}, 0);
		final TupleMask var_700 = new TupleMask(new int[] {}, 2);
		final TupleMask var_701 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_702 = buildable.buildBetaNode(var_696, var_698, var_699, var_700, var_701, false);
		final Stub<Address<? extends Supplier>> var_703 = buildable.buildInjectivityChecker(var_702, 1, new int[] {0});
		final Stub<Address<? extends Supplier>> var_704 = buildable.patternCallStub(new FlatTuple(new Object[] {"Composition", "Parent", "Child"}), "secmer.sistar.wrap.troposRelation");
		final TupleMask var_705 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_706 = new TupleMask(new int[] {0}, 3);
		final TupleMask var_707 = new TupleMask(new int[] {1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_708 = buildable.buildBetaNode(var_703, var_704, var_705, var_706, var_707, false);
		final Stub<Address<? extends Supplier>> var_709 = buildable.buildInjectivityChecker(var_708, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_710 = buildable.buildInjectivityChecker(var_709, 3, new int[] {1});
		final TupleMask var_711 = new TupleMask(new int[] {2, 3, 1}, 4);
		final Stub<Address<? extends Supplier>> var_712 = buildable.buildTrimmer(var_710, var_711);
		buildable.buildConnection(var_712, var_695);
		return var_695;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.wrap.decomposeDirectWithType".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Parent", 0);
			posMapping.put("Child", 1);
			posMapping.put("CompositionType", 2);

		}
		return posMapping;
	}
}
