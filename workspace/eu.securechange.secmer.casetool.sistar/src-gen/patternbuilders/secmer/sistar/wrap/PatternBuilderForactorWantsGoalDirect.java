/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.wrap.actorWantsGoalDirect
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.wrap;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.wrap.actorWantsGoalDirect
 */
public class PatternBuilderForactorWantsGoalDirect implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.wrap.actorWantsGoalDirect".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.wrap.actorWantsGoalDirect");
		
		final Address<? extends Receiver> var_58 = buildable.patternCollector("secmer.sistar.wrap.actorWantsGoalDirect");
		final Stub<Address<? extends Supplier>> var_59 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_60 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor"}), "secmer.sistar.wrap.actor");
		final TupleMask var_61 = new TupleMask(new int[] {}, 0);
		final TupleMask var_62 = new TupleMask(new int[] {}, 1);
		final TupleMask var_63 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_64 = buildable.buildBetaNode(var_59, var_60, var_61, var_62, var_63, false);
		final Stub<Address<? extends Supplier>> var_65 = buildable.patternCallStub(new FlatTuple(new Object[] {"Request", "Actor", "Goal"}), "secmer.sistar.wrap.troposRelation");
		final TupleMask var_66 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_67 = new TupleMask(new int[] {1}, 3);
		final TupleMask var_68 = new TupleMask(new int[] {0, 2}, 3);
		final Stub<Address<? extends Supplier>> var_69 = buildable.buildBetaNode(var_64, var_65, var_66, var_67, var_68, false);
		final Stub<Address<? extends Supplier>> var_70 = buildable.patternCallStub(new FlatTuple(new Object[] {"Goal"}), "secmer.sistar.wrap.goal");
		final TupleMask var_71 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_72 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_73 = new TupleMask(new int[] {}, 1);
		final Stub<Address<? extends Supplier>> var_74 = buildable.buildBetaNode(var_69, var_70, var_71, var_72, var_73, false);
		final Object var_75 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://www.troposproject.org").getEClassifier("Ownership"))).getEStructuralFeature("ownershipType");
		final Stub<Address<? extends Supplier>> var_76 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Request", "RequestType"}), var_75);
		final TupleMask var_77 = new TupleMask(new int[] {1}, 3);
		final TupleMask var_78 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_79 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_80 = buildable.buildBetaNode(var_74, var_76, var_77, var_78, var_79, false);
		final Stub<Address<? extends Supplier>> var_81 = buildable.buildInjectivityChecker(var_80, 3, new int[] {0, 1, 2});
		final AbstractEvaluator var_82 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(3).toString(),"REQUEST");
			}
		};
		final Stub<Address<? extends Supplier>> var_83 = buildable.buildPredicateChecker(var_82, null, new int[] {3}, var_81);
		final TupleMask var_84 = new TupleMask(new int[] {0, 2}, 4);
		final Stub<Address<? extends Supplier>> var_85 = buildable.buildTrimmer(var_83, var_84);
		buildable.buildConnection(var_85, var_58);
		return var_58;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.wrap.actorWantsGoalDirect".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Goal", 1);

		}
		return posMapping;
	}
}
