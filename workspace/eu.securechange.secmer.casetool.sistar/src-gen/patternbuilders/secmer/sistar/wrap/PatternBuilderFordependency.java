/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.wrap.dependency
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.wrap;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.wrap.dependency
 */
public class PatternBuilderFordependency implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.wrap.dependency".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.wrap.dependency");
		
		final Address<? extends Receiver> var_147 = buildable.patternCollector("secmer.sistar.wrap.dependency");
		final Stub<Address<? extends Supplier>> var_148 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_149 = buildable.patternCallStub(new FlatTuple(new Object[] {"Act1"}), "secmer.sistar.wrap.actor");
		final TupleMask var_150 = new TupleMask(new int[] {}, 0);
		final TupleMask var_151 = new TupleMask(new int[] {}, 1);
		final TupleMask var_152 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_153 = buildable.buildBetaNode(var_148, var_149, var_150, var_151, var_152, false);
		final Stub<Address<? extends Supplier>> var_154 = buildable.patternCallStub(new FlatTuple(new Object[] {"Dependency", "Act1", "Act2"}), "secmer.sistar.wrap.troposRelation");
		final TupleMask var_155 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_156 = new TupleMask(new int[] {1}, 3);
		final TupleMask var_157 = new TupleMask(new int[] {0, 2}, 3);
		final Stub<Address<? extends Supplier>> var_158 = buildable.buildBetaNode(var_153, var_154, var_155, var_156, var_157, false);
		final Stub<Address<? extends Supplier>> var_159 = buildable.patternCallStub(new FlatTuple(new Object[] {"Act2"}), "secmer.sistar.wrap.actor");
		final TupleMask var_160 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_161 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_162 = new TupleMask(new int[] {}, 1);
		final Stub<Address<? extends Supplier>> var_163 = buildable.buildBetaNode(var_158, var_159, var_160, var_161, var_162, false);
		final Object var_164 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://www.troposproject.org").getEClassifier("Dependency"))).getEStructuralFeature("dependencyType");
		final Stub<Address<? extends Supplier>> var_165 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Dependency", "DependencyType"}), var_164);
		final TupleMask var_166 = new TupleMask(new int[] {1}, 3);
		final TupleMask var_167 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_168 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_169 = buildable.buildBetaNode(var_163, var_165, var_166, var_167, var_168, false);
		final Stub<Address<? extends Supplier>> var_170 = buildable.buildInjectivityChecker(var_169, 3, new int[] {0, 1, 2});
		final TupleMask var_171 = new TupleMask(new int[] {0, 2, 3}, 4);
		final Stub<Address<? extends Supplier>> var_172 = buildable.buildTrimmer(var_170, var_171);
		buildable.buildConnection(var_172, var_147);
		return var_147;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.wrap.dependency".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Act1", 0);
			posMapping.put("Act2", 1);
			posMapping.put("DependencyType", 2);

		}
		return posMapping;
	}
}
