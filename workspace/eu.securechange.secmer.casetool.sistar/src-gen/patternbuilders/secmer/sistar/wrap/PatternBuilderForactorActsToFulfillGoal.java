/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.wrap.actorActsToFulfillGoal
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.wrap;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.wrap.actorActsToFulfillGoal
 */
public class PatternBuilderForactorActsToFulfillGoal implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.wrap.actorActsToFulfillGoal".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.wrap.actorActsToFulfillGoal");
		
		final Address<? extends Receiver> var_783 = buildable.patternCollector("secmer.sistar.wrap.actorActsToFulfillGoal");
		final Stub<Address<? extends Supplier>> var_784 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_785 = buildable.patternCallStub(new FlatTuple(new Object[] {"Action", "Goal"}), "secmer.sistar.wrap.fulfill");
		final TupleMask var_786 = new TupleMask(new int[] {}, 0);
		final TupleMask var_787 = new TupleMask(new int[] {}, 2);
		final TupleMask var_788 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_789 = buildable.buildBetaNode(var_784, var_785, var_786, var_787, var_788, false);
		final Stub<Address<? extends Supplier>> var_790 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Action"}), "secmer.sistar.wrap.carryOut");
		final TupleMask var_791 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_792 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_793 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_794 = buildable.buildBetaNode(var_789, var_790, var_791, var_792, var_793, false);
		final Stub<Address<? extends Supplier>> var_795 = buildable.buildInjectivityChecker(var_794, 2, new int[] {1});
		final TupleMask var_796 = new TupleMask(new int[] {2, 0, 1}, 3);
		final Stub<Address<? extends Supplier>> var_797 = buildable.buildTrimmer(var_795, var_796);
		buildable.buildConnection(var_797, var_783);
		return var_783;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.wrap.actorActsToFulfillGoal".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Action", 1);
			posMapping.put("Goal", 2);

		}
		return posMapping;
	}
}
