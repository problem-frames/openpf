/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.wrap.carryOut
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.wrap;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.wrap.carryOut
 */
public class PatternBuilderForcarryOut implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.wrap.carryOut".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.wrap.carryOut");
		
		final Address<? extends Receiver> var_296 = buildable.patternCollector("secmer.sistar.wrap.carryOut");
		final Stub<Address<? extends Supplier>> var_297 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_298 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Process"}), "secmer.sistar.wrap.carryOutDirect");
		final TupleMask var_299 = new TupleMask(new int[] {}, 0);
		final TupleMask var_300 = new TupleMask(new int[] {}, 2);
		final TupleMask var_301 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_302 = buildable.buildBetaNode(var_297, var_298, var_299, var_300, var_301, false);
		final TupleMask var_303 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_304 = buildable.buildTrimmer(var_302, var_303);
		buildable.buildConnection(var_304, var_296);
		final Stub<Address<? extends Supplier>> var_305 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_306 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "SuperProcess"}), "secmer.sistar.wrap.carryOut");
		final TupleMask var_307 = new TupleMask(new int[] {}, 0);
		final TupleMask var_308 = new TupleMask(new int[] {}, 2);
		final TupleMask var_309 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_310 = buildable.buildBetaNode(var_305, var_306, var_307, var_308, var_309, false);
		final Stub<Address<? extends Supplier>> var_311 = buildable.patternCallStub(new FlatTuple(new Object[] {"SuperProcess", "Process"}), "secmer.sistar.wrap.decomposeDirect");
		final TupleMask var_312 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_313 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_314 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_315 = buildable.buildBetaNode(var_310, var_311, var_312, var_313, var_314, false);
		final Stub<Address<? extends Supplier>> var_316 = buildable.buildInjectivityChecker(var_315, 2, new int[] {0});
		final TupleMask var_317 = new TupleMask(new int[] {0, 2}, 3);
		final Stub<Address<? extends Supplier>> var_318 = buildable.buildTrimmer(var_316, var_317);
		buildable.buildConnection(var_318, var_296);
		return var_296;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.wrap.carryOut".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Process", 1);

		}
		return posMapping;
	}
}
