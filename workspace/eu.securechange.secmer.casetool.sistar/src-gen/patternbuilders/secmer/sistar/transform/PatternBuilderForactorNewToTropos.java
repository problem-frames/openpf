/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.transform.actorNewToTropos
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.transform;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.transform.actorNewToTropos
 */
public class PatternBuilderForactorNewToTropos implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.transform.actorNewToTropos".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.transform.actorNewToTropos");
		
		final Address<? extends Receiver> var_484 = buildable.patternCollector("secmer.sistar.transform.actorNewToTropos");
		final Stub<Address<? extends Supplier>> var_485 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_486 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor"}), "secmer.ontology.actor");
		final TupleMask var_487 = new TupleMask(new int[] {}, 0);
		final TupleMask var_488 = new TupleMask(new int[] {}, 1);
		final TupleMask var_489 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_490 = buildable.buildBetaNode(var_485, var_486, var_487, var_488, var_489, false);
		final Stub<Address<? extends Supplier>> var_491 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Link"}), "secmer.sistar.transform.actorMappingToTropos");
		final TupleMask var_492 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_493 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_494 = new TupleMask(new int[] {}, 2);
		final Stub<Address<? extends Supplier>> var_495 = buildable.buildBetaNode(var_490, var_491, var_492, var_493, var_494, true);
		final TupleMask var_496 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_497 = buildable.buildTrimmer(var_495, var_496);
		buildable.buildConnection(var_497, var_484);
		return var_484;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.transform.actorNewToTropos".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);

		}
		return posMapping;
	}
}
