/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.transform.actorNameFromTropos
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.transform;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.transform.actorNameFromTropos
 */
public class PatternBuilderForactorNameFromTropos implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.transform.actorNameFromTropos".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.transform.actorNameFromTropos");
		
		final Address<? extends Receiver> var_540 = buildable.patternCollector("secmer.sistar.transform.actorNameFromTropos");
		final Stub<Address<? extends Supplier>> var_541 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_542 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Link", "Name"}), "secmer.sistar.transform.actorMappingToTroposWithName");
		final TupleMask var_543 = new TupleMask(new int[] {}, 0);
		final TupleMask var_544 = new TupleMask(new int[] {}, 3);
		final TupleMask var_545 = new TupleMask(new int[] {0, 1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_546 = buildable.buildBetaNode(var_541, var_542, var_543, var_544, var_545, false);
		final Stub<Address<? extends Supplier>> var_547 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Link", "TroposActor"}), "secmer.sistar.transform.actorMappingTropos");
		final TupleMask var_548 = new TupleMask(new int[] {0, 1}, 3);
		final TupleMask var_549 = new TupleMask(new int[] {0, 1}, 3);
		final TupleMask var_550 = new TupleMask(new int[] {2}, 3);
		final Stub<Address<? extends Supplier>> var_551 = buildable.buildBetaNode(var_546, var_547, var_548, var_549, var_550, false);
		final Stub<Address<? extends Supplier>> var_552 = buildable.buildInjectivityChecker(var_551, 3, new int[] {2});
		final Stub<Address<? extends Supplier>> var_553 = buildable.patternCallStub(new FlatTuple(new Object[] {"Link", "TroposActor", "Name"}), "secmer.sistar.transform.actorMappingFromTroposWithName");
		final TupleMask var_554 = new TupleMask(new int[] {1, 3, 2}, 4);
		final TupleMask var_555 = new TupleMask(new int[] {0, 1, 2}, 3);
		final TupleMask var_556 = new TupleMask(new int[] {}, 3);
		final Stub<Address<? extends Supplier>> var_557 = buildable.buildBetaNode(var_552, var_553, var_554, var_555, var_556, true);
		final TupleMask var_558 = new TupleMask(new int[] {0, 1, 3, 2}, 4);
		final Stub<Address<? extends Supplier>> var_559 = buildable.buildTrimmer(var_557, var_558);
		buildable.buildConnection(var_559, var_540);
		return var_540;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.transform.actorNameFromTropos".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Link", 1);
			posMapping.put("TroposActor", 2);
			posMapping.put("Name", 3);

		}
		return posMapping;
	}
}
