/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.transform.actorMappingFromTroposWithName
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.transform;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.transform.actorMappingFromTroposWithName
 */
public class PatternBuilderForactorMappingFromTroposWithName implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.transform.actorMappingFromTroposWithName".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.transform.actorMappingFromTroposWithName");
		
		final Address<? extends Receiver> var_1080 = buildable.patternCollector("secmer.sistar.transform.actorMappingFromTroposWithName");
		final Stub<Address<? extends Supplier>> var_1081 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_1082 = buildable.patternCallStub(new FlatTuple(new Object[] {"Link", "Name"}), "secmer.core.linkName");
		final TupleMask var_1083 = new TupleMask(new int[] {}, 0);
		final TupleMask var_1084 = new TupleMask(new int[] {}, 2);
		final TupleMask var_1085 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_1086 = buildable.buildBetaNode(var_1081, var_1082, var_1083, var_1084, var_1085, false);
		final Stub<Address<? extends Supplier>> var_1087 = buildable.patternCallStub(new FlatTuple(new Object[] {"Link", "TroposActor"}), "secmer.sistar.transform.actorMappingFromTropos");
		final TupleMask var_1088 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_1089 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_1090 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_1091 = buildable.buildBetaNode(var_1086, var_1087, var_1088, var_1089, var_1090, false);
		final Stub<Address<? extends Supplier>> var_1092 = buildable.patternCallStub(new FlatTuple(new Object[] {"TroposActor", "Name"}), "secmer.sistar.wrap.actorName");
		final TupleMask var_1093 = new TupleMask(new int[] {2, 1}, 3);
		final TupleMask var_1094 = new TupleMask(new int[] {0, 1}, 2);
		final TupleMask var_1095 = new TupleMask(new int[] {}, 2);
		final Stub<Address<? extends Supplier>> var_1096 = buildable.buildBetaNode(var_1091, var_1092, var_1093, var_1094, var_1095, false);
		final TupleMask var_1097 = new TupleMask(new int[] {0, 2, 1}, 3);
		final Stub<Address<? extends Supplier>> var_1098 = buildable.buildTrimmer(var_1096, var_1097);
		buildable.buildConnection(var_1098, var_1080);
		return var_1080;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.transform.actorMappingFromTroposWithName".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Link", 0);
			posMapping.put("TroposActor", 1);
			posMapping.put("Name", 2);

		}
		return posMapping;
	}
}
