/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.transform.actorMappingTropos
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.transform;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.transform.actorMappingTropos
 */
public class PatternBuilderForactorMappingTropos implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.transform.actorMappingTropos".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.transform.actorMappingTropos");
		
		final Address<? extends Receiver> var_43 = buildable.patternCollector("secmer.sistar.transform.actorMappingTropos");
		final Stub<Address<? extends Supplier>> var_44 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_45 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Link"}), "secmer.sistar.transform.actorMappingToTropos");
		final TupleMask var_46 = new TupleMask(new int[] {}, 0);
		final TupleMask var_47 = new TupleMask(new int[] {}, 2);
		final TupleMask var_48 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_49 = buildable.buildBetaNode(var_44, var_45, var_46, var_47, var_48, false);
		final Stub<Address<? extends Supplier>> var_50 = buildable.patternCallStub(new FlatTuple(new Object[] {"Link", "TroposActor"}), "secmer.sistar.transform.actorMappingFromTropos");
		final TupleMask var_51 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_52 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_53 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_54 = buildable.buildBetaNode(var_49, var_50, var_51, var_52, var_53, false);
		final Stub<Address<? extends Supplier>> var_55 = buildable.buildInjectivityChecker(var_54, 2, new int[] {0});
		final TupleMask var_56 = new TupleMask(new int[] {0, 1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_57 = buildable.buildTrimmer(var_55, var_56);
		buildable.buildConnection(var_57, var_43);
		return var_43;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.transform.actorMappingTropos".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Link", 1);
			posMapping.put("TroposActor", 2);

		}
		return posMapping;
	}
}
