/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.transform.modelMappingTropos
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.transform;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.transform.modelMappingTropos
 */
public class PatternBuilderFormodelMappingTropos implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.transform.modelMappingTropos".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.transform.modelMappingTropos");
		
		final Address<? extends Receiver> var_518 = buildable.patternCollector("secmer.sistar.transform.modelMappingTropos");
		final Stub<Address<? extends Supplier>> var_519 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_520 = buildable.patternCallStub(new FlatTuple(new Object[] {"TroposDiagram"}), "secmer.sistar.wrap.model");
		final TupleMask var_521 = new TupleMask(new int[] {}, 0);
		final TupleMask var_522 = new TupleMask(new int[] {}, 1);
		final TupleMask var_523 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_524 = buildable.buildBetaNode(var_519, var_520, var_521, var_522, var_523, false);
		final Object var_525 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/secmer/tool").getEClassifier("SecMERIntegrationModel"))).getEStructuralFeature("TroposModel");
		final Stub<Address<? extends Supplier>> var_526 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"SecMERIntegrationModel", "TroposDiagram"}), var_525);
		final TupleMask var_527 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_528 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_529 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_530 = buildable.buildBetaNode(var_524, var_526, var_527, var_528, var_529, false);
		final Stub<Address<? extends Supplier>> var_531 = buildable.buildInjectivityChecker(var_530, 1, new int[] {0});
		final Stub<Address<? extends Supplier>> var_532 = buildable.patternCallStub(new FlatTuple(new Object[] {"SecMERIntegrationModel", "Situation"}), "secmer.ontology.situationModel");
		final TupleMask var_533 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_534 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_535 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_536 = buildable.buildBetaNode(var_531, var_532, var_533, var_534, var_535, false);
		final Stub<Address<? extends Supplier>> var_537 = buildable.buildInjectivityChecker(var_536, 2, new int[] {0});
		final TupleMask var_538 = new TupleMask(new int[] {2, 0}, 3);
		final Stub<Address<? extends Supplier>> var_539 = buildable.buildTrimmer(var_537, var_538);
		buildable.buildConnection(var_539, var_518);
		return var_518;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.transform.modelMappingTropos".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Situation", 0);
			posMapping.put("TroposDiagram", 1);

		}
		return posMapping;
	}
}
