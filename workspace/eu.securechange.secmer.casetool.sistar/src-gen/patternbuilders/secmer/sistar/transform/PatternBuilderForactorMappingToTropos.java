/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.transform.actorMappingToTropos
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.transform;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.transform.actorMappingToTropos
 */
public class PatternBuilderForactorMappingToTropos implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.transform.actorMappingToTropos".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.transform.actorMappingToTropos");
		
		final Address<? extends Receiver> var_117 = buildable.patternCollector("secmer.sistar.transform.actorMappingToTropos");
		final Stub<Address<? extends Supplier>> var_118 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_119 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor"}), "secmer.ontology.actor");
		final TupleMask var_120 = new TupleMask(new int[] {}, 0);
		final TupleMask var_121 = new TupleMask(new int[] {}, 1);
		final TupleMask var_122 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_123 = buildable.buildBetaNode(var_118, var_119, var_120, var_121, var_122, false);
		final Object var_124 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/secmer/tool/aspects/tropos").getEClassifier("TroposActorLink"))).getEStructuralFeature("secmer");
		final Stub<Address<? extends Supplier>> var_125 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Link", "Actor"}), var_124);
		final TupleMask var_126 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_127 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_128 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_129 = buildable.buildBetaNode(var_123, var_125, var_126, var_127, var_128, false);
		final Stub<Address<? extends Supplier>> var_130 = buildable.buildInjectivityChecker(var_129, 1, new int[] {0});
		final TupleMask var_131 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_132 = buildable.buildTrimmer(var_130, var_131);
		buildable.buildConnection(var_132, var_117);
		return var_117;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.transform.actorMappingToTropos".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Link", 1);

		}
		return posMapping;
	}
}
