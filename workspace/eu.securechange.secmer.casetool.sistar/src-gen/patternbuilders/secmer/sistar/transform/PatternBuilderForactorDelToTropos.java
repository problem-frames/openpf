/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.transform.actorDelToTropos
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.transform;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.transform.actorDelToTropos
 */
public class PatternBuilderForactorDelToTropos implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.transform.actorDelToTropos".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.transform.actorDelToTropos");
		
		final Address<? extends Receiver> var_409 = buildable.patternCollector("secmer.sistar.transform.actorDelToTropos");
		final Stub<Address<? extends Supplier>> var_410 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_411 = buildable.patternCallStub(new FlatTuple(new Object[] {"Link", "TroposActor"}), "secmer.sistar.transform.actorMappingFromTropos");
		final TupleMask var_412 = new TupleMask(new int[] {}, 0);
		final TupleMask var_413 = new TupleMask(new int[] {}, 2);
		final TupleMask var_414 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_415 = buildable.buildBetaNode(var_410, var_411, var_412, var_413, var_414, false);
		final Stub<Address<? extends Supplier>> var_416 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Link"}), "secmer.sistar.transform.actorMappingToTropos");
		final TupleMask var_417 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_418 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_419 = new TupleMask(new int[] {}, 2);
		final Stub<Address<? extends Supplier>> var_420 = buildable.buildBetaNode(var_415, var_416, var_417, var_418, var_419, true);
		final TupleMask var_421 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_422 = buildable.buildTrimmer(var_420, var_421);
		buildable.buildConnection(var_422, var_409);
		return var_409;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.transform.actorDelToTropos".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Link", 0);
			posMapping.put("TroposActor", 1);

		}
		return posMapping;
	}
}
