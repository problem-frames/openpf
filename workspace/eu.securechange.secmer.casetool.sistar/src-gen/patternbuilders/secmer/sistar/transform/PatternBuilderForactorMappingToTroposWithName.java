/*******************************************************************************
 * Pattern builder for pattern secmer.sistar.transform.actorMappingToTroposWithName
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.sistar.transform;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.sistar.transform.actorMappingToTroposWithName
 */
public class PatternBuilderForactorMappingToTroposWithName implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.sistar.transform.actorMappingToTroposWithName".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.sistar.transform.actorMappingToTroposWithName");
		
		final Address<? extends Receiver> var_925 = buildable.patternCollector("secmer.sistar.transform.actorMappingToTroposWithName");
		final Stub<Address<? extends Supplier>> var_926 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_927 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Link"}), "secmer.sistar.transform.actorMappingToTropos");
		final TupleMask var_928 = new TupleMask(new int[] {}, 0);
		final TupleMask var_929 = new TupleMask(new int[] {}, 2);
		final TupleMask var_930 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_931 = buildable.buildBetaNode(var_926, var_927, var_928, var_929, var_930, false);
		final Stub<Address<? extends Supplier>> var_932 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Name"}), "secmer.ontology.actorName");
		final TupleMask var_933 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_934 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_935 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_936 = buildable.buildBetaNode(var_931, var_932, var_933, var_934, var_935, false);
		final Stub<Address<? extends Supplier>> var_937 = buildable.patternCallStub(new FlatTuple(new Object[] {"Link", "Name"}), "secmer.core.linkName");
		final TupleMask var_938 = new TupleMask(new int[] {1, 2}, 3);
		final TupleMask var_939 = new TupleMask(new int[] {0, 1}, 2);
		final TupleMask var_940 = new TupleMask(new int[] {}, 2);
		final Stub<Address<? extends Supplier>> var_941 = buildable.buildBetaNode(var_936, var_937, var_938, var_939, var_940, false);
		final TupleMask var_942 = new TupleMask(new int[] {0, 1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_943 = buildable.buildTrimmer(var_941, var_942);
		buildable.buildConnection(var_943, var_925);
		return var_925;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.sistar.transform.actorMappingToTroposWithName".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Link", 1);
			posMapping.put("Name", 2);

		}
		return posMapping;
	}
}
