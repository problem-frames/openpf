/*
* generated by Xtext
*/
grammar InternalArgument;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package uk.ac.open.argument.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.open.argument.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import uk.ac.open.argument.services.ArgumentGrammarAccess;

}

@parser::members {
 
 	private ArgumentGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ArgumentGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleArgumentDiagram
entryRuleArgumentDiagram 
:
{ before(grammarAccess.getArgumentDiagramRule()); }
	 ruleArgumentDiagram
{ after(grammarAccess.getArgumentDiagramRule()); } 
	 EOF 
;

// Rule ArgumentDiagram
ruleArgumentDiagram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentDiagramAccess().getGroup()); }
(rule__ArgumentDiagram__Group__0)
{ after(grammarAccess.getArgumentDiagramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNode
entryRuleNode 
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeAccess().getGroup()); }
(rule__Node__Group__0)
{ after(grammarAccess.getNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLink
entryRuleLink 
:
{ before(grammarAccess.getLinkRule()); }
	 ruleLink
{ after(grammarAccess.getLinkRule()); } 
	 EOF 
;

// Rule Link
ruleLink
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLinkAccess().getGroup()); }
(rule__Link__Group__0)
{ after(grammarAccess.getLinkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSplitCommas
entryRuleSplitCommas 
:
{ before(grammarAccess.getSplitCommasRule()); }
	 ruleSplitCommas
{ after(grammarAccess.getSplitCommasRule()); } 
	 EOF 
;

// Rule SplitCommas
ruleSplitCommas
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSplitCommasAccess().getGroup()); }
(rule__SplitCommas__Group__0)
{ after(grammarAccess.getSplitCommasAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSplitConnective
entryRuleSplitConnective 
:
{ before(grammarAccess.getSplitConnectiveRule()); }
	 ruleSplitConnective
{ after(grammarAccess.getSplitConnectiveRule()); } 
	 EOF 
;

// Rule SplitConnective
ruleSplitConnective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSplitConnectiveAccess().getGroup()); }
(rule__SplitConnective__Group__0)
{ after(grammarAccess.getSplitConnectiveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSplitParentheses
entryRuleSplitParentheses 
:
{ before(grammarAccess.getSplitParenthesesRule()); }
	 ruleSplitParentheses
{ after(grammarAccess.getSplitParenthesesRule()); } 
	 EOF 
;

// Rule SplitParentheses
ruleSplitParentheses
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSplitParenthesesAccess().getAlternatives()); }
(rule__SplitParentheses__Alternatives)
{ after(grammarAccess.getSplitParenthesesAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeLiteral
entryRuleNodeLiteral 
:
{ before(grammarAccess.getNodeLiteralRule()); }
	 ruleNodeLiteral
{ after(grammarAccess.getNodeLiteralRule()); } 
	 EOF 
;

// Rule NodeLiteral
ruleNodeLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeLiteralAccess().getValueAssignment()); }
(rule__NodeLiteral__ValueAssignment)
{ after(grammarAccess.getNodeLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule NodeType
ruleNodeType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getAlternatives()); }
(rule__NodeType__Alternatives)
{ after(grammarAccess.getNodeTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ConnectiveType
ruleConnectiveType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConnectiveTypeAccess().getAlternatives()); }
(rule__ConnectiveType__Alternatives)
{ after(grammarAccess.getConnectiveTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LinkType
ruleLinkType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkTypeAccess().getAlternatives()); }
(rule__LinkType__Alternatives)
{ after(grammarAccess.getLinkTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ArgumentDiagram__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentDiagramAccess().getNodesAssignment_3_0()); }
(rule__ArgumentDiagram__NodesAssignment_3_0)
{ after(grammarAccess.getArgumentDiagramAccess().getNodesAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getArgumentDiagramAccess().getLinksAssignment_3_1()); }
(rule__ArgumentDiagram__LinksAssignment_3_1)
{ after(grammarAccess.getArgumentDiagramAccess().getLinksAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SplitParentheses__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitParenthesesAccess().getNodeLiteralParserRuleCall_0()); }
	ruleNodeLiteral
{ after(grammarAccess.getSplitParenthesesAccess().getNodeLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSplitParenthesesAccess().getGroup_1()); }
(rule__SplitParentheses__Group_1__0)
{ after(grammarAccess.getSplitParenthesesAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getCLAIMEnumLiteralDeclaration_0()); }
(	'C' 
)
{ after(grammarAccess.getNodeTypeAccess().getCLAIMEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getNodeTypeAccess().getWARRANTEnumLiteralDeclaration_1()); }
(	'W' 
)
{ after(grammarAccess.getNodeTypeAccess().getWARRANTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getNodeTypeAccess().getGROUNDEnumLiteralDeclaration_2()); }
(	'G' 
)
{ after(grammarAccess.getNodeTypeAccess().getGROUNDEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getNodeTypeAccess().getREBUTTALEnumLiteralDeclaration_3()); }
(	'R' 
)
{ after(grammarAccess.getNodeTypeAccess().getREBUTTALEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getNodeTypeAccess().getMITIGATIONEnumLiteralDeclaration_4()); }
(	'M' 
)
{ after(grammarAccess.getNodeTypeAccess().getMITIGATIONEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getNodeTypeAccess().getARGUMENTEnumLiteralDeclaration_5()); }
(	'A' 
)
{ after(grammarAccess.getNodeTypeAccess().getARGUMENTEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConnectiveType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConnectiveTypeAccess().getANDEnumLiteralDeclaration_0()); }
(	'and' 
)
{ after(grammarAccess.getConnectiveTypeAccess().getANDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getConnectiveTypeAccess().getOREnumLiteralDeclaration_1()); }
(	'or' 
)
{ after(grammarAccess.getConnectiveTypeAccess().getOREnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LinkType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkTypeAccess().getARGUESEnumLiteralDeclaration_0()); }
(	'argues' 
)
{ after(grammarAccess.getLinkTypeAccess().getARGUESEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getLinkTypeAccess().getREBUTSEnumLiteralDeclaration_1()); }
(	'rebuts' 
)
{ after(grammarAccess.getLinkTypeAccess().getREBUTSEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getLinkTypeAccess().getMITIGATESEnumLiteralDeclaration_2()); }
(	'mitigates' 
)
{ after(grammarAccess.getLinkTypeAccess().getMITIGATESEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ArgumentDiagram__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentDiagram__Group__0__Impl
	rule__ArgumentDiagram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentDiagram__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentDiagramAccess().getArgumentKeyword_0()); }

	'argument:' 

{ after(grammarAccess.getArgumentDiagramAccess().getArgumentKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentDiagram__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentDiagram__Group__1__Impl
	rule__ArgumentDiagram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentDiagram__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentDiagramAccess().getNameAssignment_1()); }
(rule__ArgumentDiagram__NameAssignment_1)
{ after(grammarAccess.getArgumentDiagramAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentDiagram__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentDiagram__Group__2__Impl
	rule__ArgumentDiagram__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentDiagram__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentDiagramAccess().getGroup_2()); }
(rule__ArgumentDiagram__Group_2__0)?
{ after(grammarAccess.getArgumentDiagramAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentDiagram__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentDiagram__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentDiagram__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentDiagramAccess().getAlternatives_3()); }
(rule__ArgumentDiagram__Alternatives_3)*
{ after(grammarAccess.getArgumentDiagramAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArgumentDiagram__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentDiagram__Group_2__0__Impl
	rule__ArgumentDiagram__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentDiagram__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentDiagramAccess().getForKeyword_2_0()); }

	'for' 

{ after(grammarAccess.getArgumentDiagramAccess().getForKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentDiagram__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentDiagram__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentDiagram__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentDiagramAccess().getHighlightAssignment_2_1()); }
(rule__ArgumentDiagram__HighlightAssignment_2_1)
{ after(grammarAccess.getArgumentDiagramAccess().getHighlightAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Node__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__0__Impl
	rule__Node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getNameAssignment_0()); }
(rule__Node__NameAssignment_0)
{ after(grammarAccess.getNodeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__1__Impl
	rule__Node__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getTypeAssignment_1()); }
(rule__Node__TypeAssignment_1)?
{ after(grammarAccess.getNodeAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getGroup_2()); }
(rule__Node__Group_2__0)?
{ after(grammarAccess.getNodeAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Node__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group_2__0__Impl
	rule__Node__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getColonKeyword_2_0()); }
(
	':' 
)?
{ after(grammarAccess.getNodeAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getDescriptionAssignment_2_1()); }
(rule__Node__DescriptionAssignment_2_1)
{ after(grammarAccess.getNodeAccess().getDescriptionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Link__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Link__Group__0__Impl
	rule__Link__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getAfromAssignment_0()); }
(rule__Link__AfromAssignment_0)
{ after(grammarAccess.getLinkAccess().getAfromAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Link__Group__1__Impl
	rule__Link__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getLinkAssignment_1()); }
(rule__Link__LinkAssignment_1)
{ after(grammarAccess.getLinkAccess().getLinkAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Link__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getToNode1Assignment_2()); }
(rule__Link__ToNode1Assignment_2)
{ after(grammarAccess.getLinkAccess().getToNode1Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SplitCommas__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitCommas__Group__0__Impl
	rule__SplitCommas__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitCommas__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitCommasAccess().getSplitConnectiveParserRuleCall_0()); }
	ruleSplitConnective
{ after(grammarAccess.getSplitCommasAccess().getSplitConnectiveParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SplitCommas__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitCommas__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitCommas__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitCommasAccess().getGroup_1()); }
(rule__SplitCommas__Group_1__0)*
{ after(grammarAccess.getSplitCommasAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SplitCommas__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitCommas__Group_1__0__Impl
	rule__SplitCommas__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitCommas__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitCommasAccess().getSplitCommasLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSplitCommasAccess().getSplitCommasLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SplitCommas__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitCommas__Group_1__1__Impl
	rule__SplitCommas__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitCommas__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitCommasAccess().getCommaKeyword_1_1()); }

	',' 

{ after(grammarAccess.getSplitCommasAccess().getCommaKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SplitCommas__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitCommas__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitCommas__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitCommasAccess().getRightAssignment_1_2()); }
(rule__SplitCommas__RightAssignment_1_2)
{ after(grammarAccess.getSplitCommasAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SplitConnective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitConnective__Group__0__Impl
	rule__SplitConnective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitConnective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitConnectiveAccess().getSplitParenthesesParserRuleCall_0()); }
	ruleSplitParentheses
{ after(grammarAccess.getSplitConnectiveAccess().getSplitParenthesesParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SplitConnective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitConnective__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitConnective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitConnectiveAccess().getGroup_1()); }
(rule__SplitConnective__Group_1__0)*
{ after(grammarAccess.getSplitConnectiveAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SplitConnective__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitConnective__Group_1__0__Impl
	rule__SplitConnective__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitConnective__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitConnectiveAccess().getSplitConnectiveLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSplitConnectiveAccess().getSplitConnectiveLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SplitConnective__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitConnective__Group_1__1__Impl
	rule__SplitConnective__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitConnective__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitConnectiveAccess().getConnectiveAssignment_1_1()); }
(rule__SplitConnective__ConnectiveAssignment_1_1)
{ after(grammarAccess.getSplitConnectiveAccess().getConnectiveAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SplitConnective__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitConnective__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitConnective__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitConnectiveAccess().getRightAssignment_1_2()); }
(rule__SplitConnective__RightAssignment_1_2)
{ after(grammarAccess.getSplitConnectiveAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SplitParentheses__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitParentheses__Group_1__0__Impl
	rule__SplitParentheses__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitParentheses__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitParenthesesAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getSplitParenthesesAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SplitParentheses__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitParentheses__Group_1__1__Impl
	rule__SplitParentheses__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitParentheses__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitParenthesesAccess().getSplitCommasParserRuleCall_1_1()); }
	ruleSplitCommas
{ after(grammarAccess.getSplitParenthesesAccess().getSplitCommasParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SplitParentheses__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplitParentheses__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitParentheses__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitParenthesesAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getSplitParenthesesAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__ArgumentDiagram__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentDiagramAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getArgumentDiagramAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentDiagram__HighlightAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentDiagramAccess().getHighlightNodeCrossReference_2_1_0()); }
(
{ before(grammarAccess.getArgumentDiagramAccess().getHighlightNodeIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getArgumentDiagramAccess().getHighlightNodeIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getArgumentDiagramAccess().getHighlightNodeCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentDiagram__NodesAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentDiagramAccess().getNodesNodeParserRuleCall_3_0_0()); }
	ruleNode{ after(grammarAccess.getArgumentDiagramAccess().getNodesNodeParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentDiagram__LinksAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentDiagramAccess().getLinksLinkParserRuleCall_3_1_0()); }
	ruleLink{ after(grammarAccess.getArgumentDiagramAccess().getLinksLinkParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getTypeNodeTypeEnumRuleCall_1_0()); }
	ruleNodeType{ after(grammarAccess.getNodeAccess().getTypeNodeTypeEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__DescriptionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getDescriptionSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getNodeAccess().getDescriptionSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__AfromAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getAfromNodeCrossReference_0_0()); }
(
{ before(grammarAccess.getLinkAccess().getAfromNodeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getLinkAccess().getAfromNodeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getLinkAccess().getAfromNodeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__LinkAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getLinkLinkTypeEnumRuleCall_1_0()); }
	ruleLinkType{ after(grammarAccess.getLinkAccess().getLinkLinkTypeEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__ToNode1Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getToNode1SplitCommasParserRuleCall_2_0()); }
	ruleSplitCommas{ after(grammarAccess.getLinkAccess().getToNode1SplitCommasParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SplitCommas__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitCommasAccess().getRightSplitConnectiveParserRuleCall_1_2_0()); }
	ruleSplitConnective{ after(grammarAccess.getSplitCommasAccess().getRightSplitConnectiveParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SplitConnective__ConnectiveAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitConnectiveAccess().getConnectiveConnectiveTypeEnumRuleCall_1_1_0()); }
	ruleConnectiveType{ after(grammarAccess.getSplitConnectiveAccess().getConnectiveConnectiveTypeEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SplitConnective__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplitConnectiveAccess().getRightSplitParenthesesParserRuleCall_1_2_0()); }
	ruleSplitParentheses{ after(grammarAccess.getSplitConnectiveAccess().getRightSplitParenthesesParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeLiteralAccess().getValueNodeCrossReference_0()); }
(
{ before(grammarAccess.getNodeLiteralAccess().getValueNodeIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getNodeLiteralAccess().getValueNodeIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getNodeLiteralAccess().getValueNodeCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : ('#' ~('#')+ '#'|'^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*);

RULE_QUALIFIED_NAME : RULE_ID ('.' RULE_ID)*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


