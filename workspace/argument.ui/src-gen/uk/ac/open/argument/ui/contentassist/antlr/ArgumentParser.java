/*
* generated by Xtext
*/
package uk.ac.open.argument.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import uk.ac.open.argument.services.ArgumentGrammarAccess;

public class ArgumentParser extends AbstractContentAssistParser {
	
	@Inject
	private ArgumentGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected uk.ac.open.argument.ui.contentassist.antlr.internal.InternalArgumentParser createParser() {
		uk.ac.open.argument.ui.contentassist.antlr.internal.InternalArgumentParser result = new uk.ac.open.argument.ui.contentassist.antlr.internal.InternalArgumentParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getArgumentDiagramAccess().getAlternatives_3(), "rule__ArgumentDiagram__Alternatives_3");
					put(grammarAccess.getSplitParenthesesAccess().getAlternatives(), "rule__SplitParentheses__Alternatives");
					put(grammarAccess.getNodeTypeAccess().getAlternatives(), "rule__NodeType__Alternatives");
					put(grammarAccess.getConnectiveTypeAccess().getAlternatives(), "rule__ConnectiveType__Alternatives");
					put(grammarAccess.getLinkTypeAccess().getAlternatives(), "rule__LinkType__Alternatives");
					put(grammarAccess.getArgumentDiagramAccess().getGroup(), "rule__ArgumentDiagram__Group__0");
					put(grammarAccess.getArgumentDiagramAccess().getGroup_2(), "rule__ArgumentDiagram__Group_2__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getNodeAccess().getGroup_2(), "rule__Node__Group_2__0");
					put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
					put(grammarAccess.getSplitCommasAccess().getGroup(), "rule__SplitCommas__Group__0");
					put(grammarAccess.getSplitCommasAccess().getGroup_1(), "rule__SplitCommas__Group_1__0");
					put(grammarAccess.getSplitConnectiveAccess().getGroup(), "rule__SplitConnective__Group__0");
					put(grammarAccess.getSplitConnectiveAccess().getGroup_1(), "rule__SplitConnective__Group_1__0");
					put(grammarAccess.getSplitParenthesesAccess().getGroup_1(), "rule__SplitParentheses__Group_1__0");
					put(grammarAccess.getArgumentDiagramAccess().getNameAssignment_1(), "rule__ArgumentDiagram__NameAssignment_1");
					put(grammarAccess.getArgumentDiagramAccess().getHighlightAssignment_2_1(), "rule__ArgumentDiagram__HighlightAssignment_2_1");
					put(grammarAccess.getArgumentDiagramAccess().getNodesAssignment_3_0(), "rule__ArgumentDiagram__NodesAssignment_3_0");
					put(grammarAccess.getArgumentDiagramAccess().getLinksAssignment_3_1(), "rule__ArgumentDiagram__LinksAssignment_3_1");
					put(grammarAccess.getNodeAccess().getNameAssignment_0(), "rule__Node__NameAssignment_0");
					put(grammarAccess.getNodeAccess().getTypeAssignment_1(), "rule__Node__TypeAssignment_1");
					put(grammarAccess.getNodeAccess().getDescriptionAssignment_2_1(), "rule__Node__DescriptionAssignment_2_1");
					put(grammarAccess.getLinkAccess().getAfromAssignment_0(), "rule__Link__AfromAssignment_0");
					put(grammarAccess.getLinkAccess().getLinkAssignment_1(), "rule__Link__LinkAssignment_1");
					put(grammarAccess.getLinkAccess().getToNode1Assignment_2(), "rule__Link__ToNode1Assignment_2");
					put(grammarAccess.getSplitCommasAccess().getRightAssignment_1_2(), "rule__SplitCommas__RightAssignment_1_2");
					put(grammarAccess.getSplitConnectiveAccess().getConnectiveAssignment_1_1(), "rule__SplitConnective__ConnectiveAssignment_1_1");
					put(grammarAccess.getSplitConnectiveAccess().getRightAssignment_1_2(), "rule__SplitConnective__RightAssignment_1_2");
					put(grammarAccess.getNodeLiteralAccess().getValueAssignment(), "rule__NodeLiteral__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			uk.ac.open.argument.ui.contentassist.antlr.internal.InternalArgumentParser typedParser = (uk.ac.open.argument.ui.contentassist.antlr.internal.InternalArgumentParser) parser;
			typedParser.entryRuleArgumentDiagram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ArgumentGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ArgumentGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
