/*
* generated by Xtext
*/
package uk.ac.open.argument.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import uk.ac.open.argument.services.ArgumentGrammarAccess;

public class ArgumentParser extends AbstractContentAssistParser {
	
	@Inject
	private ArgumentGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected uk.ac.open.argument.ui.contentassist.antlr.internal.InternalArgumentParser createParser() {
		uk.ac.open.argument.ui.contentassist.antlr.internal.InternalArgumentParser result = new uk.ac.open.argument.ui.contentassist.antlr.internal.InternalArgumentParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getArgumentAccess().getAlternatives_1_1(), "rule__Argument__Alternatives_1_1");
					put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
					put(grammarAccess.getArgumentAccess().getGroup_0(), "rule__Argument__Group_0__0");
					put(grammarAccess.getArgumentAccess().getGroup_1(), "rule__Argument__Group_1__0");
					put(grammarAccess.getArgumentAccess().getGroup_1_1_1(), "rule__Argument__Group_1_1_1__0");
					put(grammarAccess.getArgumentAccess().getGroup_6(), "rule__Argument__Group_6__0");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getStatementAccess().getGroup_3(), "rule__Statement__Group_3__0");
					put(grammarAccess.getArgumentAccess().getGroundsAssignment_0_1(), "rule__Argument__GroundsAssignment_0_1");
					put(grammarAccess.getArgumentAccess().getWarrantsAssignment_1_1_0(), "rule__Argument__WarrantsAssignment_1_1_0");
					put(grammarAccess.getArgumentAccess().getWarrantsAssignment_1_1_1_1(), "rule__Argument__WarrantsAssignment_1_1_1_1");
					put(grammarAccess.getArgumentAccess().getNameAssignment_3(), "rule__Argument__NameAssignment_3");
					put(grammarAccess.getArgumentAccess().getStrAssignment_5(), "rule__Argument__StrAssignment_5");
					put(grammarAccess.getArgumentAccess().getRebuttsAssignment_6_1(), "rule__Argument__RebuttsAssignment_6_1");
					put(grammarAccess.getStatementAccess().getNameAssignment_0(), "rule__Statement__NameAssignment_0");
					put(grammarAccess.getStatementAccess().getStrAssignment_2(), "rule__Statement__StrAssignment_2");
					put(grammarAccess.getStatementAccess().getRebuttsAssignment_3_1(), "rule__Statement__RebuttsAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			uk.ac.open.argument.ui.contentassist.antlr.internal.InternalArgumentParser typedParser = (uk.ac.open.argument.ui.contentassist.antlr.internal.InternalArgumentParser) parser;
			typedParser.entryRuleArgument();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ArgumentGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ArgumentGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
