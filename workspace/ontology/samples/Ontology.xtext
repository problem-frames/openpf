grammar eu.securechange.ontology.Ontology with org.eclipse.xtext.common.Terminals

generate ontology "http://securechange.eu/ontology"

Situation:
	("model" time=ID ":")? world=World;

World:
	{World} (entities+=Entity | domains+=Domain | relationships+=Relationship)*;

Thing:
	Object | Event;

Event:
	"event" name=ID;

Object:
	Entity | Relationship | Proposition;

Domain:
	name=ID type=DomainType ((",")? properties+=Proposition)*;

enum DomainType:
	Specification="S" | Requirement="R" | World="W";

Proposition:
	DomainAssumption | Requirement | Argument;

Requirement: FunctionalRequirement | SecurityRequirement | AntiRequirement | QualityRequirement;

DomainAssumption:
	"DA" name=ID;

FunctionalRequirement:
	"FR" name=ID;

SecurityRequirement:
	"SR" name=ID;

AntiRequirement:
	"AR" name=ID;

QualityRequirement:
	"Q" name=ID;

Argument:
	"A" name=ID;

Entity:
	Actor | Process | Resource;

Actor:
	Stakeholder | Attacker;

Stakeholder:
	"actor" name=ID;

Attacker:
	"attacker" name=ID;

Process:
	NaturalProcess | HumanActivity;

NaturalProcess:
	"process" name=ID ("{" (activities+=[Process])* "}")?;

HumanActivity:
	{Activity} "activity" name=ID (actions+=Action)*;

Action:
	"action" name=ID;

Resource:
	"resource" name=ID | Asset;

Asset:
	"asset" name=ID;

Relationship:
	Wants | Does | Decomposes | Trusts | Delegates | Contributes | Fulfils | Provides | Consumes |
	Exploits | Damages | Attacks | Argues;

Wants:
	type="wants" "(" source=[Actor] "," target=[Requirement] ")";

Does:
	type="does" "(" source=[Actor] "," target=[Activity] ")";

Decomposes:
	type=DecomposesType "(" source=[Requirement] "," target=[Requirement] ")";

enum DecomposesType:
	AND="and" | OR="or";

Trusts:
	type="trusts" "(" source=[Actor] "," target=[Actor] ("," entity=[Thing])? ")";

Delegates:
	type="delegates" "(" source=[Actor] "," target=[Actor] ("," entity=[Thing])? ")";

Contributes:
	type=ContributesType "(" source=[Requirement] "," target=[Requirement] ")";

enum ContributesType:
	HURT="-" | HELP="+" | BREAK="--" | MAKE="++";

Fulfils:
	type=FulfilsType "(" source=[Process] "," target=[Proposition] ")";

enum FulfilsType:
	Fulfils="fulfils";

Provides:
	type="provides" "(" (source=[Process]|source=[Actor]) "," target=[Resource] ")";

Consumes:
	type="consumes" "(" (source=[Process]|source=[Actor]) "," target=[Resource] ")";

Exploits:
	type="exploits" "(" source=[Attacker] "," target=[Process] ")";

Damages:
	type="damages" "(" source=[Attacker] "," target=[Asset] ")";

Attacks:
	type="attacks" "(" source=[Attacker] "," target=[Process] ")";

Argues:
	type="argues" "(" source=[Proposition] "," target=[Proposition] ")";

terminal ID:
	('#' (!('#'))+ '#') | ('^'? ('a'..'z' | 'A'..'Z' | '_' | '.') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '.')*);
