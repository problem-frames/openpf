/*
* generated by Xtext
*/
grammar InternalOntology;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package eu.securechange.ontology.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.securechange.ontology.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import eu.securechange.ontology.services.OntologyGrammarAccess;

}

@parser::members {

 	private OntologyGrammarAccess grammarAccess;
 	
    public InternalOntologyParser(TokenStream input, IAstFactory factory, OntologyGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("eu/securechange/ontology/parser/antlr/internal/InternalOntology.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Situation";	
   	}
   	
   	@Override
   	protected OntologyGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSituation
entryRuleSituation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSituationRule(), currentNode); }
	 iv_ruleSituation=ruleSituation 
	 { $current=$iv_ruleSituation.current; } 
	 EOF 
;

// Rule Situation
ruleSituation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'model' 
    {
        createLeafNode(grammarAccess.getSituationAccess().getModelKeyword_0_0(), null); 
    }
(
(
		lv_time_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSituationAccess().getTimeIDTerminalRuleCall_0_1_0(), "time"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSituationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"time",
	        		lv_time_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getSituationAccess().getColonKeyword_0_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSituationAccess().getWorldWorldParserRuleCall_1_0(), currentNode); 
	    }
		lv_world_3_0=ruleWorld		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSituationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"world",
	        		lv_world_3_0, 
	        		"World", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleWorld
entryRuleWorld returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWorldRule(), currentNode); }
	 iv_ruleWorld=ruleWorld 
	 { $current=$iv_ruleWorld.current; } 
	 EOF 
;

// Rule World
ruleWorld returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getWorldAccess().getWorldAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWorldAccess().getWorldAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWorldAccess().getGoalsGoalParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_goals_1_0=ruleGoal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWorldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"goals",
	        		lv_goals_1_0, 
	        		"Goal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWorldAccess().getDomainsDomainParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_domains_2_0=ruleDomain		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWorldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"domains",
	        		lv_domains_2_0, 
	        		"Domain", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWorldAccess().getRelationshipsRelationshipParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_relationships_3_0=ruleRelationship		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWorldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"relationships",
	        		lv_relationships_3_0, 
	        		"Relationship", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleGoal
entryRuleGoal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGoalRule(), currentNode); }
	 iv_ruleGoal=ruleGoal 
	 { $current=$iv_ruleGoal.current; } 
	 EOF 
;

// Rule Goal
ruleGoal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getGoalAccess().getSecurityGoalParserRuleCall_0(), currentNode); 
    }
    this_SecurityGoal_0=ruleSecurityGoal
    { 
        $current = $this_SecurityGoal_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getGoalAccess().getRequirementParserRuleCall_1(), currentNode); 
    }
    this_Requirement_1=ruleRequirement
    { 
        $current = $this_Requirement_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getGoalAccess().getAntiRequirementParserRuleCall_2(), currentNode); 
    }
    this_AntiRequirement_2=ruleAntiRequirement
    { 
        $current = $this_AntiRequirement_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSecurityGoal
entryRuleSecurityGoal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSecurityGoalRule(), currentNode); }
	 iv_ruleSecurityGoal=ruleSecurityGoal 
	 { $current=$iv_ruleSecurityGoal.current; } 
	 EOF 
;

// Rule SecurityGoal
ruleSecurityGoal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSecurityGoalAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSecurityGoalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_type_1_0=	'SG' 
    {
        createLeafNode(grammarAccess.getSecurityGoalAccess().getTypeSGKeyword_1_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSecurityGoalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1_0, "SG", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getSecurityGoalAccess().getCommaKeyword_2_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSecurityGoalAccess().getPropertiesPropositionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_properties_3_0=ruleProposition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSecurityGoalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_3_0, 
	        		"Proposition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleRequirement
entryRuleRequirement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRequirementRule(), currentNode); }
	 iv_ruleRequirement=ruleRequirement 
	 { $current=$iv_ruleRequirement.current; } 
	 EOF 
;

// Rule Requirement
ruleRequirement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRequirementAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequirementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_type_1_0=	'R' 
    {
        createLeafNode(grammarAccess.getRequirementAccess().getTypeRKeyword_1_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequirementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1_0, "R", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getRequirementAccess().getCommaKeyword_2_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequirementAccess().getPropertiesPropositionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_properties_3_0=ruleProposition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequirementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_3_0, 
	        		"Proposition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAntiRequirement
entryRuleAntiRequirement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAntiRequirementRule(), currentNode); }
	 iv_ruleAntiRequirement=ruleAntiRequirement 
	 { $current=$iv_ruleAntiRequirement.current; } 
	 EOF 
;

// Rule AntiRequirement
ruleAntiRequirement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAntiRequirementAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAntiRequirementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_type_1_0=	'AR' 
    {
        createLeafNode(grammarAccess.getAntiRequirementAccess().getTypeARKeyword_1_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAntiRequirementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1_0, "AR", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getAntiRequirementAccess().getCommaKeyword_2_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAntiRequirementAccess().getPropertiesPropositionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_properties_3_0=ruleProposition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAntiRequirementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_3_0, 
	        		"Proposition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleDomain
entryRuleDomain returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDomainRule(), currentNode); }
	 iv_ruleDomain=ruleDomain 
	 { $current=$iv_ruleDomain.current; } 
	 EOF 
;

// Rule Domain
ruleDomain returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDomainAccess().getActorParserRuleCall_0(), currentNode); 
    }
    this_Actor_0=ruleActor
    { 
        $current = $this_Actor_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDomainAccess().getActionParserRuleCall_1(), currentNode); 
    }
    this_Action_1=ruleAction
    { 
        $current = $this_Action_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDomainAccess().getAssetParserRuleCall_2(), currentNode); 
    }
    this_Asset_2=ruleAsset
    { 
        $current = $this_Asset_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDomainAccess().getResourceParserRuleCall_3(), currentNode); 
    }
    this_Resource_3=ruleResource
    { 
        $current = $this_Resource_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDomainAccess().getAttackerParserRuleCall_4(), currentNode); 
    }
    this_Attacker_4=ruleAttacker
    { 
        $current = $this_Attacker_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActorRule(), currentNode); }
	 iv_ruleActor=ruleActor 
	 { $current=$iv_ruleActor.current; } 
	 EOF 
;

// Rule Actor
ruleActor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getActorAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_type_1_0=	'Ar' 
    {
        createLeafNode(grammarAccess.getActorAccess().getTypeArKeyword_1_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1_0, "Ar", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getActorAccess().getCommaKeyword_2_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getActorAccess().getPropertiesPropositionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_properties_3_0=ruleProposition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_3_0, 
	        		"Proposition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActionRule(), currentNode); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_type_1_0=	'An' 
    {
        createLeafNode(grammarAccess.getActionAccess().getTypeAnKeyword_1_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1_0, "An", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getActionAccess().getCommaKeyword_2_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getActionAccess().getPropertiesPropositionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_properties_3_0=ruleProposition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_3_0, 
	        		"Proposition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAsset
entryRuleAsset returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssetRule(), currentNode); }
	 iv_ruleAsset=ruleAsset 
	 { $current=$iv_ruleAsset.current; } 
	 EOF 
;

// Rule Asset
ruleAsset returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAssetAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_type_1_0=	'As' 
    {
        createLeafNode(grammarAccess.getAssetAccess().getTypeAsKeyword_1_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1_0, "As", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getAssetAccess().getCommaKeyword_2_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssetAccess().getPropertiesPropositionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_properties_3_0=ruleProposition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_3_0, 
	        		"Proposition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getResourceRule(), currentNode); }
	 iv_ruleResource=ruleResource 
	 { $current=$iv_ruleResource.current; } 
	 EOF 
;

// Rule Resource
ruleResource returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getResourceAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResourceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_type_1_0=	'Re' 
    {
        createLeafNode(grammarAccess.getResourceAccess().getTypeReKeyword_1_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResourceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1_0, "Re", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getResourceAccess().getCommaKeyword_2_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getResourceAccess().getPropertiesPropositionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_properties_3_0=ruleProposition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResourceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_3_0, 
	        		"Proposition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAttacker
entryRuleAttacker returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttackerRule(), currentNode); }
	 iv_ruleAttacker=ruleAttacker 
	 { $current=$iv_ruleAttacker.current; } 
	 EOF 
;

// Rule Attacker
ruleAttacker returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAttackerAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttackerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_type_1_0=	'Ak' 
    {
        createLeafNode(grammarAccess.getAttackerAccess().getTypeAkKeyword_1_0(), "type"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttackerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1_0, "Ak", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getAttackerAccess().getCommaKeyword_2_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttackerAccess().getPropertiesPropositionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_properties_3_0=ruleProposition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttackerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_3_0, 
	        		"Proposition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleProposition
entryRuleProposition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropositionRule(), currentNode); }
	 iv_ruleProposition=ruleProposition 
	 { $current=$iv_ruleProposition.current; } 
	 EOF 
;

// Rule Proposition
ruleProposition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getPropositionAccess().getNameSTRINGTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleRelationship
entryRuleRelationship returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationshipRule(), currentNode); }
	 iv_ruleRelationship=ruleRelationship 
	 { $current=$iv_ruleRelationship.current; } 
	 EOF 
;

// Rule Relationship
ruleRelationship returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getTypeRelTypeEnumRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleRelType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationshipRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"RelType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getRelationshipAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationshipRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRelationshipAccess().getSourceWorldCrossReference_2_0(), "source"); 
	}

)
)	',' 
    {
        createLeafNode(grammarAccess.getRelationshipAccess().getCommaKeyword_3(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationshipRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRelationshipAccess().getTargetWorldCrossReference_4_0(), "target"); 
	}

)
)	')' 
    {
        createLeafNode(grammarAccess.getRelationshipAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Rule RelType
ruleRelType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'carries out' 
	{
        $current = grammarAccess.getRelTypeAccess().getCARRIESOUTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelTypeAccess().getCARRIESOUTEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'delegates' 
	{
        $current = grammarAccess.getRelTypeAccess().getDELEGATESEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelTypeAccess().getDELEGATESEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'fulfils' 
	{
        $current = grammarAccess.getRelTypeAccess().getFULFILSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelTypeAccess().getFULFILSEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'provides' 
	{
        $current = grammarAccess.getRelTypeAccess().getPROVIDESEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelTypeAccess().getPROVIDESEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'trusts' 
	{
        $current = grammarAccess.getRelTypeAccess().getTRUSTSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelTypeAccess().getTRUSTSEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'wants' 
	{
        $current = grammarAccess.getRelTypeAccess().getWANTSEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelTypeAccess().getWANTSEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'damages' 
	{
        $current = grammarAccess.getRelTypeAccess().getDAMAGESEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelTypeAccess().getDAMAGESEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'attacks' 
	{
        $current = grammarAccess.getRelTypeAccess().getATTACKSEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelTypeAccess().getATTACKSEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'argues' 
	{
        $current = grammarAccess.getRelTypeAccess().getARGUESEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelTypeAccess().getARGUESEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'interfaces' 
	{
        $current = grammarAccess.getRelTypeAccess().getINTERFACESEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelTypeAccess().getINTERFACESEnumLiteralDeclaration_9(), null); 
    }
));



RULE_ID : ('#' ~('#')+ '#'|'^'? ('a'..'z'|'A'..'Z'|'_'|'.') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'.')*);

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


