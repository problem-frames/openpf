/*
* generated by Xtext
*/

package eu.securechange.ontology.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class OntologyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SituationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Situation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTimeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTimeIDTerminalRuleCall_0_1_0 = (RuleCall)cTimeAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cWorldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWorldWorldParserRuleCall_1_0 = (RuleCall)cWorldAssignment_1.eContents().get(0);
		
		//Situation:
		//	("model" time=ID ":")? world=World;
		public ParserRule getRule() { return rule; }

		//("model" time=ID ":")? world=World
		public Group getGroup() { return cGroup; }

		//("model" time=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//"model"
		public Keyword getModelKeyword_0_0() { return cModelKeyword_0_0; }

		//time=ID
		public Assignment getTimeAssignment_0_1() { return cTimeAssignment_0_1; }

		//ID
		public RuleCall getTimeIDTerminalRuleCall_0_1_0() { return cTimeIDTerminalRuleCall_0_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//world=World
		public Assignment getWorldAssignment_1() { return cWorldAssignment_1; }

		//World
		public RuleCall getWorldWorldParserRuleCall_1_0() { return cWorldWorldParserRuleCall_1_0; }
	}

	public class WorldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "World");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWorldAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cEntitiesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_1_0_0 = (RuleCall)cEntitiesAssignment_1_0.eContents().get(0);
		private final Assignment cDomainsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDomainsDomainParserRuleCall_1_1_0 = (RuleCall)cDomainsAssignment_1_1.eContents().get(0);
		private final Assignment cRelationshipsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_1_2_0 = (RuleCall)cRelationshipsAssignment_1_2.eContents().get(0);
		
		//World:
		//	{World} (entities+=Entity | domains+=Domain | relationships+=Relationship)*;
		public ParserRule getRule() { return rule; }

		//{World} (entities+=Entity | domains+=Domain | relationships+=Relationship)*
		public Group getGroup() { return cGroup; }

		//{World}
		public Action getWorldAction_0() { return cWorldAction_0; }

		//(entities+=Entity | domains+=Domain | relationships+=Relationship)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//entities+=Entity
		public Assignment getEntitiesAssignment_1_0() { return cEntitiesAssignment_1_0; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_1_0_0() { return cEntitiesEntityParserRuleCall_1_0_0; }

		//domains+=Domain
		public Assignment getDomainsAssignment_1_1() { return cDomainsAssignment_1_1; }

		//Domain
		public RuleCall getDomainsDomainParserRuleCall_1_1_0() { return cDomainsDomainParserRuleCall_1_1_0; }

		//relationships+=Relationship
		public Assignment getRelationshipsAssignment_1_2() { return cRelationshipsAssignment_1_2; }

		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_1_2_0() { return cRelationshipsRelationshipParserRuleCall_1_2_0; }
	}

	public class ThingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Thing");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Thing:
		//	Object | Event;
		public ParserRule getRule() { return rule; }

		//Object | Event
		public Alternatives getAlternatives() { return cAlternatives; }

		//Object
		public RuleCall getObjectParserRuleCall_0() { return cObjectParserRuleCall_0; }

		//Event
		public RuleCall getEventParserRuleCall_1() { return cEventParserRuleCall_1; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Event:
		//	"event" name=ID;
		public ParserRule getRule() { return rule; }

		//"event" name=ID
		public Group getGroup() { return cGroup; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPropositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Object:
		//	Entity | Relationship | Proposition;
		public ParserRule getRule() { return rule; }

		//Entity | Relationship | Proposition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }

		//Relationship
		public RuleCall getRelationshipParserRuleCall_1() { return cRelationshipParserRuleCall_1; }

		//Proposition
		public RuleCall getPropositionParserRuleCall_2() { return cPropositionParserRuleCall_2; }
	}

	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDomainTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesPropositionParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		
		//Domain:
		//	name=ID type=DomainType (","? properties+=Proposition)*;
		public ParserRule getRule() { return rule; }

		//name=ID type=DomainType (","? properties+=Proposition)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type=DomainType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//DomainType
		public RuleCall getTypeDomainTypeEnumRuleCall_1_0() { return cTypeDomainTypeEnumRuleCall_1_0; }

		//(","? properties+=Proposition)*
		public Group getGroup_2() { return cGroup_2; }

		//","?
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//properties+=Proposition
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//Proposition
		public RuleCall getPropertiesPropositionParserRuleCall_2_1_0() { return cPropertiesPropositionParserRuleCall_2_1_0; }
	}

	public class PropositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Proposition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDomainAssumptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequirementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArgumentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Proposition:
		//	DomainAssumption | Requirement | Argument;
		public ParserRule getRule() { return rule; }

		//DomainAssumption | Requirement | Argument
		public Alternatives getAlternatives() { return cAlternatives; }

		//DomainAssumption
		public RuleCall getDomainAssumptionParserRuleCall_0() { return cDomainAssumptionParserRuleCall_0; }

		//Requirement
		public RuleCall getRequirementParserRuleCall_1() { return cRequirementParserRuleCall_1; }

		//Argument
		public RuleCall getArgumentParserRuleCall_2() { return cArgumentParserRuleCall_2; }
	}

	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Requirement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionalRequirementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSecurityRequirementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAntiRequirementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cQualityRequirementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Requirement:
		//	FunctionalRequirement | SecurityRequirement | AntiRequirement | QualityRequirement;
		public ParserRule getRule() { return rule; }

		//FunctionalRequirement | SecurityRequirement | AntiRequirement | QualityRequirement
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionalRequirement
		public RuleCall getFunctionalRequirementParserRuleCall_0() { return cFunctionalRequirementParserRuleCall_0; }

		//SecurityRequirement
		public RuleCall getSecurityRequirementParserRuleCall_1() { return cSecurityRequirementParserRuleCall_1; }

		//AntiRequirement
		public RuleCall getAntiRequirementParserRuleCall_2() { return cAntiRequirementParserRuleCall_2; }

		//QualityRequirement
		public RuleCall getQualityRequirementParserRuleCall_3() { return cQualityRequirementParserRuleCall_3; }
	}

	public class DomainAssumptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainAssumption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DomainAssumption:
		//	"DA" name=ID;
		public ParserRule getRule() { return rule; }

		//"DA" name=ID
		public Group getGroup() { return cGroup; }

		//"DA"
		public Keyword getDAKeyword_0() { return cDAKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class FunctionalRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionalRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FunctionalRequirement:
		//	"FR" name=ID;
		public ParserRule getRule() { return rule; }

		//"FR" name=ID
		public Group getGroup() { return cGroup; }

		//"FR"
		public Keyword getFRKeyword_0() { return cFRKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class SecurityRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SecurityRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SecurityRequirement:
		//	"SR" name=ID;
		public ParserRule getRule() { return rule; }

		//"SR" name=ID
		public Group getGroup() { return cGroup; }

		//"SR"
		public Keyword getSRKeyword_0() { return cSRKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AntiRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AntiRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AntiRequirement:
		//	"AR" name=ID;
		public ParserRule getRule() { return rule; }

		//"AR" name=ID
		public Group getGroup() { return cGroup; }

		//"AR"
		public Keyword getARKeyword_0() { return cARKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class QualityRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualityRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//QualityRequirement:
		//	"Q" name=ID;
		public ParserRule getRule() { return rule; }

		//"Q" name=ID
		public Group getGroup() { return cGroup; }

		//"Q"
		public Keyword getQKeyword_0() { return cQKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Argument:
		//	"A" name=ID;
		public ParserRule getRule() { return rule; }

		//"A" name=ID
		public Group getGroup() { return cGroup; }

		//"A"
		public Keyword getAKeyword_0() { return cAKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cResourceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Entity:
		//	Actor | Process | Resource;
		public ParserRule getRule() { return rule; }

		//Actor | Process | Resource
		public Alternatives getAlternatives() { return cAlternatives; }

		//Actor
		public RuleCall getActorParserRuleCall_0() { return cActorParserRuleCall_0; }

		//Process
		public RuleCall getProcessParserRuleCall_1() { return cProcessParserRuleCall_1; }

		//Resource
		public RuleCall getResourceParserRuleCall_2() { return cResourceParserRuleCall_2; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStakeholderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttackerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Actor:
		//	Stakeholder | Attacker;
		public ParserRule getRule() { return rule; }

		//Stakeholder | Attacker
		public Alternatives getAlternatives() { return cAlternatives; }

		//Stakeholder
		public RuleCall getStakeholderParserRuleCall_0() { return cStakeholderParserRuleCall_0; }

		//Attacker
		public RuleCall getAttackerParserRuleCall_1() { return cAttackerParserRuleCall_1; }
	}

	public class StakeholderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stakeholder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Stakeholder:
		//	"actor" name=ID;
		public ParserRule getRule() { return rule; }

		//"actor" name=ID
		public Group getGroup() { return cGroup; }

		//"actor"
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AttackerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attacker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttackerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Attacker:
		//	"attacker" name=ID;
		public ParserRule getRule() { return rule; }

		//"attacker" name=ID
		public Group getGroup() { return cGroup; }

		//"attacker"
		public Keyword getAttackerKeyword_0() { return cAttackerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Process");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNaturalProcessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHumanActivityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Process:
		//	NaturalProcess | HumanActivity;
		public ParserRule getRule() { return rule; }

		//NaturalProcess | HumanActivity
		public Alternatives getAlternatives() { return cAlternatives; }

		//NaturalProcess
		public RuleCall getNaturalProcessParserRuleCall_0() { return cNaturalProcessParserRuleCall_0; }

		//HumanActivity
		public RuleCall getHumanActivityParserRuleCall_1() { return cHumanActivityParserRuleCall_1; }
	}

	public class NaturalProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NaturalProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActivitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cActivitiesProcessCrossReference_2_1_0 = (CrossReference)cActivitiesAssignment_2_1.eContents().get(0);
		private final RuleCall cActivitiesProcessIDTerminalRuleCall_2_1_0_1 = (RuleCall)cActivitiesProcessCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//NaturalProcess:
		//	"process" name=ID ("{" activities+=[Process]* "}")?;
		public ParserRule getRule() { return rule; }

		//"process" name=ID ("{" activities+=[Process]* "}")?
		public Group getGroup() { return cGroup; }

		//"process"
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" activities+=[Process]* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//activities+=[Process]*
		public Assignment getActivitiesAssignment_2_1() { return cActivitiesAssignment_2_1; }

		//[Process]
		public CrossReference getActivitiesProcessCrossReference_2_1_0() { return cActivitiesProcessCrossReference_2_1_0; }

		//ID
		public RuleCall getActivitiesProcessIDTerminalRuleCall_2_1_0_1() { return cActivitiesProcessIDTerminalRuleCall_2_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class HumanActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HumanActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActivityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsActionParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		
		//HumanActivity:
		//	{Activity} "activity" name=ID actions+=Action*;
		public ParserRule getRule() { return rule; }

		//{Activity} "activity" name=ID actions+=Action*
		public Group getGroup() { return cGroup; }

		//{Activity}
		public Action getActivityAction_0() { return cActivityAction_0; }

		//"activity"
		public Keyword getActivityKeyword_1() { return cActivityKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//actions+=Action*
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }

		//Action
		public RuleCall getActionsActionParserRuleCall_3_0() { return cActionsActionParserRuleCall_3_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Action:
		//	"action" name=ID;
		public ParserRule getRule() { return rule; }

		//"action" name=ID
		public Group getGroup() { return cGroup; }

		//"action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Resource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cResourceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cAssetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Resource:
		//	"resource" name=ID | Asset;
		public ParserRule getRule() { return rule; }

		//"resource" name=ID | Asset
		public Alternatives getAlternatives() { return cAlternatives; }

		//"resource" name=ID
		public Group getGroup_0() { return cGroup_0; }

		//"resource"
		public Keyword getResourceKeyword_0_0() { return cResourceKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//Asset
		public RuleCall getAssetParserRuleCall_1() { return cAssetParserRuleCall_1; }
	}

	public class AssetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Asset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Asset:
		//	"asset" name=ID;
		public ParserRule getRule() { return rule; }

		//"asset" name=ID
		public Group getGroup() { return cGroup; }

		//"asset"
		public Keyword getAssetKeyword_0() { return cAssetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationship");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWantsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDecomposesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTrustsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDelegatesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cContributesParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFulfilsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cProvidesParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cConsumesParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cExploitsParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDamagesParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cAttacksParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cArguesParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Relationship:
		//	Wants | Does | Decomposes | Trusts | Delegates | Contributes | Fulfils | Provides | Consumes | Exploits | Damages |
		//	Attacks | Argues;
		public ParserRule getRule() { return rule; }

		//Wants | Does | Decomposes | Trusts | Delegates | Contributes | Fulfils | Provides | Consumes | Exploits | Damages |
		//Attacks | Argues
		public Alternatives getAlternatives() { return cAlternatives; }

		//Wants
		public RuleCall getWantsParserRuleCall_0() { return cWantsParserRuleCall_0; }

		//Does
		public RuleCall getDoesParserRuleCall_1() { return cDoesParserRuleCall_1; }

		//Decomposes
		public RuleCall getDecomposesParserRuleCall_2() { return cDecomposesParserRuleCall_2; }

		//Trusts
		public RuleCall getTrustsParserRuleCall_3() { return cTrustsParserRuleCall_3; }

		//Delegates
		public RuleCall getDelegatesParserRuleCall_4() { return cDelegatesParserRuleCall_4; }

		//Contributes
		public RuleCall getContributesParserRuleCall_5() { return cContributesParserRuleCall_5; }

		//Fulfils
		public RuleCall getFulfilsParserRuleCall_6() { return cFulfilsParserRuleCall_6; }

		//Provides
		public RuleCall getProvidesParserRuleCall_7() { return cProvidesParserRuleCall_7; }

		//Consumes
		public RuleCall getConsumesParserRuleCall_8() { return cConsumesParserRuleCall_8; }

		//Exploits
		public RuleCall getExploitsParserRuleCall_9() { return cExploitsParserRuleCall_9; }

		//Damages
		public RuleCall getDamagesParserRuleCall_10() { return cDamagesParserRuleCall_10; }

		//Attacks
		public RuleCall getAttacksParserRuleCall_11() { return cAttacksParserRuleCall_11; }

		//Argues
		public RuleCall getArguesParserRuleCall_12() { return cArguesParserRuleCall_12; }
	}

	public class WantsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Wants");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeWantsKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceActorCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceActorIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceActorCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetRequirementCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetRequirementIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetRequirementCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Wants:
		//	type="wants" "(" source=[Actor] "," target=[Requirement] ")";
		public ParserRule getRule() { return rule; }

		//type="wants" "(" source=[Actor] "," target=[Requirement] ")"
		public Group getGroup() { return cGroup; }

		//type="wants"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"wants"
		public Keyword getTypeWantsKeyword_0_0() { return cTypeWantsKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Actor]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Actor]
		public CrossReference getSourceActorCrossReference_2_0() { return cSourceActorCrossReference_2_0; }

		//ID
		public RuleCall getSourceActorIDTerminalRuleCall_2_0_1() { return cSourceActorIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Requirement]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Requirement]
		public CrossReference getTargetRequirementCrossReference_4_0() { return cTargetRequirementCrossReference_4_0; }

		//ID
		public RuleCall getTargetRequirementIDTerminalRuleCall_4_0_1() { return cTargetRequirementIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DoesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Does");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeDoesKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceActorCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceActorIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceActorCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetActivityCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetActivityIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetActivityCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Does:
		//	type="does" "(" source=[Actor] "," target=[Activity] ")";
		public ParserRule getRule() { return rule; }

		//type="does" "(" source=[Actor] "," target=[Activity] ")"
		public Group getGroup() { return cGroup; }

		//type="does"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"does"
		public Keyword getTypeDoesKeyword_0_0() { return cTypeDoesKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Actor]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Actor]
		public CrossReference getSourceActorCrossReference_2_0() { return cSourceActorCrossReference_2_0; }

		//ID
		public RuleCall getSourceActorIDTerminalRuleCall_2_0_1() { return cSourceActorIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Activity]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Activity]
		public CrossReference getTargetActivityCrossReference_4_0() { return cTargetActivityCrossReference_4_0; }

		//ID
		public RuleCall getTargetActivityIDTerminalRuleCall_4_0_1() { return cTargetActivityIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DecomposesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decomposes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDecomposesTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceRequirementCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceRequirementIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceRequirementCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetRequirementCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetRequirementIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetRequirementCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Decomposes:
		//	type=DecomposesType "(" source=[Requirement] "," target=[Requirement] ")";
		public ParserRule getRule() { return rule; }

		//type=DecomposesType "(" source=[Requirement] "," target=[Requirement] ")"
		public Group getGroup() { return cGroup; }

		//type=DecomposesType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DecomposesType
		public RuleCall getTypeDecomposesTypeEnumRuleCall_0_0() { return cTypeDecomposesTypeEnumRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Requirement]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Requirement]
		public CrossReference getSourceRequirementCrossReference_2_0() { return cSourceRequirementCrossReference_2_0; }

		//ID
		public RuleCall getSourceRequirementIDTerminalRuleCall_2_0_1() { return cSourceRequirementIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Requirement]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Requirement]
		public CrossReference getTargetRequirementCrossReference_4_0() { return cTargetRequirementCrossReference_4_0; }

		//ID
		public RuleCall getTargetRequirementIDTerminalRuleCall_4_0_1() { return cTargetRequirementIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class TrustsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trusts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeTrustsKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceActorCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceActorIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceActorCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetActorCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetActorIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetActorCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEntityAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cEntityThingCrossReference_5_1_0 = (CrossReference)cEntityAssignment_5_1.eContents().get(0);
		private final RuleCall cEntityThingIDTerminalRuleCall_5_1_0_1 = (RuleCall)cEntityThingCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Trusts:
		//	type="trusts" "(" source=[Actor] "," target=[Actor] ("," entity=[Thing])? ")";
		public ParserRule getRule() { return rule; }

		//type="trusts" "(" source=[Actor] "," target=[Actor] ("," entity=[Thing])? ")"
		public Group getGroup() { return cGroup; }

		//type="trusts"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"trusts"
		public Keyword getTypeTrustsKeyword_0_0() { return cTypeTrustsKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Actor]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Actor]
		public CrossReference getSourceActorCrossReference_2_0() { return cSourceActorCrossReference_2_0; }

		//ID
		public RuleCall getSourceActorIDTerminalRuleCall_2_0_1() { return cSourceActorIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Actor]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Actor]
		public CrossReference getTargetActorCrossReference_4_0() { return cTargetActorCrossReference_4_0; }

		//ID
		public RuleCall getTargetActorIDTerminalRuleCall_4_0_1() { return cTargetActorIDTerminalRuleCall_4_0_1; }

		//("," entity=[Thing])?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//entity=[Thing]
		public Assignment getEntityAssignment_5_1() { return cEntityAssignment_5_1; }

		//[Thing]
		public CrossReference getEntityThingCrossReference_5_1_0() { return cEntityThingCrossReference_5_1_0; }

		//ID
		public RuleCall getEntityThingIDTerminalRuleCall_5_1_0_1() { return cEntityThingIDTerminalRuleCall_5_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class DelegatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Delegates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeDelegatesKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceActorCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceActorIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceActorCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetActorCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetActorIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetActorCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEntityAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cEntityThingCrossReference_5_1_0 = (CrossReference)cEntityAssignment_5_1.eContents().get(0);
		private final RuleCall cEntityThingIDTerminalRuleCall_5_1_0_1 = (RuleCall)cEntityThingCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Delegates:
		//	type="delegates" "(" source=[Actor] "," target=[Actor] ("," entity=[Thing])? ")";
		public ParserRule getRule() { return rule; }

		//type="delegates" "(" source=[Actor] "," target=[Actor] ("," entity=[Thing])? ")"
		public Group getGroup() { return cGroup; }

		//type="delegates"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"delegates"
		public Keyword getTypeDelegatesKeyword_0_0() { return cTypeDelegatesKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Actor]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Actor]
		public CrossReference getSourceActorCrossReference_2_0() { return cSourceActorCrossReference_2_0; }

		//ID
		public RuleCall getSourceActorIDTerminalRuleCall_2_0_1() { return cSourceActorIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Actor]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Actor]
		public CrossReference getTargetActorCrossReference_4_0() { return cTargetActorCrossReference_4_0; }

		//ID
		public RuleCall getTargetActorIDTerminalRuleCall_4_0_1() { return cTargetActorIDTerminalRuleCall_4_0_1; }

		//("," entity=[Thing])?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//entity=[Thing]
		public Assignment getEntityAssignment_5_1() { return cEntityAssignment_5_1; }

		//[Thing]
		public CrossReference getEntityThingCrossReference_5_1_0() { return cEntityThingCrossReference_5_1_0; }

		//ID
		public RuleCall getEntityThingIDTerminalRuleCall_5_1_0_1() { return cEntityThingIDTerminalRuleCall_5_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ContributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Contributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeContributesTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceRequirementCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceRequirementIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceRequirementCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetRequirementCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetRequirementIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetRequirementCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Contributes:
		//	type=ContributesType "(" source=[Requirement] "," target=[Requirement] ")";
		public ParserRule getRule() { return rule; }

		//type=ContributesType "(" source=[Requirement] "," target=[Requirement] ")"
		public Group getGroup() { return cGroup; }

		//type=ContributesType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ContributesType
		public RuleCall getTypeContributesTypeEnumRuleCall_0_0() { return cTypeContributesTypeEnumRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Requirement]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Requirement]
		public CrossReference getSourceRequirementCrossReference_2_0() { return cSourceRequirementCrossReference_2_0; }

		//ID
		public RuleCall getSourceRequirementIDTerminalRuleCall_2_0_1() { return cSourceRequirementIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Requirement]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Requirement]
		public CrossReference getTargetRequirementCrossReference_4_0() { return cTargetRequirementCrossReference_4_0; }

		//ID
		public RuleCall getTargetRequirementIDTerminalRuleCall_4_0_1() { return cTargetRequirementIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class FulfilsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fulfils");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeFulfilsTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceProcessCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceProcessIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceProcessCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetPropositionCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetPropositionIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetPropositionCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Fulfils:
		//	type=FulfilsType "(" source=[Process] "," target=[Proposition] ")";
		public ParserRule getRule() { return rule; }

		//type=FulfilsType "(" source=[Process] "," target=[Proposition] ")"
		public Group getGroup() { return cGroup; }

		//type=FulfilsType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//FulfilsType
		public RuleCall getTypeFulfilsTypeEnumRuleCall_0_0() { return cTypeFulfilsTypeEnumRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Process]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Process]
		public CrossReference getSourceProcessCrossReference_2_0() { return cSourceProcessCrossReference_2_0; }

		//ID
		public RuleCall getSourceProcessIDTerminalRuleCall_2_0_1() { return cSourceProcessIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Proposition]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Proposition]
		public CrossReference getTargetPropositionCrossReference_4_0() { return cTargetPropositionCrossReference_4_0; }

		//ID
		public RuleCall getTargetPropositionIDTerminalRuleCall_4_0_1() { return cTargetPropositionIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ProvidesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Provides");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeProvidesKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cSourceProcessCrossReference_2_0_0 = (CrossReference)cSourceAssignment_2_0.eContents().get(0);
		private final RuleCall cSourceProcessIDTerminalRuleCall_2_0_0_1 = (RuleCall)cSourceProcessCrossReference_2_0_0.eContents().get(1);
		private final Assignment cSourceAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cSourceActorCrossReference_2_1_0 = (CrossReference)cSourceAssignment_2_1.eContents().get(0);
		private final RuleCall cSourceActorIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSourceActorCrossReference_2_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetResourceCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetResourceIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetResourceCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Provides:
		//	type="provides" "(" (source=[Process] | source=[Actor]) "," target=[Resource] ")";
		public ParserRule getRule() { return rule; }

		//type="provides" "(" (source=[Process] | source=[Actor]) "," target=[Resource] ")"
		public Group getGroup() { return cGroup; }

		//type="provides"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"provides"
		public Keyword getTypeProvidesKeyword_0_0() { return cTypeProvidesKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Process] | source=[Actor]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//source=[Process]
		public Assignment getSourceAssignment_2_0() { return cSourceAssignment_2_0; }

		//[Process]
		public CrossReference getSourceProcessCrossReference_2_0_0() { return cSourceProcessCrossReference_2_0_0; }

		//ID
		public RuleCall getSourceProcessIDTerminalRuleCall_2_0_0_1() { return cSourceProcessIDTerminalRuleCall_2_0_0_1; }

		//source=[Actor]
		public Assignment getSourceAssignment_2_1() { return cSourceAssignment_2_1; }

		//[Actor]
		public CrossReference getSourceActorCrossReference_2_1_0() { return cSourceActorCrossReference_2_1_0; }

		//ID
		public RuleCall getSourceActorIDTerminalRuleCall_2_1_0_1() { return cSourceActorIDTerminalRuleCall_2_1_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Resource]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Resource]
		public CrossReference getTargetResourceCrossReference_4_0() { return cTargetResourceCrossReference_4_0; }

		//ID
		public RuleCall getTargetResourceIDTerminalRuleCall_4_0_1() { return cTargetResourceIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ConsumesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Consumes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeConsumesKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cSourceProcessCrossReference_2_0_0 = (CrossReference)cSourceAssignment_2_0.eContents().get(0);
		private final RuleCall cSourceProcessIDTerminalRuleCall_2_0_0_1 = (RuleCall)cSourceProcessCrossReference_2_0_0.eContents().get(1);
		private final Assignment cSourceAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cSourceActorCrossReference_2_1_0 = (CrossReference)cSourceAssignment_2_1.eContents().get(0);
		private final RuleCall cSourceActorIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSourceActorCrossReference_2_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetResourceCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetResourceIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetResourceCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Consumes:
		//	type="consumes" "(" (source=[Process] | source=[Actor]) "," target=[Resource] ")";
		public ParserRule getRule() { return rule; }

		//type="consumes" "(" (source=[Process] | source=[Actor]) "," target=[Resource] ")"
		public Group getGroup() { return cGroup; }

		//type="consumes"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"consumes"
		public Keyword getTypeConsumesKeyword_0_0() { return cTypeConsumesKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Process] | source=[Actor]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//source=[Process]
		public Assignment getSourceAssignment_2_0() { return cSourceAssignment_2_0; }

		//[Process]
		public CrossReference getSourceProcessCrossReference_2_0_0() { return cSourceProcessCrossReference_2_0_0; }

		//ID
		public RuleCall getSourceProcessIDTerminalRuleCall_2_0_0_1() { return cSourceProcessIDTerminalRuleCall_2_0_0_1; }

		//source=[Actor]
		public Assignment getSourceAssignment_2_1() { return cSourceAssignment_2_1; }

		//[Actor]
		public CrossReference getSourceActorCrossReference_2_1_0() { return cSourceActorCrossReference_2_1_0; }

		//ID
		public RuleCall getSourceActorIDTerminalRuleCall_2_1_0_1() { return cSourceActorIDTerminalRuleCall_2_1_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Resource]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Resource]
		public CrossReference getTargetResourceCrossReference_4_0() { return cTargetResourceCrossReference_4_0; }

		//ID
		public RuleCall getTargetResourceIDTerminalRuleCall_4_0_1() { return cTargetResourceIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ExploitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exploits");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeExploitsKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceAttackerCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceAttackerIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceAttackerCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetProcessCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetProcessIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetProcessCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Exploits:
		//	type="exploits" "(" source=[Attacker] "," target=[Process] ")";
		public ParserRule getRule() { return rule; }

		//type="exploits" "(" source=[Attacker] "," target=[Process] ")"
		public Group getGroup() { return cGroup; }

		//type="exploits"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"exploits"
		public Keyword getTypeExploitsKeyword_0_0() { return cTypeExploitsKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Attacker]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Attacker]
		public CrossReference getSourceAttackerCrossReference_2_0() { return cSourceAttackerCrossReference_2_0; }

		//ID
		public RuleCall getSourceAttackerIDTerminalRuleCall_2_0_1() { return cSourceAttackerIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Process]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Process]
		public CrossReference getTargetProcessCrossReference_4_0() { return cTargetProcessCrossReference_4_0; }

		//ID
		public RuleCall getTargetProcessIDTerminalRuleCall_4_0_1() { return cTargetProcessIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DamagesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Damages");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeDamagesKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceAttackerCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceAttackerIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceAttackerCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetAssetCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetAssetIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetAssetCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Damages:
		//	type="damages" "(" source=[Attacker] "," target=[Asset] ")";
		public ParserRule getRule() { return rule; }

		//type="damages" "(" source=[Attacker] "," target=[Asset] ")"
		public Group getGroup() { return cGroup; }

		//type="damages"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"damages"
		public Keyword getTypeDamagesKeyword_0_0() { return cTypeDamagesKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Attacker]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Attacker]
		public CrossReference getSourceAttackerCrossReference_2_0() { return cSourceAttackerCrossReference_2_0; }

		//ID
		public RuleCall getSourceAttackerIDTerminalRuleCall_2_0_1() { return cSourceAttackerIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Asset]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Asset]
		public CrossReference getTargetAssetCrossReference_4_0() { return cTargetAssetCrossReference_4_0; }

		//ID
		public RuleCall getTargetAssetIDTerminalRuleCall_4_0_1() { return cTargetAssetIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class AttacksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attacks");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeAttacksKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceAttackerCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceAttackerIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceAttackerCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetProcessCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetProcessIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetProcessCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Attacks:
		//	type="attacks" "(" source=[Attacker] "," target=[Process] ")";
		public ParserRule getRule() { return rule; }

		//type="attacks" "(" source=[Attacker] "," target=[Process] ")"
		public Group getGroup() { return cGroup; }

		//type="attacks"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"attacks"
		public Keyword getTypeAttacksKeyword_0_0() { return cTypeAttacksKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Attacker]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Attacker]
		public CrossReference getSourceAttackerCrossReference_2_0() { return cSourceAttackerCrossReference_2_0; }

		//ID
		public RuleCall getSourceAttackerIDTerminalRuleCall_2_0_1() { return cSourceAttackerIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Process]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Process]
		public CrossReference getTargetProcessCrossReference_4_0() { return cTargetProcessCrossReference_4_0; }

		//ID
		public RuleCall getTargetProcessIDTerminalRuleCall_4_0_1() { return cTargetProcessIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ArguesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeArguesKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourcePropositionCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourcePropositionIDTerminalRuleCall_2_0_1 = (RuleCall)cSourcePropositionCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetPropositionCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetPropositionIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetPropositionCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Argues:
		//	type="argues" "(" source=[Proposition] "," target=[Proposition] ")";
		public ParserRule getRule() { return rule; }

		//type="argues" "(" source=[Proposition] "," target=[Proposition] ")"
		public Group getGroup() { return cGroup; }

		//type="argues"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"argues"
		public Keyword getTypeArguesKeyword_0_0() { return cTypeArguesKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Proposition]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Proposition]
		public CrossReference getSourcePropositionCrossReference_2_0() { return cSourcePropositionCrossReference_2_0; }

		//ID
		public RuleCall getSourcePropositionIDTerminalRuleCall_2_0_1() { return cSourcePropositionIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Proposition]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Proposition]
		public CrossReference getTargetPropositionCrossReference_4_0() { return cTargetPropositionCrossReference_4_0; }

		//ID
		public RuleCall getTargetPropositionIDTerminalRuleCall_4_0_1() { return cTargetPropositionIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	
	
	public class DomainTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DomainType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSpecificationEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSpecificationSKeyword_0_0 = (Keyword)cSpecificationEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRequirementEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRequirementRKeyword_1_0 = (Keyword)cRequirementEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWorldEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWorldWKeyword_2_0 = (Keyword)cWorldEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DomainType:
		//	Specification="S" | Requirement="R" | World="W";
		public EnumRule getRule() { return rule; }

		//Specification="S" | Requirement="R" | World="W"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Specification="S"
		public EnumLiteralDeclaration getSpecificationEnumLiteralDeclaration_0() { return cSpecificationEnumLiteralDeclaration_0; }

		//"S"
		public Keyword getSpecificationSKeyword_0_0() { return cSpecificationSKeyword_0_0; }

		//Requirement="R"
		public EnumLiteralDeclaration getRequirementEnumLiteralDeclaration_1() { return cRequirementEnumLiteralDeclaration_1; }

		//"R"
		public Keyword getRequirementRKeyword_1_0() { return cRequirementRKeyword_1_0; }

		//World="W"
		public EnumLiteralDeclaration getWorldEnumLiteralDeclaration_2() { return cWorldEnumLiteralDeclaration_2; }

		//"W"
		public Keyword getWorldWKeyword_2_0() { return cWorldWKeyword_2_0; }
	}

	public class DecomposesTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DecomposesType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAndKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOROrKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DecomposesType:
		//	AND="and" | OR="or";
		public EnumRule getRule() { return rule; }

		//AND="and" | OR="or"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }

		//"and"
		public Keyword getANDAndKeyword_0_0() { return cANDAndKeyword_0_0; }

		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }

		//"or"
		public Keyword getOROrKeyword_1_0() { return cOROrKeyword_1_0; }
	}

	public class ContributesTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ContributesType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHURTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHURTHyphenMinusKeyword_0_0 = (Keyword)cHURTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHELPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHELPPlusSignKeyword_1_0 = (Keyword)cHELPEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBREAKEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBREAKHyphenMinusHyphenMinusKeyword_2_0 = (Keyword)cBREAKEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMAKEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMAKEPlusSignPlusSignKeyword_3_0 = (Keyword)cMAKEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ContributesType:
		//	HURT="-" | HELP="+" | BREAK="--" | MAKE="++";
		public EnumRule getRule() { return rule; }

		//HURT="-" | HELP="+" | BREAK="--" | MAKE="++"
		public Alternatives getAlternatives() { return cAlternatives; }

		//HURT="-"
		public EnumLiteralDeclaration getHURTEnumLiteralDeclaration_0() { return cHURTEnumLiteralDeclaration_0; }

		//"-"
		public Keyword getHURTHyphenMinusKeyword_0_0() { return cHURTHyphenMinusKeyword_0_0; }

		//HELP="+"
		public EnumLiteralDeclaration getHELPEnumLiteralDeclaration_1() { return cHELPEnumLiteralDeclaration_1; }

		//"+"
		public Keyword getHELPPlusSignKeyword_1_0() { return cHELPPlusSignKeyword_1_0; }

		//BREAK="--"
		public EnumLiteralDeclaration getBREAKEnumLiteralDeclaration_2() { return cBREAKEnumLiteralDeclaration_2; }

		//"--"
		public Keyword getBREAKHyphenMinusHyphenMinusKeyword_2_0() { return cBREAKHyphenMinusHyphenMinusKeyword_2_0; }

		//MAKE="++"
		public EnumLiteralDeclaration getMAKEEnumLiteralDeclaration_3() { return cMAKEEnumLiteralDeclaration_3; }

		//"++"
		public Keyword getMAKEPlusSignPlusSignKeyword_3_0() { return cMAKEPlusSignPlusSignKeyword_3_0; }
	}

	public class FulfilsTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FulfilsType");
		private final EnumLiteralDeclaration cFulfilsEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cFulfilsFulfilsKeyword_0 = (Keyword)cFulfilsEnumLiteralDeclaration.eContents().get(0);
		
		//enum FulfilsType:
		//	Fulfils="fulfils";
		public EnumRule getRule() { return rule; }

		//Fulfils="fulfils"
		public EnumLiteralDeclaration getFulfilsEnumLiteralDeclaration() { return cFulfilsEnumLiteralDeclaration; }

		//"fulfils"
		public Keyword getFulfilsFulfilsKeyword_0() { return cFulfilsFulfilsKeyword_0; }
	}
	
	private SituationElements pSituation;
	private WorldElements pWorld;
	private ThingElements pThing;
	private EventElements pEvent;
	private ObjectElements pObject;
	private DomainElements pDomain;
	private DomainTypeElements unknownRuleDomainType;
	private PropositionElements pProposition;
	private RequirementElements pRequirement;
	private DomainAssumptionElements pDomainAssumption;
	private FunctionalRequirementElements pFunctionalRequirement;
	private SecurityRequirementElements pSecurityRequirement;
	private AntiRequirementElements pAntiRequirement;
	private QualityRequirementElements pQualityRequirement;
	private ArgumentElements pArgument;
	private EntityElements pEntity;
	private ActorElements pActor;
	private StakeholderElements pStakeholder;
	private AttackerElements pAttacker;
	private ProcessElements pProcess;
	private NaturalProcessElements pNaturalProcess;
	private HumanActivityElements pHumanActivity;
	private ActionElements pAction;
	private ResourceElements pResource;
	private AssetElements pAsset;
	private RelationshipElements pRelationship;
	private WantsElements pWants;
	private DoesElements pDoes;
	private DecomposesElements pDecomposes;
	private DecomposesTypeElements unknownRuleDecomposesType;
	private TrustsElements pTrusts;
	private DelegatesElements pDelegates;
	private ContributesElements pContributes;
	private ContributesTypeElements unknownRuleContributesType;
	private FulfilsElements pFulfils;
	private FulfilsTypeElements unknownRuleFulfilsType;
	private ProvidesElements pProvides;
	private ConsumesElements pConsumes;
	private ExploitsElements pExploits;
	private DamagesElements pDamages;
	private AttacksElements pAttacks;
	private ArguesElements pArgues;
	private TerminalRule tID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public OntologyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Situation:
	//	("model" time=ID ":")? world=World;
	public SituationElements getSituationAccess() {
		return (pSituation != null) ? pSituation : (pSituation = new SituationElements());
	}
	
	public ParserRule getSituationRule() {
		return getSituationAccess().getRule();
	}

	//World:
	//	{World} (entities+=Entity | domains+=Domain | relationships+=Relationship)*;
	public WorldElements getWorldAccess() {
		return (pWorld != null) ? pWorld : (pWorld = new WorldElements());
	}
	
	public ParserRule getWorldRule() {
		return getWorldAccess().getRule();
	}

	//Thing:
	//	Object | Event;
	public ThingElements getThingAccess() {
		return (pThing != null) ? pThing : (pThing = new ThingElements());
	}
	
	public ParserRule getThingRule() {
		return getThingAccess().getRule();
	}

	//Event:
	//	"event" name=ID;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Object:
	//	Entity | Relationship | Proposition;
	public ObjectElements getObjectAccess() {
		return (pObject != null) ? pObject : (pObject = new ObjectElements());
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}

	//Domain:
	//	name=ID type=DomainType (","? properties+=Proposition)*;
	public DomainElements getDomainAccess() {
		return (pDomain != null) ? pDomain : (pDomain = new DomainElements());
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}

	//enum DomainType:
	//	Specification="S" | Requirement="R" | World="W";
	public DomainTypeElements getDomainTypeAccess() {
		return (unknownRuleDomainType != null) ? unknownRuleDomainType : (unknownRuleDomainType = new DomainTypeElements());
	}
	
	public EnumRule getDomainTypeRule() {
		return getDomainTypeAccess().getRule();
	}

	//Proposition:
	//	DomainAssumption | Requirement | Argument;
	public PropositionElements getPropositionAccess() {
		return (pProposition != null) ? pProposition : (pProposition = new PropositionElements());
	}
	
	public ParserRule getPropositionRule() {
		return getPropositionAccess().getRule();
	}

	//Requirement:
	//	FunctionalRequirement | SecurityRequirement | AntiRequirement | QualityRequirement;
	public RequirementElements getRequirementAccess() {
		return (pRequirement != null) ? pRequirement : (pRequirement = new RequirementElements());
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}

	//DomainAssumption:
	//	"DA" name=ID;
	public DomainAssumptionElements getDomainAssumptionAccess() {
		return (pDomainAssumption != null) ? pDomainAssumption : (pDomainAssumption = new DomainAssumptionElements());
	}
	
	public ParserRule getDomainAssumptionRule() {
		return getDomainAssumptionAccess().getRule();
	}

	//FunctionalRequirement:
	//	"FR" name=ID;
	public FunctionalRequirementElements getFunctionalRequirementAccess() {
		return (pFunctionalRequirement != null) ? pFunctionalRequirement : (pFunctionalRequirement = new FunctionalRequirementElements());
	}
	
	public ParserRule getFunctionalRequirementRule() {
		return getFunctionalRequirementAccess().getRule();
	}

	//SecurityRequirement:
	//	"SR" name=ID;
	public SecurityRequirementElements getSecurityRequirementAccess() {
		return (pSecurityRequirement != null) ? pSecurityRequirement : (pSecurityRequirement = new SecurityRequirementElements());
	}
	
	public ParserRule getSecurityRequirementRule() {
		return getSecurityRequirementAccess().getRule();
	}

	//AntiRequirement:
	//	"AR" name=ID;
	public AntiRequirementElements getAntiRequirementAccess() {
		return (pAntiRequirement != null) ? pAntiRequirement : (pAntiRequirement = new AntiRequirementElements());
	}
	
	public ParserRule getAntiRequirementRule() {
		return getAntiRequirementAccess().getRule();
	}

	//QualityRequirement:
	//	"Q" name=ID;
	public QualityRequirementElements getQualityRequirementAccess() {
		return (pQualityRequirement != null) ? pQualityRequirement : (pQualityRequirement = new QualityRequirementElements());
	}
	
	public ParserRule getQualityRequirementRule() {
		return getQualityRequirementAccess().getRule();
	}

	//Argument:
	//	"A" name=ID;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//Entity:
	//	Actor | Process | Resource;
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Actor:
	//	Stakeholder | Attacker;
	public ActorElements getActorAccess() {
		return (pActor != null) ? pActor : (pActor = new ActorElements());
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//Stakeholder:
	//	"actor" name=ID;
	public StakeholderElements getStakeholderAccess() {
		return (pStakeholder != null) ? pStakeholder : (pStakeholder = new StakeholderElements());
	}
	
	public ParserRule getStakeholderRule() {
		return getStakeholderAccess().getRule();
	}

	//Attacker:
	//	"attacker" name=ID;
	public AttackerElements getAttackerAccess() {
		return (pAttacker != null) ? pAttacker : (pAttacker = new AttackerElements());
	}
	
	public ParserRule getAttackerRule() {
		return getAttackerAccess().getRule();
	}

	//Process:
	//	NaturalProcess | HumanActivity;
	public ProcessElements getProcessAccess() {
		return (pProcess != null) ? pProcess : (pProcess = new ProcessElements());
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}

	//NaturalProcess:
	//	"process" name=ID ("{" activities+=[Process]* "}")?;
	public NaturalProcessElements getNaturalProcessAccess() {
		return (pNaturalProcess != null) ? pNaturalProcess : (pNaturalProcess = new NaturalProcessElements());
	}
	
	public ParserRule getNaturalProcessRule() {
		return getNaturalProcessAccess().getRule();
	}

	//HumanActivity:
	//	{Activity} "activity" name=ID actions+=Action*;
	public HumanActivityElements getHumanActivityAccess() {
		return (pHumanActivity != null) ? pHumanActivity : (pHumanActivity = new HumanActivityElements());
	}
	
	public ParserRule getHumanActivityRule() {
		return getHumanActivityAccess().getRule();
	}

	//Action:
	//	"action" name=ID;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Resource:
	//	"resource" name=ID | Asset;
	public ResourceElements getResourceAccess() {
		return (pResource != null) ? pResource : (pResource = new ResourceElements());
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}

	//Asset:
	//	"asset" name=ID;
	public AssetElements getAssetAccess() {
		return (pAsset != null) ? pAsset : (pAsset = new AssetElements());
	}
	
	public ParserRule getAssetRule() {
		return getAssetAccess().getRule();
	}

	//Relationship:
	//	Wants | Does | Decomposes | Trusts | Delegates | Contributes | Fulfils | Provides | Consumes | Exploits | Damages |
	//	Attacks | Argues;
	public RelationshipElements getRelationshipAccess() {
		return (pRelationship != null) ? pRelationship : (pRelationship = new RelationshipElements());
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	//Wants:
	//	type="wants" "(" source=[Actor] "," target=[Requirement] ")";
	public WantsElements getWantsAccess() {
		return (pWants != null) ? pWants : (pWants = new WantsElements());
	}
	
	public ParserRule getWantsRule() {
		return getWantsAccess().getRule();
	}

	//Does:
	//	type="does" "(" source=[Actor] "," target=[Activity] ")";
	public DoesElements getDoesAccess() {
		return (pDoes != null) ? pDoes : (pDoes = new DoesElements());
	}
	
	public ParserRule getDoesRule() {
		return getDoesAccess().getRule();
	}

	//Decomposes:
	//	type=DecomposesType "(" source=[Requirement] "," target=[Requirement] ")";
	public DecomposesElements getDecomposesAccess() {
		return (pDecomposes != null) ? pDecomposes : (pDecomposes = new DecomposesElements());
	}
	
	public ParserRule getDecomposesRule() {
		return getDecomposesAccess().getRule();
	}

	//enum DecomposesType:
	//	AND="and" | OR="or";
	public DecomposesTypeElements getDecomposesTypeAccess() {
		return (unknownRuleDecomposesType != null) ? unknownRuleDecomposesType : (unknownRuleDecomposesType = new DecomposesTypeElements());
	}
	
	public EnumRule getDecomposesTypeRule() {
		return getDecomposesTypeAccess().getRule();
	}

	//Trusts:
	//	type="trusts" "(" source=[Actor] "," target=[Actor] ("," entity=[Thing])? ")";
	public TrustsElements getTrustsAccess() {
		return (pTrusts != null) ? pTrusts : (pTrusts = new TrustsElements());
	}
	
	public ParserRule getTrustsRule() {
		return getTrustsAccess().getRule();
	}

	//Delegates:
	//	type="delegates" "(" source=[Actor] "," target=[Actor] ("," entity=[Thing])? ")";
	public DelegatesElements getDelegatesAccess() {
		return (pDelegates != null) ? pDelegates : (pDelegates = new DelegatesElements());
	}
	
	public ParserRule getDelegatesRule() {
		return getDelegatesAccess().getRule();
	}

	//Contributes:
	//	type=ContributesType "(" source=[Requirement] "," target=[Requirement] ")";
	public ContributesElements getContributesAccess() {
		return (pContributes != null) ? pContributes : (pContributes = new ContributesElements());
	}
	
	public ParserRule getContributesRule() {
		return getContributesAccess().getRule();
	}

	//enum ContributesType:
	//	HURT="-" | HELP="+" | BREAK="--" | MAKE="++";
	public ContributesTypeElements getContributesTypeAccess() {
		return (unknownRuleContributesType != null) ? unknownRuleContributesType : (unknownRuleContributesType = new ContributesTypeElements());
	}
	
	public EnumRule getContributesTypeRule() {
		return getContributesTypeAccess().getRule();
	}

	//Fulfils:
	//	type=FulfilsType "(" source=[Process] "," target=[Proposition] ")";
	public FulfilsElements getFulfilsAccess() {
		return (pFulfils != null) ? pFulfils : (pFulfils = new FulfilsElements());
	}
	
	public ParserRule getFulfilsRule() {
		return getFulfilsAccess().getRule();
	}

	//enum FulfilsType:
	//	Fulfils="fulfils";
	public FulfilsTypeElements getFulfilsTypeAccess() {
		return (unknownRuleFulfilsType != null) ? unknownRuleFulfilsType : (unknownRuleFulfilsType = new FulfilsTypeElements());
	}
	
	public EnumRule getFulfilsTypeRule() {
		return getFulfilsTypeAccess().getRule();
	}

	//Provides:
	//	type="provides" "(" (source=[Process] | source=[Actor]) "," target=[Resource] ")";
	public ProvidesElements getProvidesAccess() {
		return (pProvides != null) ? pProvides : (pProvides = new ProvidesElements());
	}
	
	public ParserRule getProvidesRule() {
		return getProvidesAccess().getRule();
	}

	//Consumes:
	//	type="consumes" "(" (source=[Process] | source=[Actor]) "," target=[Resource] ")";
	public ConsumesElements getConsumesAccess() {
		return (pConsumes != null) ? pConsumes : (pConsumes = new ConsumesElements());
	}
	
	public ParserRule getConsumesRule() {
		return getConsumesAccess().getRule();
	}

	//Exploits:
	//	type="exploits" "(" source=[Attacker] "," target=[Process] ")";
	public ExploitsElements getExploitsAccess() {
		return (pExploits != null) ? pExploits : (pExploits = new ExploitsElements());
	}
	
	public ParserRule getExploitsRule() {
		return getExploitsAccess().getRule();
	}

	//Damages:
	//	type="damages" "(" source=[Attacker] "," target=[Asset] ")";
	public DamagesElements getDamagesAccess() {
		return (pDamages != null) ? pDamages : (pDamages = new DamagesElements());
	}
	
	public ParserRule getDamagesRule() {
		return getDamagesAccess().getRule();
	}

	//Attacks:
	//	type="attacks" "(" source=[Attacker] "," target=[Process] ")";
	public AttacksElements getAttacksAccess() {
		return (pAttacks != null) ? pAttacks : (pAttacks = new AttacksElements());
	}
	
	public ParserRule getAttacksRule() {
		return getAttacksAccess().getRule();
	}

	//Argues:
	//	type="argues" "(" source=[Proposition] "," target=[Proposition] ")";
	public ArguesElements getArguesAccess() {
		return (pArgues != null) ? pArgues : (pArgues = new ArguesElements());
	}
	
	public ParserRule getArguesRule() {
		return getArguesAccess().getRule();
	}

	//terminal ID:
	//	"#" !"#"+ "#" | "^"? ("a".."z" | "A".."Z" | "_" | ".") ("a".."z" | "A".."Z" | "_" | "0".."9" | ".")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
