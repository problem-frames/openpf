/*
* generated by Xtext
*/

package eu.securechange.ontology.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class OntologyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SituationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Situation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTimeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTimeIDTerminalRuleCall_0_1_0 = (RuleCall)cTimeAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cWorldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWorldWorldParserRuleCall_1_0 = (RuleCall)cWorldAssignment_1.eContents().get(0);
		
		//Situation:
		//	("model" time=ID ":")? world=World;
		public ParserRule getRule() { return rule; }

		//("model" time=ID ":")? world=World
		public Group getGroup() { return cGroup; }

		//("model" time=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//"model"
		public Keyword getModelKeyword_0_0() { return cModelKeyword_0_0; }

		//time=ID
		public Assignment getTimeAssignment_0_1() { return cTimeAssignment_0_1; }

		//ID
		public RuleCall getTimeIDTerminalRuleCall_0_1_0() { return cTimeIDTerminalRuleCall_0_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//world=World
		public Assignment getWorldAssignment_1() { return cWorldAssignment_1; }

		//World
		public RuleCall getWorldWorldParserRuleCall_1_0() { return cWorldWorldParserRuleCall_1_0; }
	}

	public class WorldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "World");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWorldAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cGoalsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cGoalsGoalParserRuleCall_1_0_0 = (RuleCall)cGoalsAssignment_1_0.eContents().get(0);
		private final Assignment cDomainsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDomainsDomainParserRuleCall_1_1_0 = (RuleCall)cDomainsAssignment_1_1.eContents().get(0);
		private final Assignment cRelationshipsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_1_2_0 = (RuleCall)cRelationshipsAssignment_1_2.eContents().get(0);
		
		//World:
		//	{World} (goals+=Goal | domains+=Domain | relationships+=Relationship)*;
		public ParserRule getRule() { return rule; }

		//{World} (goals+=Goal | domains+=Domain | relationships+=Relationship)*
		public Group getGroup() { return cGroup; }

		//{World}
		public Action getWorldAction_0() { return cWorldAction_0; }

		//(goals+=Goal | domains+=Domain | relationships+=Relationship)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//goals+=Goal
		public Assignment getGoalsAssignment_1_0() { return cGoalsAssignment_1_0; }

		//Goal
		public RuleCall getGoalsGoalParserRuleCall_1_0_0() { return cGoalsGoalParserRuleCall_1_0_0; }

		//domains+=Domain
		public Assignment getDomainsAssignment_1_1() { return cDomainsAssignment_1_1; }

		//Domain
		public RuleCall getDomainsDomainParserRuleCall_1_1_0() { return cDomainsDomainParserRuleCall_1_1_0; }

		//relationships+=Relationship
		public Assignment getRelationshipsAssignment_1_2() { return cRelationshipsAssignment_1_2; }

		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_1_2_0() { return cRelationshipsRelationshipParserRuleCall_1_2_0; }
	}

	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSecurityGoalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequirementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAntiRequirementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Goal:
		//	SecurityGoal | Requirement | AntiRequirement;
		public ParserRule getRule() { return rule; }

		//SecurityGoal | Requirement | AntiRequirement
		public Alternatives getAlternatives() { return cAlternatives; }

		//SecurityGoal
		public RuleCall getSecurityGoalParserRuleCall_0() { return cSecurityGoalParserRuleCall_0; }

		//Requirement
		public RuleCall getRequirementParserRuleCall_1() { return cRequirementParserRuleCall_1; }

		//AntiRequirement
		public RuleCall getAntiRequirementParserRuleCall_2() { return cAntiRequirementParserRuleCall_2; }
	}

	public class SecurityGoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SecurityGoal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeSGKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesPropositionParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		
		//SecurityGoal:
		//	name=ID type="SG" (","? properties+=Proposition)*;
		public ParserRule getRule() { return rule; }

		//name=ID type="SG" (","? properties+=Proposition)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type="SG"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"SG"
		public Keyword getTypeSGKeyword_1_0() { return cTypeSGKeyword_1_0; }

		//(","? properties+=Proposition)*
		public Group getGroup_2() { return cGroup_2; }

		//","?
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//properties+=Proposition
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//Proposition
		public RuleCall getPropertiesPropositionParserRuleCall_2_1_0() { return cPropertiesPropositionParserRuleCall_2_1_0; }
	}

	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeRKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesPropositionParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		
		//Requirement:
		//	name=ID type="R" (","? properties+=Proposition)*;
		public ParserRule getRule() { return rule; }

		//name=ID type="R" (","? properties+=Proposition)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type="R"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"R"
		public Keyword getTypeRKeyword_1_0() { return cTypeRKeyword_1_0; }

		//(","? properties+=Proposition)*
		public Group getGroup_2() { return cGroup_2; }

		//","?
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//properties+=Proposition
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//Proposition
		public RuleCall getPropertiesPropositionParserRuleCall_2_1_0() { return cPropertiesPropositionParserRuleCall_2_1_0; }
	}

	public class AntiRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AntiRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeARKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesPropositionParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		
		//AntiRequirement:
		//	name=ID type="AR" (","? properties+=Proposition)*;
		public ParserRule getRule() { return rule; }

		//name=ID type="AR" (","? properties+=Proposition)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type="AR"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"AR"
		public Keyword getTypeARKeyword_1_0() { return cTypeARKeyword_1_0; }

		//(","? properties+=Proposition)*
		public Group getGroup_2() { return cGroup_2; }

		//","?
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//properties+=Proposition
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//Proposition
		public RuleCall getPropertiesPropositionParserRuleCall_2_1_0() { return cPropertiesPropositionParserRuleCall_2_1_0; }
	}

	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domain");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cResourceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAttackerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Domain:
		//	Actor | Action | Asset | Resource | Attacker;
		public ParserRule getRule() { return rule; }

		//Actor | Action | Asset | Resource | Attacker
		public Alternatives getAlternatives() { return cAlternatives; }

		//Actor
		public RuleCall getActorParserRuleCall_0() { return cActorParserRuleCall_0; }

		//Action
		public RuleCall getActionParserRuleCall_1() { return cActionParserRuleCall_1; }

		//Asset
		public RuleCall getAssetParserRuleCall_2() { return cAssetParserRuleCall_2; }

		//Resource
		public RuleCall getResourceParserRuleCall_3() { return cResourceParserRuleCall_3; }

		//Attacker
		public RuleCall getAttackerParserRuleCall_4() { return cAttackerParserRuleCall_4; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeArKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesPropositionParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		
		//Actor:
		//	name=ID type="Ar" (","? properties+=Proposition)*;
		public ParserRule getRule() { return rule; }

		//name=ID type="Ar" (","? properties+=Proposition)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type="Ar"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"Ar"
		public Keyword getTypeArKeyword_1_0() { return cTypeArKeyword_1_0; }

		//(","? properties+=Proposition)*
		public Group getGroup_2() { return cGroup_2; }

		//","?
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//properties+=Proposition
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//Proposition
		public RuleCall getPropertiesPropositionParserRuleCall_2_1_0() { return cPropertiesPropositionParserRuleCall_2_1_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeAnKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesPropositionParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		
		//Action:
		//	name=ID type="An" (","? properties+=Proposition)*;
		public ParserRule getRule() { return rule; }

		//name=ID type="An" (","? properties+=Proposition)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type="An"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"An"
		public Keyword getTypeAnKeyword_1_0() { return cTypeAnKeyword_1_0; }

		//(","? properties+=Proposition)*
		public Group getGroup_2() { return cGroup_2; }

		//","?
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//properties+=Proposition
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//Proposition
		public RuleCall getPropertiesPropositionParserRuleCall_2_1_0() { return cPropertiesPropositionParserRuleCall_2_1_0; }
	}

	public class AssetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Asset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeAsKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesPropositionParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		
		//Asset:
		//	name=ID type="As" (","? properties+=Proposition)*;
		public ParserRule getRule() { return rule; }

		//name=ID type="As" (","? properties+=Proposition)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type="As"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"As"
		public Keyword getTypeAsKeyword_1_0() { return cTypeAsKeyword_1_0; }

		//(","? properties+=Proposition)*
		public Group getGroup_2() { return cGroup_2; }

		//","?
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//properties+=Proposition
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//Proposition
		public RuleCall getPropertiesPropositionParserRuleCall_2_1_0() { return cPropertiesPropositionParserRuleCall_2_1_0; }
	}

	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeReKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesPropositionParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		
		//Resource:
		//	name=ID type="Re" (","? properties+=Proposition)*;
		public ParserRule getRule() { return rule; }

		//name=ID type="Re" (","? properties+=Proposition)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type="Re"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"Re"
		public Keyword getTypeReKeyword_1_0() { return cTypeReKeyword_1_0; }

		//(","? properties+=Proposition)*
		public Group getGroup_2() { return cGroup_2; }

		//","?
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//properties+=Proposition
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//Proposition
		public RuleCall getPropertiesPropositionParserRuleCall_2_1_0() { return cPropertiesPropositionParserRuleCall_2_1_0; }
	}

	public class AttackerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attacker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeAkKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesPropositionParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		
		//Attacker:
		//	name=ID type="Ak" (","? properties+=Proposition)*;
		public ParserRule getRule() { return rule; }

		//name=ID type="Ak" (","? properties+=Proposition)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type="Ak"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"Ak"
		public Keyword getTypeAkKeyword_1_0() { return cTypeAkKeyword_1_0; }

		//(","? properties+=Proposition)*
		public Group getGroup_2() { return cGroup_2; }

		//","?
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//properties+=Proposition
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//Proposition
		public RuleCall getPropertiesPropositionParserRuleCall_2_1_0() { return cPropertiesPropositionParserRuleCall_2_1_0; }
	}

	public class PropositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Proposition");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Proposition:
		//	name=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRelTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceWorldCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceWorldIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceWorldCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetWorldCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetWorldIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetWorldCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Relationship:
		//	type=RelType "(" source=[World] "," target=[World] ")";
		public ParserRule getRule() { return rule; }

		//type=RelType "(" source=[World] "," target=[World] ")"
		public Group getGroup() { return cGroup; }

		//type=RelType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//RelType
		public RuleCall getTypeRelTypeEnumRuleCall_0_0() { return cTypeRelTypeEnumRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[World]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[World]
		public CrossReference getSourceWorldCrossReference_2_0() { return cSourceWorldCrossReference_2_0; }

		//ID
		public RuleCall getSourceWorldIDTerminalRuleCall_2_0_1() { return cSourceWorldIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[World]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[World]
		public CrossReference getTargetWorldCrossReference_4_0() { return cTargetWorldCrossReference_4_0; }

		//ID
		public RuleCall getTargetWorldIDTerminalRuleCall_4_0_1() { return cTargetWorldIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	
	
	public class RelTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCARRIESOUTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCARRIESOUTCarriesOutKeyword_0_0 = (Keyword)cCARRIESOUTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDELEGATESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDELEGATESDelegatesKeyword_1_0 = (Keyword)cDELEGATESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFULFILSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFULFILSFulfilsKeyword_2_0 = (Keyword)cFULFILSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPROVIDESEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPROVIDESProvidesKeyword_3_0 = (Keyword)cPROVIDESEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTRUSTSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTRUSTSTrustsKeyword_4_0 = (Keyword)cTRUSTSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cWANTSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cWANTSWantsKeyword_5_0 = (Keyword)cWANTSEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDAMAGESEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDAMAGESDamagesKeyword_6_0 = (Keyword)cDAMAGESEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cATTACKSEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cATTACKSAttacksKeyword_7_0 = (Keyword)cATTACKSEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cARGUESEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cARGUESArguesKeyword_8_0 = (Keyword)cARGUESEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cINTERFACESEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cINTERFACESInterfacesKeyword_9_0 = (Keyword)cINTERFACESEnumLiteralDeclaration_9.eContents().get(0);
		
		////	CarriesOut | Depends | Fulfils | Provides |  Trusts | Wants | Uses | Damages | Attacks | Argues | Interfaces;
		//enum RelType:
		//	CARRIESOUT="carries out" | DELEGATES="delegates" | FULFILS="fulfils" | PROVIDES="provides" | TRUSTS="trusts" |
		//	WANTS="wants" | DAMAGES="damages" | ATTACKS="attacks" | ARGUES="argues" | INTERFACES="interfaces";
		public EnumRule getRule() { return rule; }

		//CARRIESOUT="carries out" | DELEGATES="delegates" | FULFILS="fulfils" | PROVIDES="provides" | TRUSTS="trusts" |
		//WANTS="wants" | DAMAGES="damages" | ATTACKS="attacks" | ARGUES="argues" | INTERFACES="interfaces"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CARRIESOUT="carries out"
		public EnumLiteralDeclaration getCARRIESOUTEnumLiteralDeclaration_0() { return cCARRIESOUTEnumLiteralDeclaration_0; }

		//"carries out"
		public Keyword getCARRIESOUTCarriesOutKeyword_0_0() { return cCARRIESOUTCarriesOutKeyword_0_0; }

		//DELEGATES="delegates"
		public EnumLiteralDeclaration getDELEGATESEnumLiteralDeclaration_1() { return cDELEGATESEnumLiteralDeclaration_1; }

		//"delegates"
		public Keyword getDELEGATESDelegatesKeyword_1_0() { return cDELEGATESDelegatesKeyword_1_0; }

		//FULFILS="fulfils"
		public EnumLiteralDeclaration getFULFILSEnumLiteralDeclaration_2() { return cFULFILSEnumLiteralDeclaration_2; }

		//"fulfils"
		public Keyword getFULFILSFulfilsKeyword_2_0() { return cFULFILSFulfilsKeyword_2_0; }

		//PROVIDES="provides"
		public EnumLiteralDeclaration getPROVIDESEnumLiteralDeclaration_3() { return cPROVIDESEnumLiteralDeclaration_3; }

		//"provides"
		public Keyword getPROVIDESProvidesKeyword_3_0() { return cPROVIDESProvidesKeyword_3_0; }

		//TRUSTS="trusts"
		public EnumLiteralDeclaration getTRUSTSEnumLiteralDeclaration_4() { return cTRUSTSEnumLiteralDeclaration_4; }

		//"trusts"
		public Keyword getTRUSTSTrustsKeyword_4_0() { return cTRUSTSTrustsKeyword_4_0; }

		//WANTS="wants"
		public EnumLiteralDeclaration getWANTSEnumLiteralDeclaration_5() { return cWANTSEnumLiteralDeclaration_5; }

		//"wants"
		public Keyword getWANTSWantsKeyword_5_0() { return cWANTSWantsKeyword_5_0; }

		//DAMAGES="damages"
		public EnumLiteralDeclaration getDAMAGESEnumLiteralDeclaration_6() { return cDAMAGESEnumLiteralDeclaration_6; }

		//"damages"
		public Keyword getDAMAGESDamagesKeyword_6_0() { return cDAMAGESDamagesKeyword_6_0; }

		//ATTACKS="attacks"
		public EnumLiteralDeclaration getATTACKSEnumLiteralDeclaration_7() { return cATTACKSEnumLiteralDeclaration_7; }

		//"attacks"
		public Keyword getATTACKSAttacksKeyword_7_0() { return cATTACKSAttacksKeyword_7_0; }

		//ARGUES="argues"
		public EnumLiteralDeclaration getARGUESEnumLiteralDeclaration_8() { return cARGUESEnumLiteralDeclaration_8; }

		//"argues"
		public Keyword getARGUESArguesKeyword_8_0() { return cARGUESArguesKeyword_8_0; }

		//INTERFACES="interfaces"
		public EnumLiteralDeclaration getINTERFACESEnumLiteralDeclaration_9() { return cINTERFACESEnumLiteralDeclaration_9; }

		//"interfaces"
		public Keyword getINTERFACESInterfacesKeyword_9_0() { return cINTERFACESInterfacesKeyword_9_0; }
	}
	
	private SituationElements pSituation;
	private WorldElements pWorld;
	private GoalElements pGoal;
	private SecurityGoalElements pSecurityGoal;
	private RequirementElements pRequirement;
	private AntiRequirementElements pAntiRequirement;
	private DomainElements pDomain;
	private ActorElements pActor;
	private ActionElements pAction;
	private AssetElements pAsset;
	private ResourceElements pResource;
	private AttackerElements pAttacker;
	private PropositionElements pProposition;
	private RelationshipElements pRelationship;
	private RelTypeElements unknownRuleRelType;
	private TerminalRule tID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public OntologyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Situation:
	//	("model" time=ID ":")? world=World;
	public SituationElements getSituationAccess() {
		return (pSituation != null) ? pSituation : (pSituation = new SituationElements());
	}
	
	public ParserRule getSituationRule() {
		return getSituationAccess().getRule();
	}

	//World:
	//	{World} (goals+=Goal | domains+=Domain | relationships+=Relationship)*;
	public WorldElements getWorldAccess() {
		return (pWorld != null) ? pWorld : (pWorld = new WorldElements());
	}
	
	public ParserRule getWorldRule() {
		return getWorldAccess().getRule();
	}

	//Goal:
	//	SecurityGoal | Requirement | AntiRequirement;
	public GoalElements getGoalAccess() {
		return (pGoal != null) ? pGoal : (pGoal = new GoalElements());
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	//SecurityGoal:
	//	name=ID type="SG" (","? properties+=Proposition)*;
	public SecurityGoalElements getSecurityGoalAccess() {
		return (pSecurityGoal != null) ? pSecurityGoal : (pSecurityGoal = new SecurityGoalElements());
	}
	
	public ParserRule getSecurityGoalRule() {
		return getSecurityGoalAccess().getRule();
	}

	//Requirement:
	//	name=ID type="R" (","? properties+=Proposition)*;
	public RequirementElements getRequirementAccess() {
		return (pRequirement != null) ? pRequirement : (pRequirement = new RequirementElements());
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}

	//AntiRequirement:
	//	name=ID type="AR" (","? properties+=Proposition)*;
	public AntiRequirementElements getAntiRequirementAccess() {
		return (pAntiRequirement != null) ? pAntiRequirement : (pAntiRequirement = new AntiRequirementElements());
	}
	
	public ParserRule getAntiRequirementRule() {
		return getAntiRequirementAccess().getRule();
	}

	//Domain:
	//	Actor | Action | Asset | Resource | Attacker;
	public DomainElements getDomainAccess() {
		return (pDomain != null) ? pDomain : (pDomain = new DomainElements());
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}

	//Actor:
	//	name=ID type="Ar" (","? properties+=Proposition)*;
	public ActorElements getActorAccess() {
		return (pActor != null) ? pActor : (pActor = new ActorElements());
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//Action:
	//	name=ID type="An" (","? properties+=Proposition)*;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Asset:
	//	name=ID type="As" (","? properties+=Proposition)*;
	public AssetElements getAssetAccess() {
		return (pAsset != null) ? pAsset : (pAsset = new AssetElements());
	}
	
	public ParserRule getAssetRule() {
		return getAssetAccess().getRule();
	}

	//Resource:
	//	name=ID type="Re" (","? properties+=Proposition)*;
	public ResourceElements getResourceAccess() {
		return (pResource != null) ? pResource : (pResource = new ResourceElements());
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}

	//Attacker:
	//	name=ID type="Ak" (","? properties+=Proposition)*;
	public AttackerElements getAttackerAccess() {
		return (pAttacker != null) ? pAttacker : (pAttacker = new AttackerElements());
	}
	
	public ParserRule getAttackerRule() {
		return getAttackerAccess().getRule();
	}

	//Proposition:
	//	name=STRING;
	public PropositionElements getPropositionAccess() {
		return (pProposition != null) ? pProposition : (pProposition = new PropositionElements());
	}
	
	public ParserRule getPropositionRule() {
		return getPropositionAccess().getRule();
	}

	//Relationship:
	//	type=RelType "(" source=[World] "," target=[World] ")";
	public RelationshipElements getRelationshipAccess() {
		return (pRelationship != null) ? pRelationship : (pRelationship = new RelationshipElements());
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	////	CarriesOut | Depends | Fulfils | Provides |  Trusts | Wants | Uses | Damages | Attacks | Argues | Interfaces;
	//enum RelType:
	//	CARRIESOUT="carries out" | DELEGATES="delegates" | FULFILS="fulfils" | PROVIDES="provides" | TRUSTS="trusts" |
	//	WANTS="wants" | DAMAGES="damages" | ATTACKS="attacks" | ARGUES="argues" | INTERFACES="interfaces";
	public RelTypeElements getRelTypeAccess() {
		return (unknownRuleRelType != null) ? unknownRuleRelType : (unknownRuleRelType = new RelTypeElements());
	}
	
	public EnumRule getRelTypeRule() {
		return getRelTypeAccess().getRule();
	}

	////Relationship1:
	////	CarriesOut | Depends | Fulfils | Provides |  Trusts | Wants | Uses | Damages | Attacks | Argues | Interfaces;
	////
	////CarriesOut:
	////	type="carries out" "(" source=[Actor] "," target=[Action] ")";
	////
	////Depends:
	////	type="delegates" "(" source=[Actor] "," target=[Actor] ("," entity=[World])? ")";
	////
	////Fulfils:
	////	type="fulfils" "(" source=[Action] "," target=[Proposition] ")";
	////
	////Provides:
	////	type="provides" "(" (source=[Action]|source=[Actor]) "," target=[Resource] ")";
	////
	////Trusts:
	////	type="trusts" "(" source=[Actor] "," target=[Actor] ("," entity=[World])? ")";
	////
	////Wants:
	////	type="wants" "(" source=[Actor] "," target=[Requirement] ")";
	////
	////Uses:
	////	type="uses" "(" source=[Actor] "," target=[Resource] ")";
	////
	////Damages:
	////	type="damages" "(" source=[Attacker] "," target=[Asset] ")";
	////
	////Attacks:
	////	type="attacks" "(" source=[Attacker] "," target=[Action] ")";
	////
	////Argues:
	////	type="argues" "(" source=[Proposition] "," target=[Proposition] ")";
	////
	////Interfaces:
	////	type="interfaces" "(" source=[Domain] "," target=[Domain] ")";
	//terminal ID:
	//	"#" !"#"+ "#" | "^"? ("a".."z" | "A".."Z" | "_" | ".") ("a".."z" | "A".."Z" | "_" | "0".."9" | ".")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
