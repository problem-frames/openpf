/*
* generated by Xtext
*/
package uk.ac.open.rbac.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import uk.ac.open.rbac.services.RBACGrammarAccess;

public class RBACParser extends AbstractContentAssistParser {
	
	@Inject
	private RBACGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected uk.ac.open.rbac.ui.contentassist.antlr.internal.InternalRBACParser createParser() {
		uk.ac.open.rbac.ui.contentassist.antlr.internal.InternalRBACParser result = new uk.ac.open.rbac.ui.contentassist.antlr.internal.InternalRBACParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getRoleAccess().getGroup(), "rule__Role__Group__0");
					put(grammarAccess.getUserAccess().getGroup(), "rule__User__Group__0");
					put(grammarAccess.getObjectAccess().getGroup(), "rule__Object__Group__0");
					put(grammarAccess.getSessionAccess().getGroup(), "rule__Session__Group__0");
					put(grammarAccess.getUserRoleAssignmentAccess().getGroup(), "rule__UserRoleAssignment__Group__0");
					put(grammarAccess.getRolePermissionAssignmentAccess().getGroup(), "rule__RolePermissionAssignment__Group__0");
					put(grammarAccess.getModelAccess().getRolesAssignment_0(), "rule__Model__RolesAssignment_0");
					put(grammarAccess.getModelAccess().getUsersAssignment_1(), "rule__Model__UsersAssignment_1");
					put(grammarAccess.getModelAccess().getSessionsAssignment_2(), "rule__Model__SessionsAssignment_2");
					put(grammarAccess.getModelAccess().getObjectsAssignment_3(), "rule__Model__ObjectsAssignment_3");
					put(grammarAccess.getModelAccess().getPermissionsAssignment_4(), "rule__Model__PermissionsAssignment_4");
					put(grammarAccess.getModelAccess().getAssignmentsAssignment_5(), "rule__Model__AssignmentsAssignment_5");
					put(grammarAccess.getRoleAccess().getNameAssignment_1(), "rule__Role__NameAssignment_1");
					put(grammarAccess.getUserAccess().getNameAssignment_1(), "rule__User__NameAssignment_1");
					put(grammarAccess.getObjectAccess().getNameAssignment_1(), "rule__Object__NameAssignment_1");
					put(grammarAccess.getObjectAccess().getTypeAssignment_3(), "rule__Object__TypeAssignment_3");
					put(grammarAccess.getSessionAccess().getNameAssignment_1(), "rule__Session__NameAssignment_1");
					put(grammarAccess.getSessionAccess().getAssignmentsAssignment_3(), "rule__Session__AssignmentsAssignment_3");
					put(grammarAccess.getUserRoleAssignmentAccess().getNameAssignment_0(), "rule__UserRoleAssignment__NameAssignment_0");
					put(grammarAccess.getUserRoleAssignmentAccess().getUserAssignment_1(), "rule__UserRoleAssignment__UserAssignment_1");
					put(grammarAccess.getUserRoleAssignmentAccess().getRoleAssignment_3(), "rule__UserRoleAssignment__RoleAssignment_3");
					put(grammarAccess.getRolePermissionAssignmentAccess().getRoleAssignment_0(), "rule__RolePermissionAssignment__RoleAssignment_0");
					put(grammarAccess.getRolePermissionAssignmentAccess().getTypeAssignment_1(), "rule__RolePermissionAssignment__TypeAssignment_1");
					put(grammarAccess.getRolePermissionAssignmentAccess().getObjectAssignment_2(), "rule__RolePermissionAssignment__ObjectAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			uk.ac.open.rbac.ui.contentassist.antlr.internal.InternalRBACParser typedParser = (uk.ac.open.rbac.ui.contentassist.antlr.internal.InternalRBACParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RBACGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RBACGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
