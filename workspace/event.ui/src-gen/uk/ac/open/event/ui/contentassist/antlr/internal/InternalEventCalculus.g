/*
* generated by Xtext
*/
grammar InternalEventCalculus;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package uk.ac.open.event.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.open.event.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import uk.ac.open.event.services.EventCalculusGrammarAccess;

}

@parser::members {
 
 	private EventCalculusGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(EventCalculusGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
(rule__Declaration__Alternatives)
{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefSort
entryRuleDefSort 
:
{ before(grammarAccess.getDefSortRule()); }
	 ruleDefSort
{ after(grammarAccess.getDefSortRule()); } 
	 EOF 
;

// Rule DefSort
ruleDefSort
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefSortAccess().getGroup()); }
(rule__DefSort__Group__0)
{ after(grammarAccess.getDefSortAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefRange
entryRuleDefRange 
:
{ before(grammarAccess.getDefRangeRule()); }
	 ruleDefRange
{ after(grammarAccess.getDefRangeRule()); } 
	 EOF 
;

// Rule DefRange
ruleDefRange
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefRangeAccess().getGroup()); }
(rule__DefRange__Group__0)
{ after(grammarAccess.getDefRangeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefOption
entryRuleDefOption 
:
{ before(grammarAccess.getDefOptionRule()); }
	 ruleDefOption
{ after(grammarAccess.getDefOptionRule()); } 
	 EOF 
;

// Rule DefOption
ruleDefOption
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefOptionAccess().getGroup()); }
(rule__DefOption__Group__0)
{ after(grammarAccess.getDefOptionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefCompletion
entryRuleDefCompletion 
:
{ before(grammarAccess.getDefCompletionRule()); }
	 ruleDefCompletion
{ after(grammarAccess.getDefCompletionRule()); } 
	 EOF 
;

// Rule DefCompletion
ruleDefCompletion
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefCompletionAccess().getGroup()); }
(rule__DefCompletion__Group__0)
{ after(grammarAccess.getDefCompletionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefNonInertia
entryRuleDefNonInertia 
:
{ before(grammarAccess.getDefNonInertiaRule()); }
	 ruleDefNonInertia
{ after(grammarAccess.getDefNonInertiaRule()); } 
	 EOF 
;

// Rule DefNonInertia
ruleDefNonInertia
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefNonInertiaAccess().getGroup()); }
(rule__DefNonInertia__Group__0)
{ after(grammarAccess.getDefNonInertiaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSortDefinition
entryRuleSortDefinition 
:
{ before(grammarAccess.getSortDefinitionRule()); }
	 ruleSortDefinition
{ after(grammarAccess.getSortDefinitionRule()); } 
	 EOF 
;

// Rule SortDefinition
ruleSortDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSortDefinitionAccess().getGroup()); }
(rule__SortDefinition__Group__0)
{ after(grammarAccess.getSortDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefinition
entryRuleDefinition 
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefinitionAccess().getGroup()); }
(rule__Definition__Group__0)
{ after(grammarAccess.getDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaredParameter
entryRuleDeclaredParameter 
:
{ before(grammarAccess.getDeclaredParameterRule()); }
	 ruleDeclaredParameter
{ after(grammarAccess.getDeclaredParameterRule()); } 
	 EOF 
;

// Rule DeclaredParameter
ruleDeclaredParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaredParameterAccess().getAlternatives()); }
(rule__DeclaredParameter__Alternatives)
{ after(grammarAccess.getDeclaredParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifier
entryRuleQualifier 
:
{ before(grammarAccess.getQualifierRule()); }
	 ruleQualifier
{ after(grammarAccess.getQualifierRule()); } 
	 EOF 
;

// Rule Qualifier
ruleQualifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifierAccess().getAlternatives()); }
(rule__Qualifier__Alternatives)
{ after(grammarAccess.getQualifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExists
entryRuleExists 
:
{ before(grammarAccess.getExistsRule()); }
	 ruleExists
{ after(grammarAccess.getExistsRule()); } 
	 EOF 
;

// Rule Exists
ruleExists
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExistsAccess().getGroup()); }
(rule__Exists__Group__0)
{ after(grammarAccess.getExistsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForall
entryRuleForall 
:
{ before(grammarAccess.getForallRule()); }
	 ruleForall
{ after(grammarAccess.getForallRule()); } 
	 EOF 
;

// Rule Forall
ruleForall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForallAccess().getGroup()); }
(rule__Forall__Group__0)
{ after(grammarAccess.getForallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentOp
entryRuleAssignmentOp 
:
{ before(grammarAccess.getAssignmentOpRule()); }
	 ruleAssignmentOp
{ after(grammarAccess.getAssignmentOpRule()); } 
	 EOF 
;

// Rule AssignmentOp
ruleAssignmentOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentOpAccess().getGroup()); }
(rule__AssignmentOp__Group__0)
{ after(grammarAccess.getAssignmentOpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExp
entryRuleOrExp 
:
{ before(grammarAccess.getOrExpRule()); }
	 ruleOrExp
{ after(grammarAccess.getOrExpRule()); } 
	 EOF 
;

// Rule OrExp
ruleOrExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpAccess().getGroup()); }
(rule__OrExp__Group__0)
{ after(grammarAccess.getOrExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExp
entryRuleAndExp 
:
{ before(grammarAccess.getAndExpRule()); }
	 ruleAndExp
{ after(grammarAccess.getAndExpRule()); } 
	 EOF 
;

// Rule AndExp
ruleAndExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpAccess().getGroup()); }
(rule__AndExp__Group__0)
{ after(grammarAccess.getAndExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelational
entryRuleRelational 
:
{ before(grammarAccess.getRelationalRule()); }
	 ruleRelational
{ after(grammarAccess.getRelationalRule()); } 
	 EOF 
;

// Rule Relational
ruleRelational
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalAccess().getGroup()); }
(rule__Relational__Group__0)
{ after(grammarAccess.getRelationalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePower
entryRulePower 
:
{ before(grammarAccess.getPowerRule()); }
	 rulePower
{ after(grammarAccess.getPowerRule()); } 
	 EOF 
;

// Rule Power
rulePower
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPowerAccess().getGroup()); }
(rule__Power__Group__0)
{ after(grammarAccess.getPowerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr 
:
{ before(grammarAccess.getUnaryExprRule()); }
	 ruleUnaryExpr
{ after(grammarAccess.getUnaryExprRule()); } 
	 EOF 
;

// Rule UnaryExpr
ruleUnaryExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExprAccess().getGroup()); }
(rule__UnaryExpr__Group__0)
{ after(grammarAccess.getUnaryExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrePrimaryExpr
entryRulePrePrimaryExpr 
:
{ before(grammarAccess.getPrePrimaryExprRule()); }
	 rulePrePrimaryExpr
{ after(grammarAccess.getPrePrimaryExprRule()); } 
	 EOF 
;

// Rule PrePrimaryExpr
rulePrePrimaryExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrePrimaryExprAccess().getAlternatives()); }
(rule__PrePrimaryExpr__Alternatives)
{ after(grammarAccess.getPrePrimaryExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractRef
entryRuleAbstractRef 
:
{ before(grammarAccess.getAbstractRefRule()); }
	 ruleAbstractRef
{ after(grammarAccess.getAbstractRefRule()); } 
	 EOF 
;

// Rule AbstractRef
ruleAbstractRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractRefAccess().getGroup()); }
(rule__AbstractRef__Group__0)
{ after(grammarAccess.getAbstractRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression 
:
{ before(grammarAccess.getTerminalExpressionRule()); }
	 ruleTerminalExpression
{ after(grammarAccess.getTerminalExpressionRule()); } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTerminalExpressionAccess().getAlternatives()); }
(rule__TerminalExpression__Alternatives)
{ after(grammarAccess.getTerminalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}






// Rule UnarOp
ruleUnarOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnarOpAccess().getNOTEnumLiteralDeclaration()); }
(	'!' 
)
{ after(grammarAccess.getUnarOpAccess().getNOTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclarationsAssignment_1_0()); }
(rule__Model__DeclarationsAssignment_1_0)
{ after(grammarAccess.getModelAccess().getDeclarationsAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getStatementsAssignment_1_1()); }
(rule__Model__StatementsAssignment_1_1)
{ after(grammarAccess.getModelAccess().getStatementsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getDefSortParserRuleCall_0()); }
	ruleDefSort
{ after(grammarAccess.getDeclarationAccess().getDefSortParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getDefRangeParserRuleCall_1()); }
	ruleDefRange
{ after(grammarAccess.getDeclarationAccess().getDefRangeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getDefOptionParserRuleCall_2()); }
	ruleDefOption
{ after(grammarAccess.getDeclarationAccess().getDefOptionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getDefCompletionParserRuleCall_3()); }
	ruleDefCompletion
{ after(grammarAccess.getDeclarationAccess().getDefCompletionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getDefNonInertiaParserRuleCall_4()); }
	ruleDefNonInertia
{ after(grammarAccess.getDeclarationAccess().getDefNonInertiaParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSortDefinitionParserRuleCall_0()); }
	ruleSortDefinition
{ after(grammarAccess.getStatementAccess().getSortDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getGroup_1()); }
(rule__Statement__Group_1__0)
{ after(grammarAccess.getStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredParameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaredParameterAccess().getNameAssignment_0()); }
(rule__DeclaredParameter__NameAssignment_0)
{ after(grammarAccess.getDeclaredParameterAccess().getNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getDeclaredParameterAccess().getNameAssignment_1()); }
(rule__DeclaredParameter__NameAssignment_1)
{ after(grammarAccess.getDeclaredParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Qualifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifierAccess().getExistsParserRuleCall_0()); }
	ruleExists
{ after(grammarAccess.getQualifierAccess().getExistsParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getQualifierAccess().getForallParserRuleCall_1()); }
	ruleForall
{ after(grammarAccess.getQualifierAccess().getForallParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOp__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOpAccess().getGroup_1_0_0()); }
(rule__AssignmentOp__Group_1_0_0__0)
{ after(grammarAccess.getAssignmentOpAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getAssignmentOpAccess().getGroup_1_0_1()); }
(rule__AssignmentOp__Group_1_0_1__0)
{ after(grammarAccess.getAssignmentOpAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getGroup_1_0_0()); }
(rule__Relational__Group_1_0_0__0)
{ after(grammarAccess.getRelationalAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getRelationalAccess().getGroup_1_0_1()); }
(rule__Relational__Group_1_0_1__0)
{ after(grammarAccess.getRelationalAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getRelationalAccess().getGroup_1_0_2()); }
(rule__Relational__Group_1_0_2__0)
{ after(grammarAccess.getRelationalAccess().getGroup_1_0_2()); }
)

    |(
{ before(grammarAccess.getRelationalAccess().getGroup_1_0_3()); }
(rule__Relational__Group_1_0_3__0)
{ after(grammarAccess.getRelationalAccess().getGroup_1_0_3()); }
)

    |(
{ before(grammarAccess.getRelationalAccess().getGroup_1_0_4()); }
(rule__Relational__Group_1_0_4__0)
{ after(grammarAccess.getRelationalAccess().getGroup_1_0_4()); }
)

    |(
{ before(grammarAccess.getRelationalAccess().getGroup_1_0_5()); }
(rule__Relational__Group_1_0_5__0)
{ after(grammarAccess.getRelationalAccess().getGroup_1_0_5()); }
)

    |(
{ before(grammarAccess.getRelationalAccess().getGroup_1_0_6()); }
(rule__Relational__Group_1_0_6__0)
{ after(grammarAccess.getRelationalAccess().getGroup_1_0_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
(rule__Addition__Group_1_0_0__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
(rule__Addition__Group_1_0_1__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
(rule__Multiplication__Group_1_0_0__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
(rule__Multiplication__Group_1_0_1__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrePrimaryExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrePrimaryExprAccess().getTerminalExpressionParserRuleCall_0()); }
	ruleTerminalExpression
{ after(grammarAccess.getPrePrimaryExprAccess().getTerminalExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrePrimaryExprAccess().getAbstractRefParserRuleCall_1()); }
	ruleAbstractRef
{ after(grammarAccess.getPrePrimaryExprAccess().getAbstractRefParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrePrimaryExprAccess().getGroup_2()); }
(rule__PrePrimaryExpr__Group_2__0)
{ after(grammarAccess.getPrePrimaryExprAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getGroup_0()); }
(rule__TerminalExpression__Group_0__0)
{ after(grammarAccess.getTerminalExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTerminalExpressionAccess().getGroup_1()); }
(rule__TerminalExpression__Group_1__0)
{ after(grammarAccess.getTerminalExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getTerminalExpressionAccess().getGroup_2()); }
(rule__TerminalExpression__Group_2__0)
{ after(grammarAccess.getTerminalExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsAssignment_0()); }
(rule__Model__ImportsAssignment_0)*
{ after(grammarAccess.getModelAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAlternatives_1()); }
(rule__Model__Alternatives_1)*
{ after(grammarAccess.getModelAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getLoadKeyword_0()); }

	'load' 

{ after(grammarAccess.getImportAccess().getLoadKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
(rule__Import__ImportURIAssignment_1)
{ after(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DefSort__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefSort__Group__0__Impl
	rule__DefSort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefSort__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefSortAccess().getReifiedAssignment_0()); }
(rule__DefSort__ReifiedAssignment_0)?
{ after(grammarAccess.getDefSortAccess().getReifiedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefSort__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefSort__Group__1__Impl
	rule__DefSort__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefSort__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefSortAccess().getSortKeyword_1()); }

	'sort' 

{ after(grammarAccess.getDefSortAccess().getSortKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefSort__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefSort__Group__2__Impl
	rule__DefSort__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DefSort__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefSortAccess().getNameAssignment_2()); }
(rule__DefSort__NameAssignment_2)
{ after(grammarAccess.getDefSortAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefSort__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefSort__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefSort__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefSortAccess().getGroup_3()); }
(rule__DefSort__Group_3__0)?
{ after(grammarAccess.getDefSortAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DefSort__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefSort__Group_3__0__Impl
	rule__DefSort__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefSort__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefSortAccess().getColonKeyword_3_0()); }

	':' 

{ after(grammarAccess.getDefSortAccess().getColonKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefSort__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefSort__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefSort__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefSortAccess().getTypeAssignment_3_1()); }
(rule__DefSort__TypeAssignment_3_1)
{ after(grammarAccess.getDefSortAccess().getTypeAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DefRange__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefRange__Group__0__Impl
	rule__DefRange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefRange__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefRangeAccess().getRangeKeyword_0()); }

	'range' 

{ after(grammarAccess.getDefRangeAccess().getRangeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefRange__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefRange__Group__1__Impl
	rule__DefRange__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefRange__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefRangeAccess().getNameAssignment_1()); }
(rule__DefRange__NameAssignment_1)
{ after(grammarAccess.getDefRangeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefRange__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefRange__Group__2__Impl
	rule__DefRange__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DefRange__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefRangeAccess().getMinAssignment_2()); }
(rule__DefRange__MinAssignment_2)
{ after(grammarAccess.getDefRangeAccess().getMinAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefRange__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefRange__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefRange__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefRangeAccess().getMaxAssignment_3()); }
(rule__DefRange__MaxAssignment_3)
{ after(grammarAccess.getDefRangeAccess().getMaxAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DefOption__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefOption__Group__0__Impl
	rule__DefOption__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefOption__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefOptionAccess().getOptionKeyword_0()); }

	'option' 

{ after(grammarAccess.getDefOptionAccess().getOptionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefOption__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefOption__Group__1__Impl
	rule__DefOption__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefOption__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefOptionAccess().getNameAssignment_1()); }
(rule__DefOption__NameAssignment_1)
{ after(grammarAccess.getDefOptionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefOption__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefOption__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefOption__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefOptionAccess().getValueAssignment_2()); }
(rule__DefOption__ValueAssignment_2)
{ after(grammarAccess.getDefOptionAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DefCompletion__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefCompletion__Group__0__Impl
	rule__DefCompletion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefCompletion__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefCompletionAccess().getCompletionKeyword_0()); }

	'completion' 

{ after(grammarAccess.getDefCompletionAccess().getCompletionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefCompletion__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefCompletion__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefCompletion__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefCompletionAccess().getNameAssignment_1()); }
(rule__DefCompletion__NameAssignment_1)
{ after(grammarAccess.getDefCompletionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DefNonInertia__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefNonInertia__Group__0__Impl
	rule__DefNonInertia__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefNonInertia__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefNonInertiaAccess().getNoninertialKeyword_0()); }

	'noninertial' 

{ after(grammarAccess.getDefNonInertiaAccess().getNoninertialKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefNonInertia__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefNonInertia__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefNonInertia__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefNonInertiaAccess().getNameAssignment_1()); }
(rule__DefNonInertia__NameAssignment_1)
{ after(grammarAccess.getDefNonInertiaAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_1__0__Impl
	rule__Statement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getExpressionParserRuleCall_1_0()); }
	ruleExpression
{ after(grammarAccess.getStatementAccess().getExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getStatementAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SortDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SortDefinition__Group__0__Impl
	rule__SortDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SortDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSortDefinitionAccess().getSortAssignment_0()); }
(rule__SortDefinition__SortAssignment_0)
{ after(grammarAccess.getSortDefinitionAccess().getSortAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SortDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SortDefinition__Group__1__Impl
	rule__SortDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SortDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSortDefinitionAccess().getDefinitionsAssignment_1()); }
(rule__SortDefinition__DefinitionsAssignment_1)
{ after(grammarAccess.getSortDefinitionAccess().getDefinitionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SortDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SortDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SortDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSortDefinitionAccess().getGroup_2()); }
(rule__SortDefinition__Group_2__0)*
{ after(grammarAccess.getSortDefinitionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SortDefinition__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SortDefinition__Group_2__0__Impl
	rule__SortDefinition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SortDefinition__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSortDefinitionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getSortDefinitionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SortDefinition__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SortDefinition__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SortDefinition__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSortDefinitionAccess().getDefinitionsAssignment_2_1()); }
(rule__SortDefinition__DefinitionsAssignment_2_1)
{ after(grammarAccess.getSortDefinitionAccess().getDefinitionsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Definition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__0__Impl
	rule__Definition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getNameAssignment_0()); }
(rule__Definition__NameAssignment_0)
{ after(grammarAccess.getDefinitionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__1__Impl
	rule__Definition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getGroup_1()); }
(rule__Definition__Group_1__0)?
{ after(grammarAccess.getDefinitionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getGroup_2()); }
(rule__Definition__Group_2__0)?
{ after(grammarAccess.getDefinitionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Definition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group_1__0__Impl
	rule__Definition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group_1__1__Impl
	rule__Definition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getArgsAssignment_1_1()); }
(rule__Definition__ArgsAssignment_1_1)?
{ after(grammarAccess.getDefinitionAccess().getArgsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group_1__2__Impl
	rule__Definition__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getGroup_1_2()); }
(rule__Definition__Group_1_2__0)*
{ after(grammarAccess.getDefinitionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Definition__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group_1_2__0__Impl
	rule__Definition__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getDefinitionAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getArgsAssignment_1_2_1()); }
(rule__Definition__ArgsAssignment_1_2_1)
{ after(grammarAccess.getDefinitionAccess().getArgsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Definition__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group_2__0__Impl
	rule__Definition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getColonKeyword_2_0()); }

	':' 

{ after(grammarAccess.getDefinitionAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getReturnAssignment_2_1()); }
(rule__Definition__ReturnAssignment_2_1)
{ after(grammarAccess.getDefinitionAccess().getReturnAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getQualifiersAssignment_0()); }
(rule__Expression__QualifiersAssignment_0)*
{ after(grammarAccess.getExpressionAccess().getQualifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExprAssignment_1()); }
(rule__Expression__ExprAssignment_1)
{ after(grammarAccess.getExpressionAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Exists__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exists__Group__0__Impl
	rule__Exists__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getExistsAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exists__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exists__Group__1__Impl
	rule__Exists__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsAccess().getNamesAssignment_1()); }
(rule__Exists__NamesAssignment_1)
{ after(grammarAccess.getExistsAccess().getNamesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exists__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exists__Group__2__Impl
	rule__Exists__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsAccess().getGroup_2()); }
(rule__Exists__Group_2__0)*
{ after(grammarAccess.getExistsAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exists__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exists__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getExistsAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Exists__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exists__Group_2__0__Impl
	rule__Exists__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getExistsAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exists__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exists__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsAccess().getNamesAssignment_2_1()); }
(rule__Exists__NamesAssignment_2_1)
{ after(grammarAccess.getExistsAccess().getNamesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Forall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forall__Group__0__Impl
	rule__Forall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getForallAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forall__Group__1__Impl
	rule__Forall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Forall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallAccess().getNamesAssignment_1()); }
(rule__Forall__NamesAssignment_1)
{ after(grammarAccess.getForallAccess().getNamesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forall__Group__2__Impl
	rule__Forall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Forall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallAccess().getGroup_2()); }
(rule__Forall__Group_2__0)*
{ after(grammarAccess.getForallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getForallAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Forall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forall__Group_2__0__Impl
	rule__Forall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getForallAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallAccess().getNamesAssignment_2_1()); }
(rule__Forall__NamesAssignment_2_1)
{ after(grammarAccess.getForallAccess().getNamesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentOp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentOp__Group__0__Impl
	rule__AssignmentOp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOpAccess().getOrExpParserRuleCall_0()); }
	ruleOrExp
{ after(grammarAccess.getAssignmentOpAccess().getOrExpParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentOp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentOp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOpAccess().getGroup_1()); }
(rule__AssignmentOp__Group_1__0)?
{ after(grammarAccess.getAssignmentOpAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentOp__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentOp__Group_1__0__Impl
	rule__AssignmentOp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOp__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOpAccess().getAlternatives_1_0()); }
(rule__AssignmentOp__Alternatives_1_0)
{ after(grammarAccess.getAssignmentOpAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentOp__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentOp__Group_1__1__Impl
	rule__AssignmentOp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOp__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOpAccess().getQualifiersAssignment_1_1()); }
(rule__AssignmentOp__QualifiersAssignment_1_1)*
{ after(grammarAccess.getAssignmentOpAccess().getQualifiersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentOp__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentOp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOp__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOpAccess().getRightAssignment_1_2()); }
(rule__AssignmentOp__RightAssignment_1_2)
{ after(grammarAccess.getAssignmentOpAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AssignmentOp__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentOp__Group_1_0_0__0__Impl
	rule__AssignmentOp__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOp__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOpAccess().getAssignPlusLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAssignmentOpAccess().getAssignPlusLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentOp__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentOp__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOp__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOpAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0_1()); }

	'->' 

{ after(grammarAccess.getAssignmentOpAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentOp__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentOp__Group_1_0_1__0__Impl
	rule__AssignmentOp__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOp__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOpAccess().getAssignMinLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getAssignmentOpAccess().getAssignMinLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentOp__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentOp__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOp__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOpAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1()); }

	'<->' 

{ after(grammarAccess.getAssignmentOpAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExp__Group__0__Impl
	rule__OrExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpAccess().getAndExpParserRuleCall_0()); }
	ruleAndExp
{ after(grammarAccess.getOrExpAccess().getAndExpParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpAccess().getGroup_1()); }
(rule__OrExp__Group_1__0)*
{ after(grammarAccess.getOrExpAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExp__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExp__Group_1__0__Impl
	rule__OrExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExp__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpAccess().getOrLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpAccess().getOrLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExp__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExp__Group_1__1__Impl
	rule__OrExp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExp__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpAccess().getVerticalLineKeyword_1_1()); }

	'|' 

{ after(grammarAccess.getOrExpAccess().getVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExp__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExp__Group_1__2__Impl
	rule__OrExp__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExp__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpAccess().getQualifiersAssignment_1_2()); }
(rule__OrExp__QualifiersAssignment_1_2)*
{ after(grammarAccess.getOrExpAccess().getQualifiersAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExp__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExp__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExp__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpAccess().getRightAssignment_1_3()); }
(rule__OrExp__RightAssignment_1_3)
{ after(grammarAccess.getOrExpAccess().getRightAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AndExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExp__Group__0__Impl
	rule__AndExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getRelationalParserRuleCall_0()); }
	ruleRelational
{ after(grammarAccess.getAndExpAccess().getRelationalParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getGroup_1()); }
(rule__AndExp__Group_1__0)*
{ after(grammarAccess.getAndExpAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExp__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExp__Group_1__0__Impl
	rule__AndExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getAndLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpAccess().getAndLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExp__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExp__Group_1__1__Impl
	rule__AndExp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getAmpersandKeyword_1_1()); }

	'&' 

{ after(grammarAccess.getAndExpAccess().getAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExp__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExp__Group_1__2__Impl
	rule__AndExp__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getQualifiersAssignment_1_2()); }
(rule__AndExp__QualifiersAssignment_1_2)*
{ after(grammarAccess.getAndExpAccess().getQualifiersAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExp__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExp__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getRightAssignment_1_3()); }
(rule__AndExp__RightAssignment_1_3)
{ after(grammarAccess.getAndExpAccess().getRightAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Relational__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group__0__Impl
	rule__Relational__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
{ after(grammarAccess.getRelationalAccess().getAdditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relational__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getGroup_1()); }
(rule__Relational__Group_1__0)?
{ after(grammarAccess.getRelationalAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relational__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1__0__Impl
	rule__Relational__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getAlternatives_1_0()); }
(rule__Relational__Alternatives_1_0)
{ after(grammarAccess.getRelationalAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relational__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getRightAssignment_1_1()); }
(rule__Relational__RightAssignment_1_1)
{ after(grammarAccess.getRelationalAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relational__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_0__0__Impl
	rule__Relational__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getRelNotEqLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getRelationalAccess().getRelNotEqLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relational__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getExclamationMarkEqualsSignKeyword_1_0_0_1()); }

	'!=' 

{ after(grammarAccess.getRelationalAccess().getExclamationMarkEqualsSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relational__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_1__0__Impl
	rule__Relational__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getRelEqEqLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getRelationalAccess().getRelEqEqLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relational__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getEqualsSignEqualsSignKeyword_1_0_1_1()); }

	'==' 

{ after(grammarAccess.getRelationalAccess().getEqualsSignEqualsSignKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relational__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_2__0__Impl
	rule__Relational__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getRelLtEqLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getRelationalAccess().getRelLtEqLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relational__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getGreaterThanSignEqualsSignKeyword_1_0_2_1()); }

	'>=' 

{ after(grammarAccess.getRelationalAccess().getGreaterThanSignEqualsSignKeyword_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relational__Group_1_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_3__0__Impl
	rule__Relational__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getRelGtEqLeftAction_1_0_3_0()); }
(

)
{ after(grammarAccess.getRelationalAccess().getRelGtEqLeftAction_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relational__Group_1_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getLessThanSignEqualsSignKeyword_1_0_3_1()); }

	'<=' 

{ after(grammarAccess.getRelationalAccess().getLessThanSignEqualsSignKeyword_1_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relational__Group_1_0_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_4__0__Impl
	rule__Relational__Group_1_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getRelEqLeftAction_1_0_4_0()); }
(

)
{ after(grammarAccess.getRelationalAccess().getRelEqLeftAction_1_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relational__Group_1_0_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getEqualsSignKeyword_1_0_4_1()); }

	'=' 

{ after(grammarAccess.getRelationalAccess().getEqualsSignKeyword_1_0_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relational__Group_1_0_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_5__0__Impl
	rule__Relational__Group_1_0_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getRelLtLeftAction_1_0_5_0()); }
(

)
{ after(grammarAccess.getRelationalAccess().getRelLtLeftAction_1_0_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relational__Group_1_0_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getLessThanSignKeyword_1_0_5_1()); }

	'<' 

{ after(grammarAccess.getRelationalAccess().getLessThanSignKeyword_1_0_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relational__Group_1_0_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_6__0__Impl
	rule__Relational__Group_1_0_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getRelGtLeftAction_1_0_6_0()); }
(

)
{ after(grammarAccess.getRelationalAccess().getRelGtLeftAction_1_0_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relational__Group_1_0_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational__Group_1_0_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__Group_1_0_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getGreaterThanSignKeyword_1_0_6_1()); }

	'>' 

{ after(grammarAccess.getRelationalAccess().getGreaterThanSignKeyword_1_0_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
(rule__Addition__Alternatives_1_0)
{ after(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
(rule__Addition__RightAssignment_1_1)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_0__0__Impl
	rule__Addition__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_1__0__Impl
	rule__Addition__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }

	'-' 

{ after(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getPowerParserRuleCall_0()); }
	rulePower
{ after(grammarAccess.getMultiplicationAccess().getPowerParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
(rule__Multiplication__Alternatives_1_0)
{ after(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
(rule__Multiplication__RightAssignment_1_1)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_0__0__Impl
	rule__Multiplication__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_1__0__Impl
	rule__Multiplication__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }

	'/' 

{ after(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Power__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group__0__Impl
	rule__Power__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getUnaryExprParserRuleCall_0()); }
	ruleUnaryExpr
{ after(grammarAccess.getPowerAccess().getUnaryExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getGroup_1()); }
(rule__Power__Group_1__0)*
{ after(grammarAccess.getPowerAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Power__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group_1__0__Impl
	rule__Power__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getGroup_1_0()); }
(rule__Power__Group_1_0__0)
{ after(grammarAccess.getPowerAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getRightAssignment_1_1()); }
(rule__Power__RightAssignment_1_1)
{ after(grammarAccess.getPowerAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Power__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group_1_0__0__Impl
	rule__Power__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getPowLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getPowerAccess().getPowLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getCircumflexAccentKeyword_1_0_1()); }

	'^' 

{ after(grammarAccess.getPowerAccess().getCircumflexAccentKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpr__Group__0__Impl
	rule__UnaryExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExprAccess().getOpAssignment_0()); }
(rule__UnaryExpr__OpAssignment_0)?
{ after(grammarAccess.getUnaryExprAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpr__Group__1__Impl
	rule__UnaryExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExprAccess().getQualifiersAssignment_1()); }
(rule__UnaryExpr__QualifiersAssignment_1)*
{ after(grammarAccess.getUnaryExprAccess().getQualifiersAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpr__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExprAccess().getRightAssignment_2()); }
(rule__UnaryExpr__RightAssignment_2)
{ after(grammarAccess.getUnaryExprAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrePrimaryExpr__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrePrimaryExpr__Group_2__0__Impl
	rule__PrePrimaryExpr__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrePrimaryExpr__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrePrimaryExprAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getPrePrimaryExprAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrePrimaryExpr__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrePrimaryExpr__Group_2__1__Impl
	rule__PrePrimaryExpr__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrePrimaryExpr__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrePrimaryExprAccess().getExpressionParserRuleCall_2_1()); }
	ruleExpression
{ after(grammarAccess.getPrePrimaryExprAccess().getExpressionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrePrimaryExpr__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrePrimaryExpr__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrePrimaryExpr__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrePrimaryExprAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getPrePrimaryExprAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AbstractRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRef__Group__0__Impl
	rule__AbstractRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRefAccess().getDeclaredParameterParserRuleCall_0()); }
	ruleDeclaredParameter
{ after(grammarAccess.getAbstractRefAccess().getDeclaredParameterParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRefAccess().getGroup_1()); }
(rule__AbstractRef__Group_1__0)?
{ after(grammarAccess.getAbstractRefAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AbstractRef__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRef__Group_1__0__Impl
	rule__AbstractRef__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRef__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRefAccess().getFunctionRefFuncAction_1_0()); }
(

)
{ after(grammarAccess.getAbstractRefAccess().getFunctionRefFuncAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractRef__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRef__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRef__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRefAccess().getGroup_1_1()); }
(rule__AbstractRef__Group_1_1__0)
{ after(grammarAccess.getAbstractRefAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AbstractRef__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRef__Group_1_1__0__Impl
	rule__AbstractRef__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRef__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRefAccess().getLeftParenthesisKeyword_1_1_0()); }

	'(' 

{ after(grammarAccess.getAbstractRefAccess().getLeftParenthesisKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractRef__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRef__Group_1_1__1__Impl
	rule__AbstractRef__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRef__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRefAccess().getArgsAssignment_1_1_1()); }
(rule__AbstractRef__ArgsAssignment_1_1_1)?
{ after(grammarAccess.getAbstractRefAccess().getArgsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractRef__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRef__Group_1_1__2__Impl
	rule__AbstractRef__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRef__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRefAccess().getGroup_1_1_2()); }
(rule__AbstractRef__Group_1_1_2__0)*
{ after(grammarAccess.getAbstractRefAccess().getGroup_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractRef__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRef__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRef__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRefAccess().getRightParenthesisKeyword_1_1_3()); }

	')' 

{ after(grammarAccess.getAbstractRefAccess().getRightParenthesisKeyword_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AbstractRef__Group_1_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRef__Group_1_1_2__0__Impl
	rule__AbstractRef__Group_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRef__Group_1_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRefAccess().getCommaKeyword_1_1_2_0()); }

	',' 

{ after(grammarAccess.getAbstractRefAccess().getCommaKeyword_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractRef__Group_1_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbstractRef__Group_1_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRef__Group_1_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRefAccess().getArgsAssignment_1_1_2_1()); }
(rule__AbstractRef__ArgsAssignment_1_1_2_1)
{ after(grammarAccess.getAbstractRefAccess().getArgsAssignment_1_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TerminalExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_0__0__Impl
	rule__TerminalExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getIntLiteralAction_0_0()); }
(

)
{ after(grammarAccess.getTerminalExpressionAccess().getIntLiteralAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueAssignment_0_1()); }
(rule__TerminalExpression__ValueAssignment_0_1)
{ after(grammarAccess.getTerminalExpressionAccess().getValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TerminalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_1__0__Impl
	rule__TerminalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getStringLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getTerminalExpressionAccess().getStringLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueAssignment_1_1()); }
(rule__TerminalExpression__ValueAssignment_1_1)
{ after(grammarAccess.getTerminalExpressionAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TerminalExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_2__0__Impl
	rule__TerminalExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getBooleanLiteralAction_2_0()); }
(

)
{ after(grammarAccess.getTerminalExpressionAccess().getBooleanLiteralAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueAssignment_2_1()); }
(rule__TerminalExpression__ValueAssignment_2_1)
{ after(grammarAccess.getTerminalExpressionAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__DeclarationsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_1_0_0()); }
	ruleDeclaration{ after(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__StatementsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_1_1_0()); }
	ruleStatement{ after(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefSort__ReifiedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefSortAccess().getReifiedReifiedKeyword_0_0()); }
(
{ before(grammarAccess.getDefSortAccess().getReifiedReifiedKeyword_0_0()); }

	'reified' 

{ after(grammarAccess.getDefSortAccess().getReifiedReifiedKeyword_0_0()); }
)

{ after(grammarAccess.getDefSortAccess().getReifiedReifiedKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefSort__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefSortAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getDefSortAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefSort__TypeAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefSortAccess().getTypeIDTerminalRuleCall_3_1_0()); }
	RULE_ID{ after(grammarAccess.getDefSortAccess().getTypeIDTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefRange__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefRangeAccess().getNameDefSortCrossReference_1_0()); }
(
{ before(grammarAccess.getDefRangeAccess().getNameDefSortIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDefRangeAccess().getNameDefSortIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDefRangeAccess().getNameDefSortCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefRange__MinAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefRangeAccess().getMinINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getDefRangeAccess().getMinINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefRange__MaxAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefRangeAccess().getMaxINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getDefRangeAccess().getMaxINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefOption__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefOptionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDefOptionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefOption__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefOptionAccess().getValueINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getDefOptionAccess().getValueINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefCompletion__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefCompletionAccess().getNameDefinitionCrossReference_1_0()); }
(
{ before(grammarAccess.getDefCompletionAccess().getNameDefinitionIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDefCompletionAccess().getNameDefinitionIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDefCompletionAccess().getNameDefinitionCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefNonInertia__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefNonInertiaAccess().getNameDefinitionCrossReference_1_0()); }
(
{ before(grammarAccess.getDefNonInertiaAccess().getNameDefinitionIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDefNonInertiaAccess().getNameDefinitionIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDefNonInertiaAccess().getNameDefinitionCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SortDefinition__SortAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSortDefinitionAccess().getSortDefSortCrossReference_0_0()); }
(
{ before(grammarAccess.getSortDefinitionAccess().getSortDefSortIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getSortDefinitionAccess().getSortDefSortIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getSortDefinitionAccess().getSortDefSortCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SortDefinition__DefinitionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSortDefinitionAccess().getDefinitionsDefinitionParserRuleCall_1_0()); }
	ruleDefinition{ after(grammarAccess.getSortDefinitionAccess().getDefinitionsDefinitionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SortDefinition__DefinitionsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSortDefinitionAccess().getDefinitionsDefinitionParserRuleCall_2_1_0()); }
	ruleDefinition{ after(grammarAccess.getSortDefinitionAccess().getDefinitionsDefinitionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ArgsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getArgsDeclaredParameterParserRuleCall_1_1_0()); }
	ruleDeclaredParameter{ after(grammarAccess.getDefinitionAccess().getArgsDeclaredParameterParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ArgsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getArgsDeclaredParameterParserRuleCall_1_2_1_0()); }
	ruleDeclaredParameter{ after(grammarAccess.getDefinitionAccess().getArgsDeclaredParameterParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ReturnAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getReturnDeclaredParameterParserRuleCall_2_1_0()); }
	ruleDeclaredParameter{ after(grammarAccess.getDefinitionAccess().getReturnDeclaredParameterParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredParameter__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaredParameterAccess().getNameDefSortCrossReference_0_0()); }
(
{ before(grammarAccess.getDeclaredParameterAccess().getNameDefSortIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getDeclaredParameterAccess().getNameDefSortIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getDeclaredParameterAccess().getNameDefSortCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredParameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaredParameterAccess().getNameDefinitionCrossReference_1_0()); }
(
{ before(grammarAccess.getDeclaredParameterAccess().getNameDefinitionIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDeclaredParameterAccess().getNameDefinitionIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDeclaredParameterAccess().getNameDefinitionCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__QualifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getQualifiersQualifierParserRuleCall_0_0()); }
	ruleQualifier{ after(grammarAccess.getExpressionAccess().getQualifiersQualifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExprAssignmentOpParserRuleCall_1_0()); }
	ruleAssignmentOp{ after(grammarAccess.getExpressionAccess().getExprAssignmentOpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__NamesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsAccess().getNamesDeclaredParameterParserRuleCall_1_0()); }
	ruleDeclaredParameter{ after(grammarAccess.getExistsAccess().getNamesDeclaredParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__NamesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsAccess().getNamesDeclaredParameterParserRuleCall_2_1_0()); }
	ruleDeclaredParameter{ after(grammarAccess.getExistsAccess().getNamesDeclaredParameterParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Forall__NamesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallAccess().getNamesDeclaredParameterParserRuleCall_1_0()); }
	ruleDeclaredParameter{ after(grammarAccess.getForallAccess().getNamesDeclaredParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Forall__NamesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallAccess().getNamesDeclaredParameterParserRuleCall_2_1_0()); }
	ruleDeclaredParameter{ after(grammarAccess.getForallAccess().getNamesDeclaredParameterParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOp__QualifiersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOpAccess().getQualifiersQualifierParserRuleCall_1_1_0()); }
	ruleQualifier{ after(grammarAccess.getAssignmentOpAccess().getQualifiersQualifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOp__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOpAccess().getRightOrExpParserRuleCall_1_2_0()); }
	ruleOrExp{ after(grammarAccess.getAssignmentOpAccess().getRightOrExpParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExp__QualifiersAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpAccess().getQualifiersQualifierParserRuleCall_1_2_0()); }
	ruleQualifier{ after(grammarAccess.getOrExpAccess().getQualifiersQualifierParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExp__RightAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpAccess().getRightAndExpParserRuleCall_1_3_0()); }
	ruleAndExp{ after(grammarAccess.getOrExpAccess().getRightAndExpParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__QualifiersAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getQualifiersQualifierParserRuleCall_1_2_0()); }
	ruleQualifier{ after(grammarAccess.getAndExpAccess().getQualifiersQualifierParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__RightAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getRightRelationalParserRuleCall_1_3_0()); }
	ruleRelational{ after(grammarAccess.getAndExpAccess().getRightRelationalParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relational__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalAccess().getRightAdditionParserRuleCall_1_1_0()); }
	ruleAddition{ after(grammarAccess.getRelationalAccess().getRightAdditionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightPowerParserRuleCall_1_1_0()); }
	rulePower{ after(grammarAccess.getMultiplicationAccess().getRightPowerParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Power__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getRightUnaryExprParserRuleCall_1_1_0()); }
	ruleUnaryExpr{ after(grammarAccess.getPowerAccess().getRightUnaryExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExprAccess().getOpUnarOpEnumRuleCall_0_0()); }
	ruleUnarOp{ after(grammarAccess.getUnaryExprAccess().getOpUnarOpEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__QualifiersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExprAccess().getQualifiersQualifierParserRuleCall_1_0()); }
	ruleQualifier{ after(grammarAccess.getUnaryExprAccess().getQualifiersQualifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExprAccess().getRightPrePrimaryExprParserRuleCall_2_0()); }
	rulePrePrimaryExpr{ after(grammarAccess.getUnaryExprAccess().getRightPrePrimaryExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRef__ArgsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRefAccess().getArgsExpressionParserRuleCall_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getAbstractRefAccess().getArgsExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractRef__ArgsAssignment_1_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractRefAccess().getArgsExpressionParserRuleCall_1_1_2_1_0()); }
	ruleExpression{ after(grammarAccess.getAbstractRefAccess().getArgsExpressionParserRuleCall_1_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__ValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); }
	RULE_INT{ after(grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueBOOLEANTerminalRuleCall_2_1_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getTerminalExpressionAccess().getValueBOOLEANTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_INT : ('0'|'1'..'9' ('0'..'9')*);

RULE_BOOLEAN : ('true'|'false');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : ';' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


