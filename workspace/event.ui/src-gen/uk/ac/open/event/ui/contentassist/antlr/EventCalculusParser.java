/*
* generated by Xtext
*/
package uk.ac.open.event.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import uk.ac.open.event.services.EventCalculusGrammarAccess;

public class EventCalculusParser extends AbstractContentAssistParser {
	
	@Inject
	private EventCalculusGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected uk.ac.open.event.ui.contentassist.antlr.internal.InternalEventCalculusParser createParser() {
		uk.ac.open.event.ui.contentassist.antlr.internal.InternalEventCalculusParser result = new uk.ac.open.event.ui.contentassist.antlr.internal.InternalEventCalculusParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_1(), "rule__Model__Alternatives_1");
					put(grammarAccess.getAnnotationAccess().getAlternatives_3(), "rule__Annotation__Alternatives_3");
					put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
					put(grammarAccess.getDefinesAccess().getAlternatives(), "rule__Defines__Alternatives");
					put(grammarAccess.getDefOptionAccess().getAlternatives_1(), "rule__DefOption__Alternatives_1");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getQualifierAccess().getAlternatives(), "rule__Qualifier__Alternatives");
					put(grammarAccess.getAssignmentOpAccess().getAlternatives_1_0(), "rule__AssignmentOp__Alternatives_1_0");
					put(grammarAccess.getRelationalAccess().getAlternatives_1_0(), "rule__Relational__Alternatives_1_0");
					put(grammarAccess.getAdditionAccess().getAlternatives_1_0(), "rule__Addition__Alternatives_1_0");
					put(grammarAccess.getMultiplicationAccess().getAlternatives_1_0(), "rule__Multiplication__Alternatives_1_0");
					put(grammarAccess.getPrePrimaryExprAccess().getAlternatives(), "rule__PrePrimaryExpr__Alternatives");
					put(grammarAccess.getTerminalExpressionAccess().getAlternatives(), "rule__TerminalExpression__Alternatives");
					put(grammarAccess.getANNOTATION_TYPEAccess().getAlternatives(), "rule__ANNOTATION_TYPE__Alternatives");
					put(grammarAccess.getLabelTypeAccess().getAlternatives(), "rule__LabelType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getAnnotationAccess().getGroup(), "rule__Annotation__Group__0");
					put(grammarAccess.getDefSortAccess().getGroup(), "rule__DefSort__Group__0");
					put(grammarAccess.getDefSortAccess().getGroup_4(), "rule__DefSort__Group_4__0");
					put(grammarAccess.getDefRangeAccess().getGroup(), "rule__DefRange__Group__0");
					put(grammarAccess.getDefOptionAccess().getGroup(), "rule__DefOption__Group__0");
					put(grammarAccess.getDefOptionAccess().getGroup_1_0(), "rule__DefOption__Group_1_0__0");
					put(grammarAccess.getDefOptionAccess().getGroup_1_1(), "rule__DefOption__Group_1_1__0");
					put(grammarAccess.getDefCompletionAccess().getGroup(), "rule__DefCompletion__Group__0");
					put(grammarAccess.getDefNonInertiaAccess().getGroup(), "rule__DefNonInertia__Group__0");
					put(grammarAccess.getDefNonInertiaAccess().getGroup_3(), "rule__DefNonInertia__Group_3__0");
					put(grammarAccess.getDefXorAccess().getGroup(), "rule__DefXor__Group__0");
					put(grammarAccess.getDefXorAccess().getGroup_3(), "rule__DefXor__Group_3__0");
					put(grammarAccess.getDefMutexAccess().getGroup(), "rule__DefMutex__Group__0");
					put(grammarAccess.getDefMutexAccess().getGroup_3(), "rule__DefMutex__Group_3__0");
					put(grammarAccess.getLabeledExpressionAccess().getGroup(), "rule__LabeledExpression__Group__0");
					put(grammarAccess.getLabeledExpressionAccess().getGroup_1(), "rule__LabeledExpression__Group_1__0");
					put(grammarAccess.getSortDefinitionAccess().getGroup(), "rule__SortDefinition__Group__0");
					put(grammarAccess.getSortDefinitionAccess().getGroup_2(), "rule__SortDefinition__Group_2__0");
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup_1(), "rule__Definition__Group_1__0");
					put(grammarAccess.getDefinitionAccess().getGroup_1_2(), "rule__Definition__Group_1_2__0");
					put(grammarAccess.getDefinitionAccess().getGroup_2(), "rule__Definition__Group_2__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getParametersAccess().getGroup(), "rule__Parameters__Group__0");
					put(grammarAccess.getParametersAccess().getGroup_1(), "rule__Parameters__Group_1__0");
					put(grammarAccess.getExistsAccess().getGroup(), "rule__Exists__Group__0");
					put(grammarAccess.getForallAccess().getGroup(), "rule__Forall__Group__0");
					put(grammarAccess.getAssignmentOpAccess().getGroup(), "rule__AssignmentOp__Group__0");
					put(grammarAccess.getAssignmentOpAccess().getGroup_1(), "rule__AssignmentOp__Group_1__0");
					put(grammarAccess.getAssignmentOpAccess().getGroup_1_0_0(), "rule__AssignmentOp__Group_1_0_0__0");
					put(grammarAccess.getAssignmentOpAccess().getGroup_1_0_1(), "rule__AssignmentOp__Group_1_0_1__0");
					put(grammarAccess.getOrExpAccess().getGroup(), "rule__OrExp__Group__0");
					put(grammarAccess.getOrExpAccess().getGroup_1(), "rule__OrExp__Group_1__0");
					put(grammarAccess.getAndExpAccess().getGroup(), "rule__AndExp__Group__0");
					put(grammarAccess.getAndExpAccess().getGroup_1(), "rule__AndExp__Group_1__0");
					put(grammarAccess.getRelationalAccess().getGroup(), "rule__Relational__Group__0");
					put(grammarAccess.getRelationalAccess().getGroup_1(), "rule__Relational__Group_1__0");
					put(grammarAccess.getRelationalAccess().getGroup_1_0_0(), "rule__Relational__Group_1_0_0__0");
					put(grammarAccess.getRelationalAccess().getGroup_1_0_1(), "rule__Relational__Group_1_0_1__0");
					put(grammarAccess.getRelationalAccess().getGroup_1_0_2(), "rule__Relational__Group_1_0_2__0");
					put(grammarAccess.getRelationalAccess().getGroup_1_0_3(), "rule__Relational__Group_1_0_3__0");
					put(grammarAccess.getRelationalAccess().getGroup_1_0_4(), "rule__Relational__Group_1_0_4__0");
					put(grammarAccess.getRelationalAccess().getGroup_1_0_5(), "rule__Relational__Group_1_0_5__0");
					put(grammarAccess.getRelationalAccess().getGroup_1_0_6(), "rule__Relational__Group_1_0_6__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup_1_0_0(), "rule__Addition__Group_1_0_0__0");
					put(grammarAccess.getAdditionAccess().getGroup_1_0_1(), "rule__Addition__Group_1_0_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_0(), "rule__Multiplication__Group_1_0_0__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_1(), "rule__Multiplication__Group_1_0_1__0");
					put(grammarAccess.getPowerAccess().getGroup(), "rule__Power__Group__0");
					put(grammarAccess.getPowerAccess().getGroup_1(), "rule__Power__Group_1__0");
					put(grammarAccess.getPowerAccess().getGroup_1_0(), "rule__Power__Group_1_0__0");
					put(grammarAccess.getUnaryExprAccess().getGroup(), "rule__UnaryExpr__Group__0");
					put(grammarAccess.getPrePrimaryExprAccess().getGroup_2(), "rule__PrePrimaryExpr__Group_2__0");
					put(grammarAccess.getPrePrimaryExprAccess().getGroup_3(), "rule__PrePrimaryExpr__Group_3__0");
					put(grammarAccess.getAbstractRefAccess().getGroup(), "rule__AbstractRef__Group__0");
					put(grammarAccess.getAbstractRefAccess().getGroup_1(), "rule__AbstractRef__Group_1__0");
					put(grammarAccess.getAbstractRefAccess().getGroup_1_1(), "rule__AbstractRef__Group_1_1__0");
					put(grammarAccess.getAbstractRefAccess().getGroup_1_1_2(), "rule__AbstractRef__Group_1_1_2__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_0(), "rule__TerminalExpression__Group_0__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_1(), "rule__TerminalExpression__Group_1__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_2(), "rule__TerminalExpression__Group_2__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getModelAccess().getImportsAssignment_0(), "rule__Model__ImportsAssignment_0");
					put(grammarAccess.getModelAccess().getDeclarationsAssignment_1_0(), "rule__Model__DeclarationsAssignment_1_0");
					put(grammarAccess.getModelAccess().getStatementsAssignment_1_1(), "rule__Model__StatementsAssignment_1_1");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getAnnotationAccess().getTypeAssignment_2(), "rule__Annotation__TypeAssignment_2");
					put(grammarAccess.getAnnotationAccess().getValueAssignment_3_0(), "rule__Annotation__ValueAssignment_3_0");
					put(grammarAccess.getAnnotationAccess().getValueAssignment_3_1(), "rule__Annotation__ValueAssignment_3_1");
					put(grammarAccess.getDefSortAccess().getAnnotationsAssignment_0(), "rule__DefSort__AnnotationsAssignment_0");
					put(grammarAccess.getDefSortAccess().getReifiedAssignment_1(), "rule__DefSort__ReifiedAssignment_1");
					put(grammarAccess.getDefSortAccess().getNameAssignment_3(), "rule__DefSort__NameAssignment_3");
					put(grammarAccess.getDefSortAccess().getTypeAssignment_4_1(), "rule__DefSort__TypeAssignment_4_1");
					put(grammarAccess.getDefRangeAccess().getAnnotationsAssignment_0(), "rule__DefRange__AnnotationsAssignment_0");
					put(grammarAccess.getDefRangeAccess().getNameAssignment_2(), "rule__DefRange__NameAssignment_2");
					put(grammarAccess.getDefRangeAccess().getMinAssignment_3(), "rule__DefRange__MinAssignment_3");
					put(grammarAccess.getDefRangeAccess().getMaxAssignment_4(), "rule__DefRange__MaxAssignment_4");
					put(grammarAccess.getDefOptionAccess().getAnnotationsAssignment_0(), "rule__DefOption__AnnotationsAssignment_0");
					put(grammarAccess.getDefOptionAccess().getNameAssignment_1_0_1(), "rule__DefOption__NameAssignment_1_0_1");
					put(grammarAccess.getDefOptionAccess().getValueAssignment_1_0_2(), "rule__DefOption__ValueAssignment_1_0_2");
					put(grammarAccess.getDefOptionAccess().getNameAssignment_1_1_1(), "rule__DefOption__NameAssignment_1_1_1");
					put(grammarAccess.getDefOptionAccess().getValue2Assignment_1_1_2(), "rule__DefOption__Value2Assignment_1_1_2");
					put(grammarAccess.getDefCompletionAccess().getAnnotationsAssignment_0(), "rule__DefCompletion__AnnotationsAssignment_0");
					put(grammarAccess.getDefCompletionAccess().getTypeAssignment_2(), "rule__DefCompletion__TypeAssignment_2");
					put(grammarAccess.getDefCompletionAccess().getLabelAssignment_3(), "rule__DefCompletion__LabelAssignment_3");
					put(grammarAccess.getDefNonInertiaAccess().getAnnotationsAssignment_0(), "rule__DefNonInertia__AnnotationsAssignment_0");
					put(grammarAccess.getDefNonInertiaAccess().getNamesAssignment_2(), "rule__DefNonInertia__NamesAssignment_2");
					put(grammarAccess.getDefNonInertiaAccess().getNamesAssignment_3_1(), "rule__DefNonInertia__NamesAssignment_3_1");
					put(grammarAccess.getDefXorAccess().getAnnotationsAssignment_0(), "rule__DefXor__AnnotationsAssignment_0");
					put(grammarAccess.getDefXorAccess().getNamesAssignment_2(), "rule__DefXor__NamesAssignment_2");
					put(grammarAccess.getDefXorAccess().getNamesAssignment_3_1(), "rule__DefXor__NamesAssignment_3_1");
					put(grammarAccess.getDefMutexAccess().getAnnotationsAssignment_0(), "rule__DefMutex__AnnotationsAssignment_0");
					put(grammarAccess.getDefMutexAccess().getNamesAssignment_2(), "rule__DefMutex__NamesAssignment_2");
					put(grammarAccess.getDefMutexAccess().getNamesAssignment_3_1(), "rule__DefMutex__NamesAssignment_3_1");
					put(grammarAccess.getLabeledExpressionAccess().getAnnotationsAssignment_0(), "rule__LabeledExpression__AnnotationsAssignment_0");
					put(grammarAccess.getLabeledExpressionAccess().getNameAssignment_1_0(), "rule__LabeledExpression__NameAssignment_1_0");
					put(grammarAccess.getLabeledExpressionAccess().getExprAssignment_2(), "rule__LabeledExpression__ExprAssignment_2");
					put(grammarAccess.getSortDefinitionAccess().getSortAssignment_0(), "rule__SortDefinition__SortAssignment_0");
					put(grammarAccess.getSortDefinitionAccess().getDefinitionsAssignment_1(), "rule__SortDefinition__DefinitionsAssignment_1");
					put(grammarAccess.getSortDefinitionAccess().getDefinitionsAssignment_2_1(), "rule__SortDefinition__DefinitionsAssignment_2_1");
					put(grammarAccess.getDefinitionAccess().getNameAssignment_0(), "rule__Definition__NameAssignment_0");
					put(grammarAccess.getDefinitionAccess().getArgsAssignment_1_1(), "rule__Definition__ArgsAssignment_1_1");
					put(grammarAccess.getDefinitionAccess().getArgsAssignment_1_2_1(), "rule__Definition__ArgsAssignment_1_2_1");
					put(grammarAccess.getDefinitionAccess().getReturnAssignment_2_1(), "rule__Definition__ReturnAssignment_2_1");
					put(grammarAccess.getExpressionAccess().getExprAssignment_0(), "rule__Expression__ExprAssignment_0");
					put(grammarAccess.getExpressionAccess().getQualifiersAssignment_1_0(), "rule__Expression__QualifiersAssignment_1_0");
					put(grammarAccess.getExpressionAccess().getExprAssignment_1_1(), "rule__Expression__ExprAssignment_1_1");
					put(grammarAccess.getParametersAccess().getNamesAssignment_0(), "rule__Parameters__NamesAssignment_0");
					put(grammarAccess.getParametersAccess().getNamesAssignment_1_1(), "rule__Parameters__NamesAssignment_1_1");
					put(grammarAccess.getExistsAccess().getOpAssignment_0(), "rule__Exists__OpAssignment_0");
					put(grammarAccess.getExistsAccess().getParametersAssignment_2(), "rule__Exists__ParametersAssignment_2");
					put(grammarAccess.getForallAccess().getOpAssignment_0(), "rule__Forall__OpAssignment_0");
					put(grammarAccess.getForallAccess().getParametersAssignment_2(), "rule__Forall__ParametersAssignment_2");
					put(grammarAccess.getAssignmentOpAccess().getQAssignment_1_1(), "rule__AssignmentOp__QAssignment_1_1");
					put(grammarAccess.getAssignmentOpAccess().getRightAssignment_1_2(), "rule__AssignmentOp__RightAssignment_1_2");
					put(grammarAccess.getOrExpAccess().getQAssignment_1_2(), "rule__OrExp__QAssignment_1_2");
					put(grammarAccess.getOrExpAccess().getRightAssignment_1_3(), "rule__OrExp__RightAssignment_1_3");
					put(grammarAccess.getAndExpAccess().getQAssignment_1_2(), "rule__AndExp__QAssignment_1_2");
					put(grammarAccess.getAndExpAccess().getRightAssignment_1_3(), "rule__AndExp__RightAssignment_1_3");
					put(grammarAccess.getRelationalAccess().getRightAssignment_1_1(), "rule__Relational__RightAssignment_1_1");
					put(grammarAccess.getAdditionAccess().getRightAssignment_1_1(), "rule__Addition__RightAssignment_1_1");
					put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1(), "rule__Multiplication__RightAssignment_1_1");
					put(grammarAccess.getPowerAccess().getRightAssignment_1_1(), "rule__Power__RightAssignment_1_1");
					put(grammarAccess.getUnaryExprAccess().getOpAssignment_0(), "rule__UnaryExpr__OpAssignment_0");
					put(grammarAccess.getUnaryExprAccess().getRightAssignment_1(), "rule__UnaryExpr__RightAssignment_1");
					put(grammarAccess.getPrePrimaryExprAccess().getNAssignment_3_1(), "rule__PrePrimaryExpr__NAssignment_3_1");
					put(grammarAccess.getAbstractRefAccess().getDefineAssignment_0(), "rule__AbstractRef__DefineAssignment_0");
					put(grammarAccess.getAbstractRefAccess().getArgsAssignment_1_1_1(), "rule__AbstractRef__ArgsAssignment_1_1_1");
					put(grammarAccess.getAbstractRefAccess().getArgsAssignment_1_1_2_1(), "rule__AbstractRef__ArgsAssignment_1_1_2_1");
					put(grammarAccess.getTerminalExpressionAccess().getValueAssignment_0_1(), "rule__TerminalExpression__ValueAssignment_0_1");
					put(grammarAccess.getTerminalExpressionAccess().getValueAssignment_1_1(), "rule__TerminalExpression__ValueAssignment_1_1");
					put(grammarAccess.getTerminalExpressionAccess().getValueAssignment_2_1(), "rule__TerminalExpression__ValueAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			uk.ac.open.event.ui.contentassist.antlr.internal.InternalEventCalculusParser typedParser = (uk.ac.open.event.ui.contentassist.antlr.internal.InternalEventCalculusParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public EventCalculusGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(EventCalculusGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
