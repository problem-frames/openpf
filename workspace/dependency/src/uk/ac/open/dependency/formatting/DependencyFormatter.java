/*
 * generated by Xtext
 */
package uk.ac.open.dependency.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class DependencyFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
		uk.ac.open.dependency.services.DependencyGrammarAccess f = (uk.ac.open.dependency.services.DependencyGrammarAccess) getGrammarAccess();

		c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());
		// FIXED
	    c.setLinewrap(2).before(f.getNodeAccess().getNameAssignment_0());
	    c.setLinewrap().before(f.getNodeAccess().getSeeKeyword_1_1_0());
	    c.setLinewrap().before(f.getCouplingAccess().getFromNodeIDTerminalRuleCall_0_0_1());
	    c.setLinewrap().before(f.getPrecedenceAccess().getFromNodeIDTerminalRuleCall_0_0_1());
	}
}
