/*
* generated by Xtext
*/

package uk.ac.open.dependency.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DependencyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNodesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNodesNodeParserRuleCall_0_0 = (RuleCall)cNodesAssignment_0.eContents().get(0);
		private final Assignment cDependenciesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDependenciesDependencyParserRuleCall_1_0 = (RuleCall)cDependenciesAssignment_1.eContents().get(0);
		
		//Model:
		//	(nodes+=Node | dependencies+=Dependency)*;
		public ParserRule getRule() { return rule; }

		//(nodes+=Node | dependencies+=Dependency)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//nodes+=Node
		public Assignment getNodesAssignment_0() { return cNodesAssignment_0; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_0_0() { return cNodesNodeParserRuleCall_0_0; }

		//dependencies+=Dependency
		public Assignment getDependenciesAssignment_1() { return cDependenciesAssignment_1; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_1_0() { return cDependenciesDependencyParserRuleCall_1_0; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSeeKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cReferrenceAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cReferrenceSTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cReferrenceAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Node:
		//	name=ID ("{" ("see" referrence+=STRING)* "}")?;
		public ParserRule getRule() { return rule; }

		//name=ID ("{" ("see" referrence+=STRING)* "}")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("{" ("see" referrence+=STRING)* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//("see" referrence+=STRING)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"see"
		public Keyword getSeeKeyword_1_1_0() { return cSeeKeyword_1_1_0; }

		//referrence+=STRING
		public Assignment getReferrenceAssignment_1_1_1() { return cReferrenceAssignment_1_1_1; }

		//STRING
		public RuleCall getReferrenceSTRINGTerminalRuleCall_1_1_1_0() { return cReferrenceSTRINGTerminalRuleCall_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCouplingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrecedenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Dependency:
		//	Coupling | Precedence;
		public ParserRule getRule() { return rule; }

		//Coupling | Precedence
		public Alternatives getAlternatives() { return cAlternatives; }

		//Coupling
		public RuleCall getCouplingParserRuleCall_0() { return cCouplingParserRuleCall_0; }

		//Precedence
		public RuleCall getPrecedenceParserRuleCall_1() { return cPrecedenceParserRuleCall_1; }
	}

	public class CouplingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Coupling");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromNodeCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromNodeIDTerminalRuleCall_0_0_1 = (RuleCall)cFromNodeCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToNodeCrossReference_2_0 = (CrossReference)cToAssignment_2.eContents().get(0);
		private final RuleCall cToNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cToNodeCrossReference_2_0.eContents().get(1);
		
		//Coupling:
		//	from=[Node] "--" to=[Node];
		public ParserRule getRule() { return rule; }

		//from=[Node] "--" to=[Node]
		public Group getGroup() { return cGroup; }

		//from=[Node]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//[Node]
		public CrossReference getFromNodeCrossReference_0_0() { return cFromNodeCrossReference_0_0; }

		//ID
		public RuleCall getFromNodeIDTerminalRuleCall_0_0_1() { return cFromNodeIDTerminalRuleCall_0_0_1; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }

		//to=[Node]
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//[Node]
		public CrossReference getToNodeCrossReference_2_0() { return cToNodeCrossReference_2_0; }

		//ID
		public RuleCall getToNodeIDTerminalRuleCall_2_0_1() { return cToNodeIDTerminalRuleCall_2_0_1; }
	}

	public class PrecedenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Precedence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromNodeCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromNodeIDTerminalRuleCall_0_0_1 = (RuleCall)cFromNodeCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToNodeCrossReference_2_0 = (CrossReference)cToAssignment_2.eContents().get(0);
		private final RuleCall cToNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cToNodeCrossReference_2_0.eContents().get(1);
		
		//Precedence:
		//	from=[Node] "->" to=[Node];
		public ParserRule getRule() { return rule; }

		//from=[Node] "->" to=[Node]
		public Group getGroup() { return cGroup; }

		//from=[Node]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//[Node]
		public CrossReference getFromNodeCrossReference_0_0() { return cFromNodeCrossReference_0_0; }

		//ID
		public RuleCall getFromNodeIDTerminalRuleCall_0_0_1() { return cFromNodeIDTerminalRuleCall_0_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//to=[Node]
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//[Node]
		public CrossReference getToNodeCrossReference_2_0() { return cToNodeCrossReference_2_0; }

		//ID
		public RuleCall getToNodeIDTerminalRuleCall_2_0_1() { return cToNodeIDTerminalRuleCall_2_0_1; }
	}
	
	
	private ModelElements pModel;
	private NodeElements pNode;
	private DependencyElements pDependency;
	private CouplingElements pCoupling;
	private PrecedenceElements pPrecedence;
	private TerminalRule tID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DependencyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(nodes+=Node | dependencies+=Dependency)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Node:
	//	name=ID ("{" ("see" referrence+=STRING)* "}")?;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//Dependency:
	//	Coupling | Precedence;
	public DependencyElements getDependencyAccess() {
		return (pDependency != null) ? pDependency : (pDependency = new DependencyElements());
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}

	//Coupling:
	//	from=[Node] "--" to=[Node];
	public CouplingElements getCouplingAccess() {
		return (pCoupling != null) ? pCoupling : (pCoupling = new CouplingElements());
	}
	
	public ParserRule getCouplingRule() {
		return getCouplingAccess().getRule();
	}

	//Precedence:
	//	from=[Node] "->" to=[Node];
	public PrecedenceElements getPrecedenceAccess() {
		return (pPrecedence != null) ? pPrecedence : (pPrecedence = new PrecedenceElements());
	}
	
	public ParserRule getPrecedenceRule() {
		return getPrecedenceAccess().getRule();
	}

	//terminal ID:
	//	"#" !"#"+ "#" | "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
