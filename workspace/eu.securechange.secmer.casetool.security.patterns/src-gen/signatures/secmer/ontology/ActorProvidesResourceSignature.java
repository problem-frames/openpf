/*******************************************************************************
 * EMF Specific pattern signature of the secmer.ontology.actorProvidesResource pattern
 * Generated by EMF-IncQuery
 *******************************************************************************/

package signatures.secmer.ontology;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.viatra2.compiled.emf.runtime.api.IPatternSignature;

/**
 * Domain specific Data transfer Object of the secmer.ontology.actorProvidesResource pattern.
 * Class fields correspond to parameters of the pattern. Fields with value null are considered unassigned.
 * Each instance is a partial substitution of pattern parameters, 
 * usable e.g. to represent a match of the pattern.
 */
public class ActorProvidesResourceSignature implements IPatternSignature {

	//constructor
	public ActorProvidesResourceSignature(Object Actor, Object Resource) {
		this.Actor = Actor;
		this.Resource = Resource;	
	}

	//private attributes
	private Object Actor;	private Object Resource;
	
	//getter methods
	public Object getActor(){
		 return Actor;
	}

	public Object getResource(){
		 return Resource;
	}
	
	//setter methods
	public void setActor(Object Actor){
		 this.Actor=Actor;
	}
	public void setResource(Object Resource){
		 this.Resource=Resource;
	}

	//overridden hashCode() and equals() with Tuple-semantics
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ActorProvidesResourceSignature other = (ActorProvidesResourceSignature) obj;
		if (Actor == null) {if (other.Actor != null) return false;}
		else if (!Actor.equals(other.Actor)) return false;
		if (Resource == null) {if (other.Resource != null) return false;}
		else if (!Resource.equals(other.Resource)) return false;
		return true;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((Actor == null) ? 0 : Actor.hashCode());
		result = prime * result + ((Resource == null) ? 0 : Resource.hashCode());
		return result;
	}

	@Override
	public String toString(){
		EStructuralFeature feature = null;
		String _temp = " A(n) actorProvidesResource signature object ("+hashCode()+")\n";
		// Checks that Actor has a name attribute and uses if it has 
		_temp += "\tActor = ";
		feature = null;
		if(Actor instanceof EObject)
			feature = ((EObject)Actor).eClass().getEStructuralFeature("name");

		if(feature != null && ((EObject)Actor).eGet(feature) != null) _temp += ((EObject)Actor).eGet(feature).toString();
		else _temp += Actor.toString();
		_temp += "\n";

		// Checks that Resource has a name attribute and uses if it has 
		_temp += "\tResource = ";
		feature = null;
		if(Resource instanceof EObject)
			feature = ((EObject)Resource).eClass().getEStructuralFeature("name");

		if(feature != null && ((EObject)Resource).eGet(feature) != null) _temp += ((EObject)Resource).eGet(feature).toString();
		else _temp += Resource.toString();
		_temp += "\n";

		return _temp;
	}

	@Override
	public Object[] toArray() {
		return new Object[] {Actor, Resource};
	}
}
