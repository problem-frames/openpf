/*******************************************************************************
 * EMF Specific pattern signature of the secmer.core.hasLink pattern
 * Generated by EMF-IncQuery
 *******************************************************************************/

package signatures.secmer.core;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.viatra2.compiled.emf.runtime.api.IPatternSignature;

/**
 * Domain specific Data transfer Object of the secmer.core.hasLink pattern.
 * Class fields correspond to parameters of the pattern. Fields with value null are considered unassigned.
 * Each instance is a partial substitution of pattern parameters, 
 * usable e.g. to represent a match of the pattern.
 */
public class HasLinkSignature implements IPatternSignature {

	//constructor
	public HasLinkSignature(Object ReferenceModel, Object ReferenceLink) {
		this.ReferenceModel = ReferenceModel;
		this.ReferenceLink = ReferenceLink;	
	}

	//private attributes
	private Object ReferenceModel;	private Object ReferenceLink;
	
	//getter methods
	public Object getReferenceModel(){
		 return ReferenceModel;
	}

	public Object getReferenceLink(){
		 return ReferenceLink;
	}
	
	//setter methods
	public void setReferenceModel(Object ReferenceModel){
		 this.ReferenceModel=ReferenceModel;
	}
	public void setReferenceLink(Object ReferenceLink){
		 this.ReferenceLink=ReferenceLink;
	}

	//overridden hashCode() and equals() with Tuple-semantics
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		HasLinkSignature other = (HasLinkSignature) obj;
		if (ReferenceModel == null) {if (other.ReferenceModel != null) return false;}
		else if (!ReferenceModel.equals(other.ReferenceModel)) return false;
		if (ReferenceLink == null) {if (other.ReferenceLink != null) return false;}
		else if (!ReferenceLink.equals(other.ReferenceLink)) return false;
		return true;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((ReferenceModel == null) ? 0 : ReferenceModel.hashCode());
		result = prime * result + ((ReferenceLink == null) ? 0 : ReferenceLink.hashCode());
		return result;
	}

	@Override
	public String toString(){
		EStructuralFeature feature = null;
		String _temp = " A(n) hasLink signature object ("+hashCode()+")\n";
		// Checks that ReferenceModel has a name attribute and uses if it has 
		_temp += "\tReferenceModel = ";
		feature = null;
		if(ReferenceModel instanceof EObject)
			feature = ((EObject)ReferenceModel).eClass().getEStructuralFeature("name");

		if(feature != null && ((EObject)ReferenceModel).eGet(feature) != null) _temp += ((EObject)ReferenceModel).eGet(feature).toString();
		else _temp += ReferenceModel.toString();
		_temp += "\n";

		// Checks that ReferenceLink has a name attribute and uses if it has 
		_temp += "\tReferenceLink = ";
		feature = null;
		if(ReferenceLink instanceof EObject)
			feature = ((EObject)ReferenceLink).eClass().getEStructuralFeature("name");

		if(feature != null && ((EObject)ReferenceLink).eGet(feature) != null) _temp += ((EObject)ReferenceLink).eGet(feature).toString();
		else _temp += ReferenceLink.toString();
		_temp += "\n";

		return _temp;
	}

	@Override
	public Object[] toArray() {
		return new Object[] {ReferenceModel, ReferenceLink};
	}
}
