/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.antiGoal
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.antiGoal
 */
public class PatternBuilderForantiGoal implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.antiGoal".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.antiGoal");
		
		final Address<? extends Receiver> var_257 = buildable.patternCollector("secmer.ontology.antiGoal");
		final Stub<Address<? extends Supplier>> var_258 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_259 = EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("AntiRequirement");
		final Stub<Address<? extends Supplier>> var_260 = buildable.unaryTypeStub(new FlatTuple(new Object[] {"Goal"}), var_259);
		final TupleMask var_261 = new TupleMask(new int[] {}, 0);
		final TupleMask var_262 = new TupleMask(new int[] {}, 1);
		final TupleMask var_263 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_264 = buildable.buildBetaNode(var_258, var_260, var_261, var_262, var_263, false);
		final TupleMask var_265 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_266 = buildable.buildTrimmer(var_264, var_265);
		buildable.buildConnection(var_266, var_257);
		return var_257;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.antiGoal".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Goal", 0);

		}
		return posMapping;
	}
}
