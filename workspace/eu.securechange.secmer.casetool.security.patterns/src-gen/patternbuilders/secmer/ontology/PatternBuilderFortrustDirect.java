/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.trustDirect
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.trustDirect
 */
public class PatternBuilderFortrustDirect implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.trustDirect".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.trustDirect");
		
		final Address<? extends Receiver> var_50 = buildable.patternCollector("secmer.ontology.trustDirect");
		final Stub<Address<? extends Supplier>> var_51 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_52 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Trusts"))).getEStructuralFeature("source");
		final Stub<Address<? extends Supplier>> var_53 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Trusts", "Act1"}), var_52);
		final TupleMask var_54 = new TupleMask(new int[] {}, 0);
		final TupleMask var_55 = new TupleMask(new int[] {}, 2);
		final TupleMask var_56 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_57 = buildable.buildBetaNode(var_51, var_53, var_54, var_55, var_56, false);
		final Stub<Address<? extends Supplier>> var_58 = buildable.buildInjectivityChecker(var_57, 1, new int[] {0});
		final Object var_59 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Trusts"))).getEStructuralFeature("target");
		final Stub<Address<? extends Supplier>> var_60 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Trusts", "Act2"}), var_59);
		final TupleMask var_61 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_62 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_63 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_64 = buildable.buildBetaNode(var_58, var_60, var_61, var_62, var_63, false);
		final Stub<Address<? extends Supplier>> var_65 = buildable.buildInjectivityChecker(var_64, 2, new int[] {0, 1});
		final Object var_66 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Trusts"))).getEStructuralFeature("entity");
		final Stub<Address<? extends Supplier>> var_67 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Trusts", "Dependum"}), var_66);
		final TupleMask var_68 = new TupleMask(new int[] {0}, 3);
		final TupleMask var_69 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_70 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_71 = buildable.buildBetaNode(var_65, var_67, var_68, var_69, var_70, false);
		final Stub<Address<? extends Supplier>> var_72 = buildable.buildInjectivityChecker(var_71, 3, new int[] {0, 1, 2});
		final TupleMask var_73 = new TupleMask(new int[] {1, 2, 3}, 4);
		final Stub<Address<? extends Supplier>> var_74 = buildable.buildTrimmer(var_72, var_73);
		buildable.buildConnection(var_74, var_50);
		return var_50;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.trustDirect".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Act1", 0);
			posMapping.put("Act2", 1);
			posMapping.put("Dependum", 2);

		}
		return posMapping;
	}
}
