/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.carryOut
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.carryOut
 */
public class PatternBuilderForcarryOut implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.carryOut".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.carryOut");
		
		final Address<? extends Receiver> var_129 = buildable.patternCollector("secmer.ontology.carryOut");
		final Stub<Address<? extends Supplier>> var_130 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_131 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "Process"}), "secmer.ontology.carryOutDirect");
		final TupleMask var_132 = new TupleMask(new int[] {}, 0);
		final TupleMask var_133 = new TupleMask(new int[] {}, 2);
		final TupleMask var_134 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_135 = buildable.buildBetaNode(var_130, var_131, var_132, var_133, var_134, false);
		final TupleMask var_136 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_137 = buildable.buildTrimmer(var_135, var_136);
		buildable.buildConnection(var_137, var_129);
		final Stub<Address<? extends Supplier>> var_138 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_139 = buildable.patternCallStub(new FlatTuple(new Object[] {"Actor", "SuperProcess"}), "secmer.ontology.carryOut");
		final TupleMask var_140 = new TupleMask(new int[] {}, 0);
		final TupleMask var_141 = new TupleMask(new int[] {}, 2);
		final TupleMask var_142 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_143 = buildable.buildBetaNode(var_138, var_139, var_140, var_141, var_142, false);
		final Stub<Address<? extends Supplier>> var_144 = buildable.patternCallStub(new FlatTuple(new Object[] {"SuperProcess", "Process"}), "secmer.ontology.decomposeDirect");
		final TupleMask var_145 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_146 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_147 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_148 = buildable.buildBetaNode(var_143, var_144, var_145, var_146, var_147, false);
		final Stub<Address<? extends Supplier>> var_149 = buildable.buildInjectivityChecker(var_148, 2, new int[] {0});
		final TupleMask var_150 = new TupleMask(new int[] {0, 2}, 3);
		final Stub<Address<? extends Supplier>> var_151 = buildable.buildTrimmer(var_149, var_150);
		buildable.buildConnection(var_151, var_129);
		return var_129;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.carryOut".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Actor", 0);
			posMapping.put("Process", 1);

		}
		return posMapping;
	}
}
