/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.delegationDirect
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.delegationDirect
 */
public class PatternBuilderFordelegationDirect implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.delegationDirect".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.delegationDirect");
		
		final Address<? extends Receiver> var_163 = buildable.patternCollector("secmer.ontology.delegationDirect");
		final Stub<Address<? extends Supplier>> var_164 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_165 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Delegates"))).getEStructuralFeature("source");
		final Stub<Address<? extends Supplier>> var_166 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Delegates", "Act1"}), var_165);
		final TupleMask var_167 = new TupleMask(new int[] {}, 0);
		final TupleMask var_168 = new TupleMask(new int[] {}, 2);
		final TupleMask var_169 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_170 = buildable.buildBetaNode(var_164, var_166, var_167, var_168, var_169, false);
		final Stub<Address<? extends Supplier>> var_171 = buildable.buildInjectivityChecker(var_170, 1, new int[] {0});
		final Object var_172 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Delegates"))).getEStructuralFeature("target");
		final Stub<Address<? extends Supplier>> var_173 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Delegates", "Act2"}), var_172);
		final TupleMask var_174 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_175 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_176 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_177 = buildable.buildBetaNode(var_171, var_173, var_174, var_175, var_176, false);
		final Stub<Address<? extends Supplier>> var_178 = buildable.buildInjectivityChecker(var_177, 2, new int[] {0, 1});
		final Object var_179 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Delegates"))).getEStructuralFeature("type");
		final Stub<Address<? extends Supplier>> var_180 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Delegates", "DependencyType"}), var_179);
		final TupleMask var_181 = new TupleMask(new int[] {0}, 3);
		final TupleMask var_182 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_183 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_184 = buildable.buildBetaNode(var_178, var_180, var_181, var_182, var_183, false);
		final Stub<Address<? extends Supplier>> var_185 = buildable.buildInjectivityChecker(var_184, 3, new int[] {0, 1, 2});
		final Object var_186 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Delegates"))).getEStructuralFeature("entity");
		final Stub<Address<? extends Supplier>> var_187 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Delegates", "Dependum"}), var_186);
		final TupleMask var_188 = new TupleMask(new int[] {0}, 4);
		final TupleMask var_189 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_190 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_191 = buildable.buildBetaNode(var_185, var_187, var_188, var_189, var_190, false);
		final Stub<Address<? extends Supplier>> var_192 = buildable.buildInjectivityChecker(var_191, 4, new int[] {0, 1, 2, 3});
		final TupleMask var_193 = new TupleMask(new int[] {1, 2, 3, 4}, 5);
		final Stub<Address<? extends Supplier>> var_194 = buildable.buildTrimmer(var_192, var_193);
		buildable.buildConnection(var_194, var_163);
		return var_163;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.delegationDirect".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Act1", 0);
			posMapping.put("Act2", 1);
			posMapping.put("DependencyType", 2);
			posMapping.put("Dependum", 3);

		}
		return posMapping;
	}
}
