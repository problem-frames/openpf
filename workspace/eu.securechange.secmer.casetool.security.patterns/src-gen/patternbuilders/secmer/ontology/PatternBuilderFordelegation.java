/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.delegation
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.delegation
 */
public class PatternBuilderFordelegation implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.delegation".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.delegation");
		
		final Address<? extends Receiver> var_25 = buildable.patternCollector("secmer.ontology.delegation");
		final Stub<Address<? extends Supplier>> var_26 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_27 = buildable.patternCallStub(new FlatTuple(new Object[] {"Act1", "Act2", "DependencyType", "Dependum"}), "secmer.ontology.delegationDirect");
		final TupleMask var_28 = new TupleMask(new int[] {}, 0);
		final TupleMask var_29 = new TupleMask(new int[] {}, 4);
		final TupleMask var_30 = new TupleMask(new int[] {0, 1, 2, 3}, 4);
		final Stub<Address<? extends Supplier>> var_31 = buildable.buildBetaNode(var_26, var_27, var_28, var_29, var_30, false);
		final TupleMask var_32 = new TupleMask(new int[] {0, 1, 3}, 4);
		final Stub<Address<? extends Supplier>> var_33 = buildable.buildTrimmer(var_31, var_32);
		buildable.buildConnection(var_33, var_25);
		final Stub<Address<? extends Supplier>> var_34 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_35 = buildable.patternCallStub(new FlatTuple(new Object[] {"SuperDependum", "Dependum"}), "secmer.ontology.decomposeDirect");
		final TupleMask var_36 = new TupleMask(new int[] {}, 0);
		final TupleMask var_37 = new TupleMask(new int[] {}, 2);
		final TupleMask var_38 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_39 = buildable.buildBetaNode(var_34, var_35, var_36, var_37, var_38, false);
		final Stub<Address<? extends Supplier>> var_40 = buildable.patternCallStub(new FlatTuple(new Object[] {"Act1", "Act2", "DependencyType", "SuperDependum"}), "secmer.ontology.delegationDirect");
		final TupleMask var_41 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_42 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_43 = new TupleMask(new int[] {0, 1, 2}, 4);
		final Stub<Address<? extends Supplier>> var_44 = buildable.buildBetaNode(var_39, var_40, var_41, var_42, var_43, false);
		final Stub<Address<? extends Supplier>> var_45 = buildable.buildInjectivityChecker(var_44, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_46 = buildable.buildInjectivityChecker(var_45, 3, new int[] {1});
		final Stub<Address<? extends Supplier>> var_47 = buildable.buildInjectivityChecker(var_46, 4, new int[] {1});
		final TupleMask var_48 = new TupleMask(new int[] {2, 3, 1}, 5);
		final Stub<Address<? extends Supplier>> var_49 = buildable.buildTrimmer(var_47, var_48);
		buildable.buildConnection(var_49, var_25);
		return var_25;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.delegation".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Act1", 0);
			posMapping.put("Act2", 1);
			posMapping.put("Dependum", 2);

		}
		return posMapping;
	}
}
