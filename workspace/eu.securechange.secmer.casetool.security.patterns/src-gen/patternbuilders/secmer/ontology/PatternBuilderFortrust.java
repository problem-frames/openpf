/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.trust
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.trust
 */
public class PatternBuilderFortrust implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.trust".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.trust");
		
		final Address<? extends Receiver> var_378 = buildable.patternCollector("secmer.ontology.trust");
		final Stub<Address<? extends Supplier>> var_379 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_380 = buildable.patternCallStub(new FlatTuple(new Object[] {"Act1", "Act2", "Dependum"}), "secmer.ontology.trustDirect");
		final TupleMask var_381 = new TupleMask(new int[] {}, 0);
		final TupleMask var_382 = new TupleMask(new int[] {}, 3);
		final TupleMask var_383 = new TupleMask(new int[] {0, 1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_384 = buildable.buildBetaNode(var_379, var_380, var_381, var_382, var_383, false);
		final TupleMask var_385 = new TupleMask(new int[] {0, 1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_386 = buildable.buildTrimmer(var_384, var_385);
		buildable.buildConnection(var_386, var_378);
		final Stub<Address<? extends Supplier>> var_387 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_388 = buildable.patternCallStub(new FlatTuple(new Object[] {"SuperDependum", "Dependum"}), "secmer.ontology.decomposeDirect");
		final TupleMask var_389 = new TupleMask(new int[] {}, 0);
		final TupleMask var_390 = new TupleMask(new int[] {}, 2);
		final TupleMask var_391 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_392 = buildable.buildBetaNode(var_387, var_388, var_389, var_390, var_391, false);
		final Stub<Address<? extends Supplier>> var_393 = buildable.patternCallStub(new FlatTuple(new Object[] {"Act1", "Act2", "SuperDependum"}), "secmer.ontology.trust");
		final TupleMask var_394 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_395 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_396 = new TupleMask(new int[] {0, 1}, 3);
		final Stub<Address<? extends Supplier>> var_397 = buildable.buildBetaNode(var_392, var_393, var_394, var_395, var_396, false);
		final Stub<Address<? extends Supplier>> var_398 = buildable.buildInjectivityChecker(var_397, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_399 = buildable.buildInjectivityChecker(var_398, 3, new int[] {1});
		final TupleMask var_400 = new TupleMask(new int[] {2, 3, 1}, 4);
		final Stub<Address<? extends Supplier>> var_401 = buildable.buildTrimmer(var_399, var_400);
		buildable.buildConnection(var_401, var_378);
		return var_378;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.trust".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Act1", 0);
			posMapping.put("Act2", 1);
			posMapping.put("Dependum", 2);

		}
		return posMapping;
	}
}
