/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.signatureAction
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.signatureAction
 */
public class PatternBuilderForsignatureAction implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.signatureAction".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.signatureAction");
		
		final Address<? extends Receiver> var_439 = buildable.patternCollector("secmer.ontology.signatureAction");
		final Stub<Address<? extends Supplier>> var_440 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Stub<Address<? extends Supplier>> var_441 = buildable.patternCallStub(new FlatTuple(new Object[] {"Action"}), "secmer.ontology.Action");
		final TupleMask var_442 = new TupleMask(new int[] {}, 0);
		final TupleMask var_443 = new TupleMask(new int[] {}, 1);
		final TupleMask var_444 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_445 = buildable.buildBetaNode(var_440, var_441, var_442, var_443, var_444, false);
		final TupleMask var_446 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_447 = buildable.buildTrimmer(var_445, var_446);
		buildable.buildConnection(var_447, var_439);
		return var_439;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.signatureAction".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Action", 0);

		}
		return posMapping;
	}
}
