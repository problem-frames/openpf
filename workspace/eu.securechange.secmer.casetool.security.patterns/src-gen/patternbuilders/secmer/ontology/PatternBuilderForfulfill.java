/*******************************************************************************
 * Pattern builder for pattern secmer.ontology.fulfill
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.compiled.emf.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.secmer.ontology;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.compiled.emf.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.compiled.emf.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern secmer.ontology.fulfill
 */
public class PatternBuilderForfulfill implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("secmer.ontology.fulfill".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("secmer.ontology.fulfill");
		
		final Address<? extends Receiver> var_93 = buildable.patternCollector("secmer.ontology.fulfill");
		final Stub<Address<? extends Supplier>> var_94 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_95 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Fulfils"))).getEStructuralFeature("source");
		final Stub<Address<? extends Supplier>> var_96 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Fulfils", "Process"}), var_95);
		final TupleMask var_97 = new TupleMask(new int[] {}, 0);
		final TupleMask var_98 = new TupleMask(new int[] {}, 2);
		final TupleMask var_99 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_100 = buildable.buildBetaNode(var_94, var_96, var_97, var_98, var_99, false);
		final Stub<Address<? extends Supplier>> var_101 = buildable.buildInjectivityChecker(var_100, 1, new int[] {0});
		final Object var_102 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://securechange.eu/ontology").getEClassifier("Fulfils"))).getEStructuralFeature("target");
		final Stub<Address<? extends Supplier>> var_103 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"Fulfils", "Proposition"}), var_102);
		final TupleMask var_104 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_105 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_106 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_107 = buildable.buildBetaNode(var_101, var_103, var_104, var_105, var_106, false);
		final Stub<Address<? extends Supplier>> var_108 = buildable.buildInjectivityChecker(var_107, 2, new int[] {0, 1});
		final TupleMask var_109 = new TupleMask(new int[] {1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_110 = buildable.buildTrimmer(var_108, var_109);
		buildable.buildConnection(var_110, var_93);
		return var_93;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("secmer.ontology.fulfill".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("Process", 0);
			posMapping.put("Proposition", 1);

		}
		return posMapping;
	}
}
