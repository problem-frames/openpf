/*
* generated by Xtext
*/
grammar InternalPF;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package uk.ac.open.pf.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.open.pf.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import uk.ac.open.pf.services.PFGrammarAccess;

}

@parser::members {
 
 	private PFGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(PFGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRootDiagram
entryRuleRootDiagram 
:
{ before(grammarAccess.getRootDiagramRule()); }
	 ruleRootDiagram
{ after(grammarAccess.getRootDiagramRule()); } 
	 EOF 
;

// Rule RootDiagram
ruleRootDiagram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootDiagramAccess().getGroup()); }
(rule__RootDiagram__Group__0)
{ after(grammarAccess.getRootDiagramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNode
entryRuleNode 
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeAccess().getGroup()); }
(rule__Node__Group__0)
{ after(grammarAccess.getNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompositeObject
entryRuleCompositeObject 
:
{ before(grammarAccess.getCompositeObjectRule()); }
	 ruleCompositeObject
{ after(grammarAccess.getCompositeObjectRule()); } 
	 EOF 
;

// Rule CompositeObject
ruleCompositeObject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompositeObjectAccess().getGroup()); }
(rule__CompositeObject__Group__0)
{ after(grammarAccess.getCompositeObjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleField
entryRuleField 
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldAccess().getAlternatives()); }
(rule__Field__Alternatives)
{ after(grammarAccess.getFieldAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleField
entryRuleSimpleField 
:
{ before(grammarAccess.getSimpleFieldRule()); }
	 ruleSimpleField
{ after(grammarAccess.getSimpleFieldRule()); } 
	 EOF 
;

// Rule SimpleField
ruleSimpleField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleFieldAccess().getGroup()); }
(rule__SimpleField__Group__0)
{ after(grammarAccess.getSimpleFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompositeField
entryRuleCompositeField 
:
{ before(grammarAccess.getCompositeFieldRule()); }
	 ruleCompositeField
{ after(grammarAccess.getCompositeFieldRule()); } 
	 EOF 
;

// Rule CompositeField
ruleCompositeField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompositeFieldAccess().getGroup()); }
(rule__CompositeField__Group__0)
{ after(grammarAccess.getCompositeFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Field__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getSimpleFieldParserRuleCall_0()); }
	ruleSimpleField
{ after(grammarAccess.getFieldAccess().getSimpleFieldParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFieldAccess().getCompositeFieldParserRuleCall_1()); }
	ruleCompositeField
{ after(grammarAccess.getFieldAccess().getCompositeFieldParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleField__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFieldAccess().getValueAssignment_2_0()); }
(rule__SimpleField__ValueAssignment_2_0)
{ after(grammarAccess.getSimpleFieldAccess().getValueAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getSimpleFieldAccess().getValueAssignment_2_1()); }
(rule__SimpleField__ValueAssignment_2_1)
{ after(grammarAccess.getSimpleFieldAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__RootDiagram__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootDiagram__Group__0__Impl
	rule__RootDiagram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getRootDiagramAction_0()); }
(

)
{ after(grammarAccess.getRootDiagramAccess().getRootDiagramAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootDiagram__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootDiagram__Group__1__Impl
	rule__RootDiagram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getValueTerminalRuleCall_1()); }
	RULE_VALUE
{ after(grammarAccess.getRootDiagramAccess().getValueTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootDiagram__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootDiagram__Group__2__Impl
	rule__RootDiagram__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getCommercialAtKeyword_2()); }

	'@' 

{ after(grammarAccess.getRootDiagramAccess().getCommercialAtKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootDiagram__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootDiagram__Group__3__Impl
	rule__RootDiagram__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getCycleKeyword_3()); }

	'cycle' 

{ after(grammarAccess.getRootDiagramAccess().getCycleKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootDiagram__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootDiagram__Group__4__Impl
	rule__RootDiagram__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getLeftParenthesisKeyword_4()); }

	'(' 

{ after(grammarAccess.getRootDiagramAccess().getLeftParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootDiagram__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootDiagram__Group__5__Impl
	rule__RootDiagram__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getLeftParenthesisKeyword_5()); }

	'(' 

{ after(grammarAccess.getRootDiagramAccess().getLeftParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootDiagram__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootDiagram__Group__6__Impl
	rule__RootDiagram__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getObjectsAssignment_6()); }
(rule__RootDiagram__ObjectsAssignment_6)
{ after(grammarAccess.getRootDiagramAccess().getObjectsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootDiagram__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootDiagram__Group__7__Impl
	rule__RootDiagram__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getGroup_7()); }
(rule__RootDiagram__Group_7__0)*
{ after(grammarAccess.getRootDiagramAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootDiagram__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootDiagram__Group__8__Impl
	rule__RootDiagram__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getRightParenthesisKeyword_8()); }

	')' 

{ after(grammarAccess.getRootDiagramAccess().getRightParenthesisKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootDiagram__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootDiagram__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getRightParenthesisKeyword_9()); }

	')' 

{ after(grammarAccess.getRootDiagramAccess().getRightParenthesisKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__RootDiagram__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootDiagram__Group_7__0__Impl
	rule__RootDiagram__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getCommaKeyword_7_0()); }

	',' 

{ after(grammarAccess.getRootDiagramAccess().getCommaKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootDiagram__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootDiagram__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getObjectsAssignment_7_1()); }
(rule__RootDiagram__ObjectsAssignment_7_1)
{ after(grammarAccess.getRootDiagramAccess().getObjectsAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Node__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__0__Impl
	rule__Node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getNameAssignment_0()); }
(rule__Node__NameAssignment_0)
{ after(grammarAccess.getNodeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__1__Impl
	rule__Node__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getNodeAccess().getColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getCompositeAssignment_2()); }
(rule__Node__CompositeAssignment_2)
{ after(grammarAccess.getNodeAccess().getCompositeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompositeObject__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeObject__Group__0__Impl
	rule__CompositeObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeObject__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeObjectAccess().getCompositeObjectAction_0()); }
(

)
{ after(grammarAccess.getCompositeObjectAccess().getCompositeObjectAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeObject__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeObject__Group__1__Impl
	rule__CompositeObject__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeObject__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeObjectAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getCompositeObjectAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeObject__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeObject__Group__2__Impl
	rule__CompositeObject__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeObject__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeObjectAccess().getFieldsAssignment_2()); }
(rule__CompositeObject__FieldsAssignment_2)?
{ after(grammarAccess.getCompositeObjectAccess().getFieldsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeObject__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeObject__Group__3__Impl
	rule__CompositeObject__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeObject__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeObjectAccess().getGroup_3()); }
(rule__CompositeObject__Group_3__0)*
{ after(grammarAccess.getCompositeObjectAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeObject__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeObject__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeObject__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeObjectAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getCompositeObjectAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CompositeObject__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeObject__Group_3__0__Impl
	rule__CompositeObject__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeObject__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeObjectAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getCompositeObjectAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeObject__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeObject__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeObject__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeObjectAccess().getFieldsAssignment_3_1()); }
(rule__CompositeObject__FieldsAssignment_3_1)
{ after(grammarAccess.getCompositeObjectAccess().getFieldsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleField__Group__0__Impl
	rule__SimpleField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFieldAccess().getNameAssignment_0()); }
(rule__SimpleField__NameAssignment_0)
{ after(grammarAccess.getSimpleFieldAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleField__Group__1__Impl
	rule__SimpleField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFieldAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getSimpleFieldAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleField__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleField__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleField__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFieldAccess().getAlternatives_2()); }
(rule__SimpleField__Alternatives_2)
{ after(grammarAccess.getSimpleFieldAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompositeField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeField__Group__0__Impl
	rule__CompositeField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeFieldAccess().getNameAssignment_0()); }
(rule__CompositeField__NameAssignment_0)
{ after(grammarAccess.getCompositeFieldAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeField__Group__1__Impl
	rule__CompositeField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeFieldAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getCompositeFieldAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeField__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositeField__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeField__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeFieldAccess().getValueAssignment_2()); }
(rule__CompositeField__ValueAssignment_2)
{ after(grammarAccess.getCompositeFieldAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__RootDiagram__ObjectsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getObjectsNodeParserRuleCall_6_0()); }
	ruleNode{ after(grammarAccess.getRootDiagramAccess().getObjectsNodeParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RootDiagram__ObjectsAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootDiagramAccess().getObjectsNodeParserRuleCall_7_1_0()); }
	ruleNode{ after(grammarAccess.getRootDiagramAccess().getObjectsNodeParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getNameValueTerminalRuleCall_0_0()); }
	RULE_VALUE{ after(grammarAccess.getNodeAccess().getNameValueTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__CompositeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getCompositeCompositeObjectParserRuleCall_2_0()); }
	ruleCompositeObject{ after(grammarAccess.getNodeAccess().getCompositeCompositeObjectParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeObject__FieldsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeObjectAccess().getFieldsFieldParserRuleCall_2_0()); }
	ruleField{ after(grammarAccess.getCompositeObjectAccess().getFieldsFieldParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeObject__FieldsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeObjectAccess().getFieldsFieldParserRuleCall_3_1_0()); }
	ruleField{ after(grammarAccess.getCompositeObjectAccess().getFieldsFieldParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleField__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFieldAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getSimpleFieldAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleField__ValueAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFieldAccess().getValueValueTerminalRuleCall_2_0_0()); }
	RULE_VALUE{ after(grammarAccess.getSimpleFieldAccess().getValueValueTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleField__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFieldAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getSimpleFieldAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeField__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeFieldAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getCompositeFieldAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeField__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeFieldAccess().getValueCompositeObjectParserRuleCall_2_0()); }
	ruleCompositeObject{ after(grammarAccess.getCompositeFieldAccess().getValueCompositeObjectParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_VALUE : '&' RULE_ID;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


