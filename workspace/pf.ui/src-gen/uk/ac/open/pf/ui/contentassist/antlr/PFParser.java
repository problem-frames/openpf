/*
* generated by Xtext
*/
package uk.ac.open.pf.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import uk.ac.open.pf.services.PFGrammarAccess;

public class PFParser extends AbstractContentAssistParser {
	
	@Inject
	private PFGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected uk.ac.open.pf.ui.contentassist.antlr.internal.InternalPFParser createParser() {
		uk.ac.open.pf.ui.contentassist.antlr.internal.InternalPFParser result = new uk.ac.open.pf.ui.contentassist.antlr.internal.InternalPFParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFieldAccess().getAlternatives(), "rule__Field__Alternatives");
					put(grammarAccess.getSimpleFieldAccess().getAlternatives_2(), "rule__SimpleField__Alternatives_2");
					put(grammarAccess.getRootDiagramAccess().getGroup(), "rule__RootDiagram__Group__0");
					put(grammarAccess.getRootDiagramAccess().getGroup_7(), "rule__RootDiagram__Group_7__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getCompositeObjectAccess().getGroup(), "rule__CompositeObject__Group__0");
					put(grammarAccess.getCompositeObjectAccess().getGroup_3(), "rule__CompositeObject__Group_3__0");
					put(grammarAccess.getSimpleFieldAccess().getGroup(), "rule__SimpleField__Group__0");
					put(grammarAccess.getCompositeFieldAccess().getGroup(), "rule__CompositeField__Group__0");
					put(grammarAccess.getRootDiagramAccess().getNameAssignment_1(), "rule__RootDiagram__NameAssignment_1");
					put(grammarAccess.getRootDiagramAccess().getObjectsAssignment_6(), "rule__RootDiagram__ObjectsAssignment_6");
					put(grammarAccess.getRootDiagramAccess().getObjectsAssignment_7_1(), "rule__RootDiagram__ObjectsAssignment_7_1");
					put(grammarAccess.getNodeAccess().getNameAssignment_0(), "rule__Node__NameAssignment_0");
					put(grammarAccess.getNodeAccess().getCompositeAssignment_2(), "rule__Node__CompositeAssignment_2");
					put(grammarAccess.getCompositeObjectAccess().getFieldsAssignment_2(), "rule__CompositeObject__FieldsAssignment_2");
					put(grammarAccess.getCompositeObjectAccess().getFieldsAssignment_3_1(), "rule__CompositeObject__FieldsAssignment_3_1");
					put(grammarAccess.getSimpleFieldAccess().getNameAssignment_0(), "rule__SimpleField__NameAssignment_0");
					put(grammarAccess.getSimpleFieldAccess().getValueAssignment_2_0(), "rule__SimpleField__ValueAssignment_2_0");
					put(grammarAccess.getSimpleFieldAccess().getValueAssignment_2_1(), "rule__SimpleField__ValueAssignment_2_1");
					put(grammarAccess.getCompositeFieldAccess().getNameAssignment_0(), "rule__CompositeField__NameAssignment_0");
					put(grammarAccess.getCompositeFieldAccess().getValueAssignment_2(), "rule__CompositeField__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			uk.ac.open.pf.ui.contentassist.antlr.internal.InternalPFParser typedParser = (uk.ac.open.pf.ui.contentassist.antlr.internal.InternalPFParser) parser;
			typedParser.entryRuleRootDiagram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PFGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PFGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
