/*
* generated by Xtext
*/
grammar InternalDependency;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package uk.ac.open.dependency.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.open.dependency.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import uk.ac.open.dependency.services.DependencyGrammarAccess;

}

@parser::members {
 
 	private DependencyGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DependencyGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNode
entryRuleNode 
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeAccess().getGroup()); }
(rule__Node__Group__0)
{ after(grammarAccess.getNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDependency
entryRuleDependency 
:
{ before(grammarAccess.getDependencyRule()); }
	 ruleDependency
{ after(grammarAccess.getDependencyRule()); } 
	 EOF 
;

// Rule Dependency
ruleDependency
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDependencyAccess().getAlternatives()); }
(rule__Dependency__Alternatives)
{ after(grammarAccess.getDependencyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCoupling
entryRuleCoupling 
:
{ before(grammarAccess.getCouplingRule()); }
	 ruleCoupling
{ after(grammarAccess.getCouplingRule()); } 
	 EOF 
;

// Rule Coupling
ruleCoupling
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCouplingAccess().getGroup()); }
(rule__Coupling__Group__0)
{ after(grammarAccess.getCouplingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrecedence
entryRulePrecedence 
:
{ before(grammarAccess.getPrecedenceRule()); }
	 rulePrecedence
{ after(grammarAccess.getPrecedenceRule()); } 
	 EOF 
;

// Rule Precedence
rulePrecedence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrecedenceAccess().getGroup()); }
(rule__Precedence__Group__0)
{ after(grammarAccess.getPrecedenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Model__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNodesAssignment_1_0()); }
(rule__Model__NodesAssignment_1_0)
{ after(grammarAccess.getModelAccess().getNodesAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getDependenciesAssignment_1_1()); }
(rule__Model__DependenciesAssignment_1_1)
{ after(grammarAccess.getModelAccess().getDependenciesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyAccess().getCouplingParserRuleCall_0()); }
	ruleCoupling
{ after(grammarAccess.getDependencyAccess().getCouplingParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDependencyAccess().getPrecedenceParserRuleCall_1()); }
	rulePrecedence
{ after(grammarAccess.getDependencyAccess().getPrecedenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_0()); }
(rule__Model__Group_0__0)?
{ after(grammarAccess.getModelAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAlternatives_1()); }
(rule__Model__Alternatives_1)*
{ after(grammarAccess.getModelAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_0__0__Impl
	rule__Model__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGraphKeyword_0_0()); }

	'graph' 

{ after(grammarAccess.getModelAccess().getGraphKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameAssignment_0_1()); }
(rule__Model__NameAssignment_0_1)
{ after(grammarAccess.getModelAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Node__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__0__Impl
	rule__Node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getNameAssignment_0()); }
(rule__Node__NameAssignment_0)
{ after(grammarAccess.getNodeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getGroup_1()); }
(rule__Node__Group_1__0)?
{ after(grammarAccess.getNodeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Node__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group_1__0__Impl
	rule__Node__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_1_0()); }

	'{' 

{ after(grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group_1__1__Impl
	rule__Node__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getGroup_1_1()); }
(rule__Node__Group_1_1__0)*
{ after(grammarAccess.getNodeAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getRightCurlyBracketKeyword_1_2()); }

	'}' 

{ after(grammarAccess.getNodeAccess().getRightCurlyBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Node__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group_1_1__0__Impl
	rule__Node__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getSeeKeyword_1_1_0()); }

	'see' 

{ after(grammarAccess.getNodeAccess().getSeeKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getReferrenceAssignment_1_1_1()); }
(rule__Node__ReferrenceAssignment_1_1_1)
{ after(grammarAccess.getNodeAccess().getReferrenceAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Coupling__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Coupling__Group__0__Impl
	rule__Coupling__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Coupling__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCouplingAccess().getFromAssignment_0()); }
(rule__Coupling__FromAssignment_0)
{ after(grammarAccess.getCouplingAccess().getFromAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Coupling__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Coupling__Group__1__Impl
	rule__Coupling__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Coupling__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCouplingAccess().getHyphenMinusHyphenMinusKeyword_1()); }

	'--' 

{ after(grammarAccess.getCouplingAccess().getHyphenMinusHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Coupling__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Coupling__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Coupling__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCouplingAccess().getToAssignment_2()); }
(rule__Coupling__ToAssignment_2)
{ after(grammarAccess.getCouplingAccess().getToAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Precedence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Precedence__Group__0__Impl
	rule__Precedence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Precedence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrecedenceAccess().getFromAssignment_0()); }
(rule__Precedence__FromAssignment_0)
{ after(grammarAccess.getPrecedenceAccess().getFromAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Precedence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Precedence__Group__1__Impl
	rule__Precedence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Precedence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrecedenceAccess().getHyphenMinusGreaterThanSignKeyword_1()); }

	'->' 

{ after(grammarAccess.getPrecedenceAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Precedence__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Precedence__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Precedence__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrecedenceAccess().getToAssignment_2()); }
(rule__Precedence__ToAssignment_2)
{ after(grammarAccess.getPrecedenceAccess().getToAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0_1_0()); }
	RULE_ID{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__NodesAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNodesNodeParserRuleCall_1_0_0()); }
	ruleNode{ after(grammarAccess.getModelAccess().getNodesNodeParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__DependenciesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDependenciesDependencyParserRuleCall_1_1_0()); }
	ruleDependency{ after(grammarAccess.getModelAccess().getDependenciesDependencyParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__ReferrenceAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getReferrenceSTRINGTerminalRuleCall_1_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getNodeAccess().getReferrenceSTRINGTerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Coupling__FromAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCouplingAccess().getFromNodeCrossReference_0_0()); }
(
{ before(grammarAccess.getCouplingAccess().getFromNodeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getCouplingAccess().getFromNodeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getCouplingAccess().getFromNodeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Coupling__ToAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCouplingAccess().getToNodeCrossReference_2_0()); }
(
{ before(grammarAccess.getCouplingAccess().getToNodeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getCouplingAccess().getToNodeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getCouplingAccess().getToNodeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Precedence__FromAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrecedenceAccess().getFromNodeCrossReference_0_0()); }
(
{ before(grammarAccess.getPrecedenceAccess().getFromNodeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getPrecedenceAccess().getFromNodeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getPrecedenceAccess().getFromNodeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Precedence__ToAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrecedenceAccess().getToNodeCrossReference_2_0()); }
(
{ before(grammarAccess.getPrecedenceAccess().getToNodeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getPrecedenceAccess().getToNodeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getPrecedenceAccess().getToNodeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : ('#' ~('#')+ '#'|'^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*);

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


