/*
* generated by Xtext
*/
package uk.ac.open.dependency.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import uk.ac.open.dependency.services.DependencyGrammarAccess;

public class DependencyParser extends AbstractContentAssistParser {
	
	@Inject
	private DependencyGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected uk.ac.open.dependency.ui.contentassist.antlr.internal.InternalDependencyParser createParser() {
		uk.ac.open.dependency.ui.contentassist.antlr.internal.InternalDependencyParser result = new uk.ac.open.dependency.ui.contentassist.antlr.internal.InternalDependencyParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getDependencyAccess().getAlternatives(), "rule__Dependency__Alternatives");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getNodeAccess().getGroup_1(), "rule__Node__Group_1__0");
					put(grammarAccess.getNodeAccess().getGroup_1_1(), "rule__Node__Group_1_1__0");
					put(grammarAccess.getCouplingAccess().getGroup(), "rule__Coupling__Group__0");
					put(grammarAccess.getPrecedenceAccess().getGroup(), "rule__Precedence__Group__0");
					put(grammarAccess.getModelAccess().getNodesAssignment_0(), "rule__Model__NodesAssignment_0");
					put(grammarAccess.getModelAccess().getDependenciesAssignment_1(), "rule__Model__DependenciesAssignment_1");
					put(grammarAccess.getNodeAccess().getNameAssignment_0(), "rule__Node__NameAssignment_0");
					put(grammarAccess.getNodeAccess().getReferrenceAssignment_1_1_1(), "rule__Node__ReferrenceAssignment_1_1_1");
					put(grammarAccess.getCouplingAccess().getFromAssignment_0(), "rule__Coupling__FromAssignment_0");
					put(grammarAccess.getCouplingAccess().getToAssignment_2(), "rule__Coupling__ToAssignment_2");
					put(grammarAccess.getPrecedenceAccess().getFromAssignment_0(), "rule__Precedence__FromAssignment_0");
					put(grammarAccess.getPrecedenceAccess().getToAssignment_2(), "rule__Precedence__ToAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			uk.ac.open.dependency.ui.contentassist.antlr.internal.InternalDependencyParser typedParser = (uk.ac.open.dependency.ui.contentassist.antlr.internal.InternalDependencyParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DependencyGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DependencyGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
