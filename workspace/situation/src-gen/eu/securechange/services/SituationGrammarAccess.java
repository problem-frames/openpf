/*
* generated by Xtext
*/

package eu.securechange.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SituationGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SituationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Situation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTimeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTimeIDTerminalRuleCall_0_1_0 = (RuleCall)cTimeAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cThingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cThingsThingParserRuleCall_1_0 = (RuleCall)cThingsAssignment_1.eContents().get(0);
		
		//Situation:
		//	("model" time=ID ":")? things+=Thing*;
		public ParserRule getRule() { return rule; }

		//("model" time=ID ":")? things+=Thing*
		public Group getGroup() { return cGroup; }

		//("model" time=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//"model"
		public Keyword getModelKeyword_0_0() { return cModelKeyword_0_0; }

		//time=ID
		public Assignment getTimeAssignment_0_1() { return cTimeAssignment_0_1; }

		//ID
		public RuleCall getTimeIDTerminalRuleCall_0_1_0() { return cTimeIDTerminalRuleCall_0_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//things+=Thing*
		public Assignment getThingsAssignment_1() { return cThingsAssignment_1; }

		//Thing
		public RuleCall getThingsThingParserRuleCall_1_0() { return cThingsThingParserRuleCall_1_0; }
	}

	public class ThingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Thing");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDomainParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Thing:
		//	Entity | Relationship | Domain;
		public ParserRule getRule() { return rule; }

		//Entity | Relationship | Domain
		public Alternatives getAlternatives() { return cAlternatives; }

		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }

		//Relationship
		public RuleCall getRelationshipParserRuleCall_1() { return cRelationshipParserRuleCall_1; }

		//Domain
		public RuleCall getDomainParserRuleCall_2() { return cDomainParserRuleCall_2; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeEntityTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Entity:
		//	type=EntityType name=ID;
		public ParserRule getRule() { return rule; }

		//type=EntityType name=ID
		public Group getGroup() { return cGroup; }

		//type=EntityType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//EntityType
		public RuleCall getTypeEntityTypeEnumRuleCall_0_0() { return cTypeEntityTypeEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRelationshipTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceThingCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceThingIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceThingCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetThingCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetThingIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetThingCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Relationship:
		//	type=RelationshipType "(" source=[Thing] "," target=[Thing] ")";
		public ParserRule getRule() { return rule; }

		//type=RelationshipType "(" source=[Thing] "," target=[Thing] ")"
		public Group getGroup() { return cGroup; }

		//type=RelationshipType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//RelationshipType
		public RuleCall getTypeRelationshipTypeEnumRuleCall_0_0() { return cTypeRelationshipTypeEnumRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//source=[Thing]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Thing]
		public CrossReference getSourceThingCrossReference_2_0() { return cSourceThingCrossReference_2_0; }

		//ID
		public RuleCall getSourceThingIDTerminalRuleCall_2_0_1() { return cSourceThingIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//target=[Thing]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[Thing]
		public CrossReference getTargetThingCrossReference_4_0() { return cTargetThingCrossReference_4_0; }

		//ID
		public RuleCall getTargetThingIDTerminalRuleCall_4_0_1() { return cTargetThingIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDomainTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesEntityParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesEntityParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		
		//Domain:
		//	name=ID type=DomainType properties+=Entity ("," properties+=Entity)*;
		public ParserRule getRule() { return rule; }

		//name=ID type=DomainType properties+=Entity ("," properties+=Entity)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type=DomainType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//DomainType
		public RuleCall getTypeDomainTypeEnumRuleCall_1_0() { return cTypeDomainTypeEnumRuleCall_1_0; }

		//properties+=Entity
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//Entity
		public RuleCall getPropertiesEntityParserRuleCall_2_0() { return cPropertiesEntityParserRuleCall_2_0; }

		//("," properties+=Entity)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//properties+=Entity
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//Entity
		public RuleCall getPropertiesEntityParserRuleCall_3_1_0() { return cPropertiesEntityParserRuleCall_3_1_0; }
	}
	
	
	public class EntityTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EntityType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDomainAssumptionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDomainAssumptionDAKeyword_0_0 = (Keyword)cDomainAssumptionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFunctionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFunctionFRKeyword_1_0 = (Keyword)cFunctionEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSecurityEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSecuritySRKeyword_2_0 = (Keyword)cSecurityEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAntiEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAntiARKeyword_3_0 = (Keyword)cAntiEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cQualityPropositionEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cQualityPropositionQKeyword_4_0 = (Keyword)cQualityPropositionEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cArgumentEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cArgumentAKeyword_5_0 = (Keyword)cArgumentEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cActorEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cActorActorKeyword_6_0 = (Keyword)cActorEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cActionEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cActionActionKeyword_7_0 = (Keyword)cActionEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cAttackerEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cAttackerAttackerKeyword_8_0 = (Keyword)cAttackerEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cProcessEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cProcessProcessKeyword_9_0 = (Keyword)cProcessEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cActivityEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cActivityActivityKeyword_10_0 = (Keyword)cActivityEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cResourceEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cResourceResourceKeyword_11_0 = (Keyword)cResourceEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cAssetEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cAssetAssetKeyword_12_0 = (Keyword)cAssetEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cEventEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cEventEventKeyword_13_0 = (Keyword)cEventEnumLiteralDeclaration_13.eContents().get(0);
		
		//enum EntityType:
		//	DomainAssumption="DA" | Function="FR" | Security="SR" | Anti="AR" | QualityProposition="Q" | Argument="A" |
		//	Actor="actor" | Action="action" | Attacker="attacker" | Process="process" | Activity="activity" | Resource="resource"
		//	| Asset="asset" | Event="event";
		public EnumRule getRule() { return rule; }

		//DomainAssumption="DA" | Function="FR" | Security="SR" | Anti="AR" | QualityProposition="Q" | Argument="A" |
		//Actor="actor" | Action="action" | Attacker="attacker" | Process="process" | Activity="activity" | Resource="resource" |
		//Asset="asset" | Event="event"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DomainAssumption="DA"
		public EnumLiteralDeclaration getDomainAssumptionEnumLiteralDeclaration_0() { return cDomainAssumptionEnumLiteralDeclaration_0; }

		//"DA"
		public Keyword getDomainAssumptionDAKeyword_0_0() { return cDomainAssumptionDAKeyword_0_0; }

		//Function="FR"
		public EnumLiteralDeclaration getFunctionEnumLiteralDeclaration_1() { return cFunctionEnumLiteralDeclaration_1; }

		//"FR"
		public Keyword getFunctionFRKeyword_1_0() { return cFunctionFRKeyword_1_0; }

		//Security="SR"
		public EnumLiteralDeclaration getSecurityEnumLiteralDeclaration_2() { return cSecurityEnumLiteralDeclaration_2; }

		//"SR"
		public Keyword getSecuritySRKeyword_2_0() { return cSecuritySRKeyword_2_0; }

		//Anti="AR"
		public EnumLiteralDeclaration getAntiEnumLiteralDeclaration_3() { return cAntiEnumLiteralDeclaration_3; }

		//"AR"
		public Keyword getAntiARKeyword_3_0() { return cAntiARKeyword_3_0; }

		//QualityProposition="Q"
		public EnumLiteralDeclaration getQualityPropositionEnumLiteralDeclaration_4() { return cQualityPropositionEnumLiteralDeclaration_4; }

		//"Q"
		public Keyword getQualityPropositionQKeyword_4_0() { return cQualityPropositionQKeyword_4_0; }

		//Argument="A"
		public EnumLiteralDeclaration getArgumentEnumLiteralDeclaration_5() { return cArgumentEnumLiteralDeclaration_5; }

		//"A"
		public Keyword getArgumentAKeyword_5_0() { return cArgumentAKeyword_5_0; }

		//Actor="actor"
		public EnumLiteralDeclaration getActorEnumLiteralDeclaration_6() { return cActorEnumLiteralDeclaration_6; }

		//"actor"
		public Keyword getActorActorKeyword_6_0() { return cActorActorKeyword_6_0; }

		//Action="action"
		public EnumLiteralDeclaration getActionEnumLiteralDeclaration_7() { return cActionEnumLiteralDeclaration_7; }

		//"action"
		public Keyword getActionActionKeyword_7_0() { return cActionActionKeyword_7_0; }

		//Attacker="attacker"
		public EnumLiteralDeclaration getAttackerEnumLiteralDeclaration_8() { return cAttackerEnumLiteralDeclaration_8; }

		//"attacker"
		public Keyword getAttackerAttackerKeyword_8_0() { return cAttackerAttackerKeyword_8_0; }

		//Process="process"
		public EnumLiteralDeclaration getProcessEnumLiteralDeclaration_9() { return cProcessEnumLiteralDeclaration_9; }

		//"process"
		public Keyword getProcessProcessKeyword_9_0() { return cProcessProcessKeyword_9_0; }

		//Activity="activity"
		public EnumLiteralDeclaration getActivityEnumLiteralDeclaration_10() { return cActivityEnumLiteralDeclaration_10; }

		//"activity"
		public Keyword getActivityActivityKeyword_10_0() { return cActivityActivityKeyword_10_0; }

		//Resource="resource"
		public EnumLiteralDeclaration getResourceEnumLiteralDeclaration_11() { return cResourceEnumLiteralDeclaration_11; }

		//"resource"
		public Keyword getResourceResourceKeyword_11_0() { return cResourceResourceKeyword_11_0; }

		//Asset="asset"
		public EnumLiteralDeclaration getAssetEnumLiteralDeclaration_12() { return cAssetEnumLiteralDeclaration_12; }

		//"asset"
		public Keyword getAssetAssetKeyword_12_0() { return cAssetAssetKeyword_12_0; }

		//Event="event"
		public EnumLiteralDeclaration getEventEnumLiteralDeclaration_13() { return cEventEnumLiteralDeclaration_13; }

		//"event"
		public Keyword getEventEventKeyword_13_0() { return cEventEventKeyword_13_0; }
	}

	public class DomainTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DomainType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSpecificationEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSpecificationSKeyword_0_0 = (Keyword)cSpecificationEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRequirementEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRequirementRKeyword_1_0 = (Keyword)cRequirementEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWorldEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWorldWKeyword_2_0 = (Keyword)cWorldEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DomainType:
		//	Specification="S" | Requirement="R" | World="W";
		public EnumRule getRule() { return rule; }

		//Specification="S" | Requirement="R" | World="W"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Specification="S"
		public EnumLiteralDeclaration getSpecificationEnumLiteralDeclaration_0() { return cSpecificationEnumLiteralDeclaration_0; }

		//"S"
		public Keyword getSpecificationSKeyword_0_0() { return cSpecificationSKeyword_0_0; }

		//Requirement="R"
		public EnumLiteralDeclaration getRequirementEnumLiteralDeclaration_1() { return cRequirementEnumLiteralDeclaration_1; }

		//"R"
		public Keyword getRequirementRKeyword_1_0() { return cRequirementRKeyword_1_0; }

		//World="W"
		public EnumLiteralDeclaration getWorldEnumLiteralDeclaration_2() { return cWorldEnumLiteralDeclaration_2; }

		//"W"
		public Keyword getWorldWKeyword_2_0() { return cWorldWKeyword_2_0; }
	}

	public class RelationshipTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationshipType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWantsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWantsWantsKeyword_0_0 = (Keyword)cWantsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDoesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDoesDoesKeyword_1_0 = (Keyword)cDoesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cANDAndKeyword_2_0 = (Keyword)cANDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOROrKeyword_3_0 = (Keyword)cOREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTRUSTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTRUSTTrustsKeyword_4_0 = (Keyword)cTRUSTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDELEGATEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDELEGATEDelegatesKeyword_5_0 = (Keyword)cDELEGATEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cHURTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cHURTHyphenMinusKeyword_6_0 = (Keyword)cHURTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHELPEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHELPPlusSignKeyword_7_0 = (Keyword)cHELPEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cBREAKEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cBREAKHyphenMinusHyphenMinusKeyword_8_0 = (Keyword)cBREAKEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cMAKEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cMAKEPlusSignPlusSignKeyword_9_0 = (Keyword)cMAKEEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cFulfilsEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cFulfilsFulfilsKeyword_10_0 = (Keyword)cFulfilsEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cProvidesEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cProvidesProvidesKeyword_11_0 = (Keyword)cProvidesEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cConsumesEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cConsumesConsumesKeyword_12_0 = (Keyword)cConsumesEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cExploitsEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cExploitsExploitsKeyword_13_0 = (Keyword)cExploitsEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cDamagesEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cDamagesDamagesKeyword_14_0 = (Keyword)cDamagesEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cAttacksEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cAttacksAttacksKeyword_15_0 = (Keyword)cAttacksEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cArguesEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cArguesArguesKeyword_16_0 = (Keyword)cArguesEnumLiteralDeclaration_16.eContents().get(0);
		
		//enum RelationshipType:
		//	Wants="wants" | Does="does" | AND="and" | OR="or" | TRUST="trusts" | DELEGATE="delegates" | HURT="-" | HELP="+" |
		//	BREAK="--" | MAKE="++" | Fulfils="fulfils" | Provides="provides" | Consumes="consumes" | Exploits="exploits" |
		//	Damages="damages" | Attacks="attacks" | Argues="argues";
		public EnumRule getRule() { return rule; }

		//Wants="wants" | Does="does" | AND="and" | OR="or" | TRUST="trusts" | DELEGATE="delegates" | HURT="-" | HELP="+" |
		//BREAK="--" | MAKE="++" | Fulfils="fulfils" | Provides="provides" | Consumes="consumes" | Exploits="exploits" |
		//Damages="damages" | Attacks="attacks" | Argues="argues"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Wants="wants"
		public EnumLiteralDeclaration getWantsEnumLiteralDeclaration_0() { return cWantsEnumLiteralDeclaration_0; }

		//"wants"
		public Keyword getWantsWantsKeyword_0_0() { return cWantsWantsKeyword_0_0; }

		//Does="does"
		public EnumLiteralDeclaration getDoesEnumLiteralDeclaration_1() { return cDoesEnumLiteralDeclaration_1; }

		//"does"
		public Keyword getDoesDoesKeyword_1_0() { return cDoesDoesKeyword_1_0; }

		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_2() { return cANDEnumLiteralDeclaration_2; }

		//"and"
		public Keyword getANDAndKeyword_2_0() { return cANDAndKeyword_2_0; }

		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_3() { return cOREnumLiteralDeclaration_3; }

		//"or"
		public Keyword getOROrKeyword_3_0() { return cOROrKeyword_3_0; }

		//TRUST="trusts"
		public EnumLiteralDeclaration getTRUSTEnumLiteralDeclaration_4() { return cTRUSTEnumLiteralDeclaration_4; }

		//"trusts"
		public Keyword getTRUSTTrustsKeyword_4_0() { return cTRUSTTrustsKeyword_4_0; }

		//DELEGATE="delegates"
		public EnumLiteralDeclaration getDELEGATEEnumLiteralDeclaration_5() { return cDELEGATEEnumLiteralDeclaration_5; }

		//"delegates"
		public Keyword getDELEGATEDelegatesKeyword_5_0() { return cDELEGATEDelegatesKeyword_5_0; }

		//HURT="-"
		public EnumLiteralDeclaration getHURTEnumLiteralDeclaration_6() { return cHURTEnumLiteralDeclaration_6; }

		//"-"
		public Keyword getHURTHyphenMinusKeyword_6_0() { return cHURTHyphenMinusKeyword_6_0; }

		//HELP="+"
		public EnumLiteralDeclaration getHELPEnumLiteralDeclaration_7() { return cHELPEnumLiteralDeclaration_7; }

		//"+"
		public Keyword getHELPPlusSignKeyword_7_0() { return cHELPPlusSignKeyword_7_0; }

		//BREAK="--"
		public EnumLiteralDeclaration getBREAKEnumLiteralDeclaration_8() { return cBREAKEnumLiteralDeclaration_8; }

		//"--"
		public Keyword getBREAKHyphenMinusHyphenMinusKeyword_8_0() { return cBREAKHyphenMinusHyphenMinusKeyword_8_0; }

		//MAKE="++"
		public EnumLiteralDeclaration getMAKEEnumLiteralDeclaration_9() { return cMAKEEnumLiteralDeclaration_9; }

		//"++"
		public Keyword getMAKEPlusSignPlusSignKeyword_9_0() { return cMAKEPlusSignPlusSignKeyword_9_0; }

		//Fulfils="fulfils"
		public EnumLiteralDeclaration getFulfilsEnumLiteralDeclaration_10() { return cFulfilsEnumLiteralDeclaration_10; }

		//"fulfils"
		public Keyword getFulfilsFulfilsKeyword_10_0() { return cFulfilsFulfilsKeyword_10_0; }

		//Provides="provides"
		public EnumLiteralDeclaration getProvidesEnumLiteralDeclaration_11() { return cProvidesEnumLiteralDeclaration_11; }

		//"provides"
		public Keyword getProvidesProvidesKeyword_11_0() { return cProvidesProvidesKeyword_11_0; }

		//Consumes="consumes"
		public EnumLiteralDeclaration getConsumesEnumLiteralDeclaration_12() { return cConsumesEnumLiteralDeclaration_12; }

		//"consumes"
		public Keyword getConsumesConsumesKeyword_12_0() { return cConsumesConsumesKeyword_12_0; }

		//Exploits="exploits"
		public EnumLiteralDeclaration getExploitsEnumLiteralDeclaration_13() { return cExploitsEnumLiteralDeclaration_13; }

		//"exploits"
		public Keyword getExploitsExploitsKeyword_13_0() { return cExploitsExploitsKeyword_13_0; }

		//Damages="damages"
		public EnumLiteralDeclaration getDamagesEnumLiteralDeclaration_14() { return cDamagesEnumLiteralDeclaration_14; }

		//"damages"
		public Keyword getDamagesDamagesKeyword_14_0() { return cDamagesDamagesKeyword_14_0; }

		//Attacks="attacks"
		public EnumLiteralDeclaration getAttacksEnumLiteralDeclaration_15() { return cAttacksEnumLiteralDeclaration_15; }

		//"attacks"
		public Keyword getAttacksAttacksKeyword_15_0() { return cAttacksAttacksKeyword_15_0; }

		//Argues="argues"
		public EnumLiteralDeclaration getArguesEnumLiteralDeclaration_16() { return cArguesEnumLiteralDeclaration_16; }

		//"argues"
		public Keyword getArguesArguesKeyword_16_0() { return cArguesArguesKeyword_16_0; }
	}
	
	private SituationElements pSituation;
	private ThingElements pThing;
	private EntityElements pEntity;
	private RelationshipElements pRelationship;
	private DomainElements pDomain;
	private EntityTypeElements unknownRuleEntityType;
	private DomainTypeElements unknownRuleDomainType;
	private RelationshipTypeElements unknownRuleRelationshipType;
	private TerminalRule tID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SituationGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Situation:
	//	("model" time=ID ":")? things+=Thing*;
	public SituationElements getSituationAccess() {
		return (pSituation != null) ? pSituation : (pSituation = new SituationElements());
	}
	
	public ParserRule getSituationRule() {
		return getSituationAccess().getRule();
	}

	//Thing:
	//	Entity | Relationship | Domain;
	public ThingElements getThingAccess() {
		return (pThing != null) ? pThing : (pThing = new ThingElements());
	}
	
	public ParserRule getThingRule() {
		return getThingAccess().getRule();
	}

	//Entity:
	//	type=EntityType name=ID;
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Relationship:
	//	type=RelationshipType "(" source=[Thing] "," target=[Thing] ")";
	public RelationshipElements getRelationshipAccess() {
		return (pRelationship != null) ? pRelationship : (pRelationship = new RelationshipElements());
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	//Domain:
	//	name=ID type=DomainType properties+=Entity ("," properties+=Entity)*;
	public DomainElements getDomainAccess() {
		return (pDomain != null) ? pDomain : (pDomain = new DomainElements());
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}

	//enum EntityType:
	//	DomainAssumption="DA" | Function="FR" | Security="SR" | Anti="AR" | QualityProposition="Q" | Argument="A" |
	//	Actor="actor" | Action="action" | Attacker="attacker" | Process="process" | Activity="activity" | Resource="resource"
	//	| Asset="asset" | Event="event";
	public EntityTypeElements getEntityTypeAccess() {
		return (unknownRuleEntityType != null) ? unknownRuleEntityType : (unknownRuleEntityType = new EntityTypeElements());
	}
	
	public EnumRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}

	//enum DomainType:
	//	Specification="S" | Requirement="R" | World="W";
	public DomainTypeElements getDomainTypeAccess() {
		return (unknownRuleDomainType != null) ? unknownRuleDomainType : (unknownRuleDomainType = new DomainTypeElements());
	}
	
	public EnumRule getDomainTypeRule() {
		return getDomainTypeAccess().getRule();
	}

	//enum RelationshipType:
	//	Wants="wants" | Does="does" | AND="and" | OR="or" | TRUST="trusts" | DELEGATE="delegates" | HURT="-" | HELP="+" |
	//	BREAK="--" | MAKE="++" | Fulfils="fulfils" | Provides="provides" | Consumes="consumes" | Exploits="exploits" |
	//	Damages="damages" | Attacks="attacks" | Argues="argues";
	public RelationshipTypeElements getRelationshipTypeAccess() {
		return (unknownRuleRelationshipType != null) ? unknownRuleRelationshipType : (unknownRuleRelationshipType = new RelationshipTypeElements());
	}
	
	public EnumRule getRelationshipTypeRule() {
		return getRelationshipTypeAccess().getRule();
	}

	//terminal ID:
	//	"#" !"#"+ "#" | "^"? ("a".."z" | "A".."Z" | "_" | ".") ("a".."z" | "A".."Z" | "_" | "0".."9" | ".")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
