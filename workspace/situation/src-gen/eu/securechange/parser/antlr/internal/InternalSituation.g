/*
* generated by Xtext
*/
grammar InternalSituation;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package eu.securechange.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.securechange.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import eu.securechange.services.SituationGrammarAccess;

}

@parser::members {

 	private SituationGrammarAccess grammarAccess;
 	
    public InternalSituationParser(TokenStream input, IAstFactory factory, SituationGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("eu/securechange/parser/antlr/internal/InternalSituation.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Situation";	
   	}
   	
   	@Override
   	protected SituationGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSituation
entryRuleSituation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSituationRule(), currentNode); }
	 iv_ruleSituation=ruleSituation 
	 { $current=$iv_ruleSituation.current; } 
	 EOF 
;

// Rule Situation
ruleSituation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'model' 
    {
        createLeafNode(grammarAccess.getSituationAccess().getModelKeyword_0_0(), null); 
    }
(
(
		lv_time_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSituationAccess().getTimeIDTerminalRuleCall_0_1_0(), "time"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSituationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"time",
	        		lv_time_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getSituationAccess().getColonKeyword_0_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSituationAccess().getThingsThingParserRuleCall_1_0(), currentNode); 
	    }
		lv_things_3_0=ruleThing		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSituationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"things",
	        		lv_things_3_0, 
	        		"Thing", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleThing
entryRuleThing returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getThingRule(), currentNode); }
	 iv_ruleThing=ruleThing 
	 { $current=$iv_ruleThing.current; } 
	 EOF 
;

// Rule Thing
ruleThing returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getThingAccess().getEntityParserRuleCall_0(), currentNode); 
    }
    this_Entity_0=ruleEntity
    { 
        $current = $this_Entity_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getThingAccess().getRelationshipParserRuleCall_1(), currentNode); 
    }
    this_Relationship_1=ruleRelationship
    { 
        $current = $this_Relationship_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getThingAccess().getDomainParserRuleCall_2(), currentNode); 
    }
    this_Domain_2=ruleDomain
    { 
        $current = $this_Domain_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEntityRule(), currentNode); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getTypeEntityTypeEnumRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleEntityType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"EntityType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleRelationship
entryRuleRelationship returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationshipRule(), currentNode); }
	 iv_ruleRelationship=ruleRelationship 
	 { $current=$iv_ruleRelationship.current; } 
	 EOF 
;

// Rule Relationship
ruleRelationship returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getTypeRelationshipTypeEnumRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleRelationshipType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationshipRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"RelationshipType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getRelationshipAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationshipRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRelationshipAccess().getSourceThingCrossReference_2_0(), "source"); 
	}

)
)	',' 
    {
        createLeafNode(grammarAccess.getRelationshipAccess().getCommaKeyword_3(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationshipRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRelationshipAccess().getTargetThingCrossReference_4_0(), "target"); 
	}

)
)	')' 
    {
        createLeafNode(grammarAccess.getRelationshipAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleDomain
entryRuleDomain returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDomainRule(), currentNode); }
	 iv_ruleDomain=ruleDomain 
	 { $current=$iv_ruleDomain.current; } 
	 EOF 
;

// Rule Domain
ruleDomain returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainAccess().getTypeDomainTypeEnumRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleDomainType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"DomainType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainAccess().getPropertiesEntityParserRuleCall_1_0(), currentNode); 
	    }
		lv_properties_1_0=ruleEntity		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_1_0, 
	        		"Entity", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDomainAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainAccess().getPropertiesEntityParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_properties_3_0=ruleEntity		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_3_0, 
	        		"Entity", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Rule EntityType
ruleEntityType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'DA' 
	{
        $current = grammarAccess.getEntityTypeAccess().getDomainAssumptionEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getDomainAssumptionEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'FR' 
	{
        $current = grammarAccess.getEntityTypeAccess().getFunctionEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getFunctionEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'SR' 
	{
        $current = grammarAccess.getEntityTypeAccess().getSecurityEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getSecurityEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'AR' 
	{
        $current = grammarAccess.getEntityTypeAccess().getAntiEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getAntiEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'Q' 
	{
        $current = grammarAccess.getEntityTypeAccess().getQualityPropositionEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getQualityPropositionEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'A' 
	{
        $current = grammarAccess.getEntityTypeAccess().getArgumentEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getArgumentEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'actor' 
	{
        $current = grammarAccess.getEntityTypeAccess().getActorEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getActorEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'action' 
	{
        $current = grammarAccess.getEntityTypeAccess().getActionEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getActionEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'attacker' 
	{
        $current = grammarAccess.getEntityTypeAccess().getAttackerEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getAttackerEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'process' 
	{
        $current = grammarAccess.getEntityTypeAccess().getProcessEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getProcessEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'activity' 
	{
        $current = grammarAccess.getEntityTypeAccess().getActivityEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getActivityEnumLiteralDeclaration_10(), null); 
    }
)
    |(	'resource' 
	{
        $current = grammarAccess.getEntityTypeAccess().getResourceEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getResourceEnumLiteralDeclaration_11(), null); 
    }
)
    |(	'asset' 
	{
        $current = grammarAccess.getEntityTypeAccess().getAssetEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getAssetEnumLiteralDeclaration_12(), null); 
    }
)
    |(	'event' 
	{
        $current = grammarAccess.getEntityTypeAccess().getEventEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEntityTypeAccess().getEventEnumLiteralDeclaration_13(), null); 
    }
));



// Rule DomainType
ruleDomainType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'M' 
	{
        $current = grammarAccess.getDomainTypeAccess().getMachineEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDomainTypeAccess().getMachineEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'R' 
	{
        $current = grammarAccess.getDomainTypeAccess().getRequirementEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDomainTypeAccess().getRequirementEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'S' 
	{
        $current = grammarAccess.getDomainTypeAccess().getSpecificationEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDomainTypeAccess().getSpecificationEnumLiteralDeclaration_2(), null); 
    }
));



// Rule RelationshipType
ruleRelationshipType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'wants' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getWantsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getWantsEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'does' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getDoesEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getDoesEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'and' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getANDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getANDEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'or' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getOREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getOREnumLiteralDeclaration_3(), null); 
    }
)
    |(	'trusts' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getTRUSTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getTRUSTEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'delegates' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getDELEGATEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getDELEGATEEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'-' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getHURTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getHURTEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'+' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getHELPEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getHELPEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'--' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getBREAKEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getBREAKEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'++' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getMAKEEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getMAKEEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'fulfils' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getFulfilsEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getFulfilsEnumLiteralDeclaration_10(), null); 
    }
)
    |(	'provides' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getProvidesEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getProvidesEnumLiteralDeclaration_11(), null); 
    }
)
    |(	'consumes' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getConsumesEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getConsumesEnumLiteralDeclaration_12(), null); 
    }
)
    |(	'exploits' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getExploitsEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getExploitsEnumLiteralDeclaration_13(), null); 
    }
)
    |(	'damages' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getDamagesEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getDamagesEnumLiteralDeclaration_14(), null); 
    }
)
    |(	'attacks' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getAttacksEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getAttacksEnumLiteralDeclaration_15(), null); 
    }
)
    |(	'argues' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getArguesEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationshipTypeAccess().getArguesEnumLiteralDeclaration_16(), null); 
    }
));



RULE_ID : ('#' ~('#')+ '#'|'^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*);

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


