/*
* generated by Xtext
*/
grammar InternalSituation;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package eu.securechange.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.securechange.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import eu.securechange.services.SituationGrammarAccess;

}

@parser::members {

 	private SituationGrammarAccess grammarAccess;
 	
    public InternalSituationParser(TokenStream input, IAstFactory factory, SituationGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("eu/securechange/parser/antlr/internal/InternalSituation.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Situation";	
   	}
   	
   	@Override
   	protected SituationGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSituation
entryRuleSituation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSituationRule(), currentNode); }
	 iv_ruleSituation=ruleSituation 
	 { $current=$iv_ruleSituation.current; } 
	 EOF 
;

// Rule Situation
ruleSituation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'model' 
    {
        createLeafNode(grammarAccess.getSituationAccess().getModelKeyword_0_0(), null); 
    }
(
(
		lv_time_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSituationAccess().getTimeIDTerminalRuleCall_0_1_0(), "time"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSituationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"time",
	        		lv_time_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getSituationAccess().getColonKeyword_0_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSituationAccess().getWorldWorldParserRuleCall_1_0(), currentNode); 
	    }
		lv_world_3_0=ruleWorld		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSituationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"world",
	        		lv_world_3_0, 
	        		"World", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleWorld
entryRuleWorld returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWorldRule(), currentNode); }
	 iv_ruleWorld=ruleWorld 
	 { $current=$iv_ruleWorld.current; } 
	 EOF 
;

// Rule World
ruleWorld returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getWorldAccess().getWorldAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWorldAccess().getWorldAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWorldAccess().getEntitiesEntityParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_entities_1_0=ruleEntity		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWorldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"entities",
	        		lv_entities_1_0, 
	        		"Entity", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWorldAccess().getDomainsDomainParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_domains_2_0=ruleDomain		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWorldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"domains",
	        		lv_domains_2_0, 
	        		"Domain", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWorldAccess().getRelationshipsRelationshipParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_relationships_3_0=ruleRelationship		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWorldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"relationships",
	        		lv_relationships_3_0, 
	        		"Relationship", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;







// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEventRule(), currentNode); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'event' 
    {
        createLeafNode(grammarAccess.getEventAccess().getEventKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getObjectRule(), currentNode); }
	 iv_ruleObject=ruleObject 
	 { $current=$iv_ruleObject.current; } 
	 EOF 
;

// Rule Object
ruleObject returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getObjectAccess().getPropositionParserRuleCall_0(), currentNode); 
    }
    this_Proposition_0=ruleProposition
    { 
        $current = $this_Proposition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getObjectAccess().getEntityParserRuleCall_1(), currentNode); 
    }
    this_Entity_1=ruleEntity
    { 
        $current = $this_Entity_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getObjectAccess().getRelationshipParserRuleCall_2(), currentNode); 
    }
    this_Relationship_2=ruleRelationship
    { 
        $current = $this_Relationship_2.current; 
        currentNode = currentNode.getParent();
    }
)
;









// Entry rule entryRuleProposition
entryRuleProposition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropositionRule(), currentNode); }
	 iv_ruleProposition=ruleProposition 
	 { $current=$iv_ruleProposition.current; } 
	 EOF 
;

// Rule Proposition
ruleProposition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropositionAccess().getTypePropositionTypeEnumRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=rulePropositionType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"PropositionType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPropositionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEntityRule(), currentNode); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getActorParserRuleCall_0(), currentNode); 
    }
    this_Actor_0=ruleActor
    { 
        $current = $this_Actor_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getProcessParserRuleCall_1(), currentNode); 
    }
    this_Process_1=ruleProcess
    { 
        $current = $this_Process_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getResourceParserRuleCall_2(), currentNode); 
    }
    this_Resource_2=ruleResource
    { 
        $current = $this_Resource_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDomain
entryRuleDomain returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDomainRule(), currentNode); }
	 iv_ruleDomain=ruleDomain 
	 { $current=$iv_ruleDomain.current; } 
	 EOF 
;

// Rule Domain
ruleDomain returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainAccess().getTypeDomainTypeEnumRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleDomainType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"DomainType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainAccess().getPropertiesPropositionParserRuleCall_1_0(), currentNode); 
	    }
		lv_properties_1_0=ruleProposition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_1_0, 
	        		"Proposition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDomainAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainAccess().getPropertiesPropositionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_properties_3_0=ruleProposition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_3_0, 
	        		"Proposition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActorRule(), currentNode); }
	 iv_ruleActor=ruleActor 
	 { $current=$iv_ruleActor.current; } 
	 EOF 
;

// Rule Actor
ruleActor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getActorAccess().getStakeholderParserRuleCall_0(), currentNode); 
    }
    this_Stakeholder_0=ruleStakeholder
    { 
        $current = $this_Stakeholder_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getActorAccess().getAttackerParserRuleCall_1(), currentNode); 
    }
    this_Attacker_1=ruleAttacker
    { 
        $current = $this_Attacker_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleStakeholder
entryRuleStakeholder returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStakeholderRule(), currentNode); }
	 iv_ruleStakeholder=ruleStakeholder 
	 { $current=$iv_ruleStakeholder.current; } 
	 EOF 
;

// Rule Stakeholder
ruleStakeholder returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'actor' 
    {
        createLeafNode(grammarAccess.getStakeholderAccess().getActorKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getStakeholderAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStakeholderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleAttacker
entryRuleAttacker returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttackerRule(), currentNode); }
	 iv_ruleAttacker=ruleAttacker 
	 { $current=$iv_ruleAttacker.current; } 
	 EOF 
;

// Rule Attacker
ruleAttacker returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'attacker' 
    {
        createLeafNode(grammarAccess.getAttackerAccess().getAttackerKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAttackerAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttackerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProcessRule(), currentNode); }
	 iv_ruleProcess=ruleProcess 
	 { $current=$iv_ruleProcess.current; } 
	 EOF 
;

// Rule Process
ruleProcess returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getProcessAccess().getNaturalProcessParserRuleCall_0(), currentNode); 
    }
    this_NaturalProcess_0=ruleNaturalProcess
    { 
        $current = $this_NaturalProcess_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getProcessAccess().getHumanActivityParserRuleCall_1(), currentNode); 
    }
    this_HumanActivity_1=ruleHumanActivity
    { 
        $current = $this_HumanActivity_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNaturalProcess
entryRuleNaturalProcess returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNaturalProcessRule(), currentNode); }
	 iv_ruleNaturalProcess=ruleNaturalProcess 
	 { $current=$iv_ruleNaturalProcess.current; } 
	 EOF 
;

// Rule NaturalProcess
ruleNaturalProcess returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'process' 
    {
        createLeafNode(grammarAccess.getNaturalProcessAccess().getProcessKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNaturalProcessAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNaturalProcessRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'{' 
    {
        createLeafNode(grammarAccess.getNaturalProcessAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNaturalProcessRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getNaturalProcessAccess().getActivitiesProcessCrossReference_2_1_0(), "activities"); 
	}

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getNaturalProcessAccess().getRightCurlyBracketKeyword_2_2(), null); 
    }
)?)
;





// Entry rule entryRuleHumanActivity
entryRuleHumanActivity returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getHumanActivityRule(), currentNode); }
	 iv_ruleHumanActivity=ruleHumanActivity 
	 { $current=$iv_ruleHumanActivity.current; } 
	 EOF 
;

// Rule HumanActivity
ruleHumanActivity returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getHumanActivityAccess().getActivityAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getHumanActivityAccess().getActivityAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'activity' 
    {
        createLeafNode(grammarAccess.getHumanActivityAccess().getActivityKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getHumanActivityAccess().getActionsActionParserRuleCall_2_0(), currentNode); 
	    }
		lv_actions_2_0=ruleAction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHumanActivityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"actions",
	        		lv_actions_2_0, 
	        		"Action", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActionRule(), currentNode); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'action' 
    {
        createLeafNode(grammarAccess.getActionAccess().getActionKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getResourceRule(), currentNode); }
	 iv_ruleResource=ruleResource 
	 { $current=$iv_ruleResource.current; } 
	 EOF 
;

// Rule Resource
ruleResource returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'resource' 
    {
        createLeafNode(grammarAccess.getResourceAccess().getResourceKeyword_0_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getResourceAccess().getNameIDTerminalRuleCall_0_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResourceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getResourceAccess().getAssetParserRuleCall_1(), currentNode); 
    }
    this_Asset_2=ruleAsset
    { 
        $current = $this_Asset_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAsset
entryRuleAsset returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssetRule(), currentNode); }
	 iv_ruleAsset=ruleAsset 
	 { $current=$iv_ruleAsset.current; } 
	 EOF 
;

// Rule Asset
ruleAsset returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'asset' 
    {
        createLeafNode(grammarAccess.getAssetAccess().getAssetKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAssetAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleRelationship
entryRuleRelationship returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationshipRule(), currentNode); }
	 iv_ruleRelationship=ruleRelationship 
	 { $current=$iv_ruleRelationship.current; } 
	 EOF 
;

// Rule Relationship
ruleRelationship returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getWantsParserRuleCall_0(), currentNode); 
    }
    this_Wants_0=ruleWants
    { 
        $current = $this_Wants_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getDoesParserRuleCall_1(), currentNode); 
    }
    this_Does_1=ruleDoes
    { 
        $current = $this_Does_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getDecomposesParserRuleCall_2(), currentNode); 
    }
    this_Decomposes_2=ruleDecomposes
    { 
        $current = $this_Decomposes_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getContributesParserRuleCall_3(), currentNode); 
    }
    this_Contributes_3=ruleContributes
    { 
        $current = $this_Contributes_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getFulfilsParserRuleCall_4(), currentNode); 
    }
    this_Fulfils_4=ruleFulfils
    { 
        $current = $this_Fulfils_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getProvidesParserRuleCall_5(), currentNode); 
    }
    this_Provides_5=ruleProvides
    { 
        $current = $this_Provides_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getConsumesParserRuleCall_6(), currentNode); 
    }
    this_Consumes_6=ruleConsumes
    { 
        $current = $this_Consumes_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getDependsParserRuleCall_7(), currentNode); 
    }
    this_Depends_7=ruleDepends
    { 
        $current = $this_Depends_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getExploitsParserRuleCall_8(), currentNode); 
    }
    this_Exploits_8=ruleExploits
    { 
        $current = $this_Exploits_8.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getDamagesParserRuleCall_9(), currentNode); 
    }
    this_Damages_9=ruleDamages
    { 
        $current = $this_Damages_9.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getAttackParserRuleCall_10(), currentNode); 
    }
    this_Attack_10=ruleAttack
    { 
        $current = $this_Attack_10.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationshipAccess().getArguesParserRuleCall_11(), currentNode); 
    }
    this_Argues_11=ruleArgues
    { 
        $current = $this_Argues_11.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleWants
entryRuleWants returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWantsRule(), currentNode); }
	 iv_ruleWants=ruleWants 
	 { $current=$iv_ruleWants.current; } 
	 EOF 
;

// Rule Wants
ruleWants returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'wants' 
    {
        createLeafNode(grammarAccess.getWantsAccess().getWantsKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getWantsAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWantsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getWantsAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getWantsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getWantsAccess().getThingsThingCrossReference_3_0(), "things"); 
	}

)
)	',' 
    {
        createLeafNode(grammarAccess.getWantsAccess().getCommaKeyword_4(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getWantsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getWantsAccess().getThingsThingCrossReference_5_0(), "things"); 
	}

)
)	')' 
    {
        createLeafNode(grammarAccess.getWantsAccess().getRightParenthesisKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleDoes
entryRuleDoes returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDoesRule(), currentNode); }
	 iv_ruleDoes=ruleDoes 
	 { $current=$iv_ruleDoes.current; } 
	 EOF 
;

// Rule Does
ruleDoes returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'does' 
    {
        createLeafNode(grammarAccess.getDoesAccess().getDoesKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDoesAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getDoesAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDoesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDoesAccess().getThingsThingCrossReference_3_0(), "things"); 
	}

)
)	',' 
    {
        createLeafNode(grammarAccess.getDoesAccess().getCommaKeyword_4(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDoesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDoesAccess().getThingsThingCrossReference_5_0(), "things"); 
	}

)
)	')' 
    {
        createLeafNode(grammarAccess.getDoesAccess().getRightParenthesisKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleDecomposes
entryRuleDecomposes returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDecomposesRule(), currentNode); }
	 iv_ruleDecomposes=ruleDecomposes 
	 { $current=$iv_ruleDecomposes.current; } 
	 EOF 
;

// Rule Decomposes
ruleDecomposes returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDecomposesAccess().getTypeDecompositionLabelEnumRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleDecompositionLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDecomposesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"DecompositionLabel", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDecomposesAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDecomposesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getDecomposesAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDecomposesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDecomposesAccess().getThingsThingCrossReference_3_0(), "things"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDecomposesAccess().getCommaKeyword_4_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDecomposesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDecomposesAccess().getThingsThingCrossReference_4_1_0(), "things"); 
	}

)
))+	')' 
    {
        createLeafNode(grammarAccess.getDecomposesAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleContributes
entryRuleContributes returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getContributesRule(), currentNode); }
	 iv_ruleContributes=ruleContributes 
	 { $current=$iv_ruleContributes.current; } 
	 EOF 
;

// Rule Contributes
ruleContributes returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getContributesAccess().getTypeContributionLabelEnumRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleContributionLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContributesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"ContributionLabel", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getContributesAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContributesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getContributesAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getContributesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getContributesAccess().getThingsThingCrossReference_3_0(), "things"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getContributesAccess().getCommaKeyword_4_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getContributesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getContributesAccess().getThingsThingCrossReference_4_1_0(), "things"); 
	}

)
))+	')' 
    {
        createLeafNode(grammarAccess.getContributesAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleFulfils
entryRuleFulfils returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFulfilsRule(), currentNode); }
	 iv_ruleFulfils=ruleFulfils 
	 { $current=$iv_ruleFulfils.current; } 
	 EOF 
;

// Rule Fulfils
ruleFulfils returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'fulfils' 
    {
        createLeafNode(grammarAccess.getFulfilsAccess().getFulfilsKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFulfilsAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFulfilsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getFulfilsAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFulfilsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getFulfilsAccess().getThingsThingCrossReference_3_0(), "things"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getFulfilsAccess().getCommaKeyword_4_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFulfilsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getFulfilsAccess().getThingsThingCrossReference_4_1_0(), "things"); 
	}

)
))+	')' 
    {
        createLeafNode(grammarAccess.getFulfilsAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleDepends
entryRuleDepends returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDependsRule(), currentNode); }
	 iv_ruleDepends=ruleDepends 
	 { $current=$iv_ruleDepends.current; } 
	 EOF 
;

// Rule Depends
ruleDepends returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDependsAccess().getKindDependencyTypeEnumRuleCall_0_0(), currentNode); 
	    }
		lv_kind_0_0=ruleDependencyType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDependsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"kind",
	        		lv_kind_0_0, 
	        		"DependencyType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDependsAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDependsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getDependsAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDependsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDependsAccess().getThingsThingCrossReference_3_0(), "things"); 
	}

)
)	',' 
    {
        createLeafNode(grammarAccess.getDependsAccess().getCommaKeyword_4(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDependsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDependsAccess().getThingsThingCrossReference_5_0(), "things"); 
	}

)
)	',' 
    {
        createLeafNode(grammarAccess.getDependsAccess().getCommaKeyword_6(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDependsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDependsAccess().getThingsThingCrossReference_7_0(), "things"); 
	}

)
)	')' 
    {
        createLeafNode(grammarAccess.getDependsAccess().getRightParenthesisKeyword_8(), null); 
    }
)
;





// Entry rule entryRuleProvides
entryRuleProvides returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProvidesRule(), currentNode); }
	 iv_ruleProvides=ruleProvides 
	 { $current=$iv_ruleProvides.current; } 
	 EOF 
;

// Rule Provides
ruleProvides returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'provides' 
    {
        createLeafNode(grammarAccess.getProvidesAccess().getProvidesKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getProvidesAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getProvidesAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getProvidesAccess().getThingsThingCrossReference_3_0(), "things"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getProvidesAccess().getCommaKeyword_4_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getProvidesAccess().getThingsThingCrossReference_4_1_0(), "things"); 
	}

)
))+	')' 
    {
        createLeafNode(grammarAccess.getProvidesAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleConsumes
entryRuleConsumes returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConsumesRule(), currentNode); }
	 iv_ruleConsumes=ruleConsumes 
	 { $current=$iv_ruleConsumes.current; } 
	 EOF 
;

// Rule Consumes
ruleConsumes returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'consumes' 
    {
        createLeafNode(grammarAccess.getConsumesAccess().getConsumesKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getConsumesAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConsumesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getConsumesAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConsumesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConsumesAccess().getThingsThingCrossReference_3_0(), "things"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getConsumesAccess().getCommaKeyword_4_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConsumesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConsumesAccess().getThingsThingCrossReference_4_1_0(), "things"); 
	}

)
))+	')' 
    {
        createLeafNode(grammarAccess.getConsumesAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleExploits
entryRuleExploits returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExploitsRule(), currentNode); }
	 iv_ruleExploits=ruleExploits 
	 { $current=$iv_ruleExploits.current; } 
	 EOF 
;

// Rule Exploits
ruleExploits returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'exploits' 
    {
        createLeafNode(grammarAccess.getExploitsAccess().getExploitsKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getExploitsAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExploitsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getExploitsAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getExploitsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getExploitsAccess().getThingsThingCrossReference_3_0(), "things"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getExploitsAccess().getCommaKeyword_4_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getExploitsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getExploitsAccess().getThingsThingCrossReference_4_1_0(), "things"); 
	}

)
))+	')' 
    {
        createLeafNode(grammarAccess.getExploitsAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleDamages
entryRuleDamages returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDamagesRule(), currentNode); }
	 iv_ruleDamages=ruleDamages 
	 { $current=$iv_ruleDamages.current; } 
	 EOF 
;

// Rule Damages
ruleDamages returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'damages' 
    {
        createLeafNode(grammarAccess.getDamagesAccess().getDamagesKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDamagesAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDamagesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getDamagesAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDamagesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDamagesAccess().getThingsThingCrossReference_3_0(), "things"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDamagesAccess().getCommaKeyword_4_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDamagesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDamagesAccess().getThingsThingCrossReference_4_1_0(), "things"); 
	}

)
))+	')' 
    {
        createLeafNode(grammarAccess.getDamagesAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleAttack
entryRuleAttack returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttackRule(), currentNode); }
	 iv_ruleAttack=ruleAttack 
	 { $current=$iv_ruleAttack.current; } 
	 EOF 
;

// Rule Attack
ruleAttack returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'attack' 
    {
        createLeafNode(grammarAccess.getAttackAccess().getAttackKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAttackAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttackRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getAttackAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAttackRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAttackAccess().getThingsThingCrossReference_3_0(), "things"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getAttackAccess().getCommaKeyword_4_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAttackRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAttackAccess().getThingsThingCrossReference_4_1_0(), "things"); 
	}

)
))+	')' 
    {
        createLeafNode(grammarAccess.getAttackAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleArgues
entryRuleArgues returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArguesRule(), currentNode); }
	 iv_ruleArgues=ruleArgues 
	 { $current=$iv_ruleArgues.current; } 
	 EOF 
;

// Rule Argues
ruleArgues returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'argues' 
    {
        createLeafNode(grammarAccess.getArguesAccess().getArguesKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getArguesAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArguesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getArguesAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getArguesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getArguesAccess().getThingsThingCrossReference_3_0(), "things"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getArguesAccess().getCommaKeyword_4_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getArguesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getArguesAccess().getThingsThingCrossReference_4_1_0(), "things"); 
	}

)
))+	')' 
    {
        createLeafNode(grammarAccess.getArguesAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Rule PropositionType
rulePropositionType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'DA' 
	{
        $current = grammarAccess.getPropositionTypeAccess().getDomainAssumptionEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPropositionTypeAccess().getDomainAssumptionEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'FR' 
	{
        $current = grammarAccess.getPropositionTypeAccess().getFunctionEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPropositionTypeAccess().getFunctionEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'SR' 
	{
        $current = grammarAccess.getPropositionTypeAccess().getSecurityEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPropositionTypeAccess().getSecurityEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'AR' 
	{
        $current = grammarAccess.getPropositionTypeAccess().getAntiEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPropositionTypeAccess().getAntiEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'Q' 
	{
        $current = grammarAccess.getPropositionTypeAccess().getQualityPropositionEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPropositionTypeAccess().getQualityPropositionEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'A' 
	{
        $current = grammarAccess.getPropositionTypeAccess().getArgumentEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getPropositionTypeAccess().getArgumentEnumLiteralDeclaration_5(), null); 
    }
));



// Rule DomainType
ruleDomainType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'M' 
	{
        $current = grammarAccess.getDomainTypeAccess().getMachineEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDomainTypeAccess().getMachineEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'R' 
	{
        $current = grammarAccess.getDomainTypeAccess().getRequirementEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDomainTypeAccess().getRequirementEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'S' 
	{
        $current = grammarAccess.getDomainTypeAccess().getSpecificationEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDomainTypeAccess().getSpecificationEnumLiteralDeclaration_2(), null); 
    }
));



// Rule DecompositionLabel
ruleDecompositionLabel returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'and' 
	{
        $current = grammarAccess.getDecompositionLabelAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDecompositionLabelAccess().getANDEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'or' 
	{
        $current = grammarAccess.getDecompositionLabelAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDecompositionLabelAccess().getOREnumLiteralDeclaration_1(), null); 
    }
));



// Rule ContributionLabel
ruleContributionLabel returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'-' 
	{
        $current = grammarAccess.getContributionLabelAccess().getHURTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getContributionLabelAccess().getHURTEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'+' 
	{
        $current = grammarAccess.getContributionLabelAccess().getHELPEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getContributionLabelAccess().getHELPEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'--' 
	{
        $current = grammarAccess.getContributionLabelAccess().getBREAKEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getContributionLabelAccess().getBREAKEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'++' 
	{
        $current = grammarAccess.getContributionLabelAccess().getMAKEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getContributionLabelAccess().getMAKEEnumLiteralDeclaration_3(), null); 
    }
));



// Rule DependencyType
ruleDependencyType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'trusts' 
	{
        $current = grammarAccess.getDependencyTypeAccess().getTRUSTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDependencyTypeAccess().getTRUSTEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'delegates' 
	{
        $current = grammarAccess.getDependencyTypeAccess().getDELEGATEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDependencyTypeAccess().getDELEGATEEnumLiteralDeclaration_1(), null); 
    }
));



RULE_ID : ('#' ~('#')+ '#'|'^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*);

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


