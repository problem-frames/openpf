/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package uk.ac.open.event.eventcalculus.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import uk.ac.open.event.eventcalculus.util.EventcalculusAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EventcalculusItemProviderAdapterFactory extends EventcalculusAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EventcalculusItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Knowledge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KnowledgeItemProvider knowledgeItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Knowledge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKnowledgeAdapter() {
		if (knowledgeItemProvider == null) {
			knowledgeItemProvider = new KnowledgeItemProvider(this);
		}

		return knowledgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.VarDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarDeclItemProvider varDeclItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.VarDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarDeclAdapter() {
		if (varDeclItemProvider == null) {
			varDeclItemProvider = new VarDeclItemProvider(this);
		}

		return varDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.IntTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntTermItemProvider intTermItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.IntTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntTermAdapter() {
		if (intTermItemProvider == null) {
			intTermItemProvider = new IntTermItemProvider(this);
		}

		return intTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.ConstTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstTermItemProvider constTermItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.ConstTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstTermAdapter() {
		if (constTermItemProvider == null) {
			constTermItemProvider = new ConstTermItemProvider(this);
		}

		return constTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.VarTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarTermItemProvider varTermItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.VarTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarTermAdapter() {
		if (varTermItemProvider == null) {
			varTermItemProvider = new VarTermItemProvider(this);
		}

		return varTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.IntExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntExprItemProvider intExprItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.IntExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntExprAdapter() {
		if (intExprItemProvider == null) {
			intExprItemProvider = new IntExprItemProvider(this);
		}

		return intExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.BinaryIntExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryIntExprItemProvider binaryIntExprItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.BinaryIntExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryIntExprAdapter() {
		if (binaryIntExprItemProvider == null) {
			binaryIntExprItemProvider = new BinaryIntExprItemProvider(this);
		}

		return binaryIntExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.TemporalPredicate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalPredicateItemProvider temporalPredicateItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.TemporalPredicate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalPredicateAdapter() {
		if (temporalPredicateItemProvider == null) {
			temporalPredicateItemProvider = new TemporalPredicateItemProvider(this);
		}

		return temporalPredicateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.BoolExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoolExprItemProvider boolExprItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.BoolExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoolExprAdapter() {
		if (boolExprItemProvider == null) {
			boolExprItemProvider = new BoolExprItemProvider(this);
		}

		return boolExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.UnaryBoolExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryBoolExprItemProvider unaryBoolExprItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.UnaryBoolExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryBoolExprAdapter() {
		if (unaryBoolExprItemProvider == null) {
			unaryBoolExprItemProvider = new UnaryBoolExprItemProvider(this);
		}

		return unaryBoolExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.BinaryBoolExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryBoolExprItemProvider binaryBoolExprItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.BinaryBoolExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryBoolExprAdapter() {
		if (binaryBoolExprItemProvider == null) {
			binaryBoolExprItemProvider = new BinaryBoolExprItemProvider(this);
		}

		return binaryBoolExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Sort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SortItemProvider sortItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Sort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSortAdapter() {
		if (sortItemProvider == null) {
			sortItemProvider = new SortItemProvider(this);
		}

		return sortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Import} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportItemProvider importItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Import}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportAdapter() {
		if (importItemProvider == null) {
			importItemProvider = new ImportItemProvider(this);
		}

		return importItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Var} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarItemProvider varItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Var}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarAdapter() {
		if (varItemProvider == null) {
			varItemProvider = new VarItemProvider(this);
		}

		return varItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Fluent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FluentItemProvider fluentItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Fluent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFluentAdapter() {
		if (fluentItemProvider == null) {
			fluentItemProvider = new FluentItemProvider(this);
		}

		return fluentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Term} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermItemProvider termItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Term}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermAdapter() {
		if (termItemProvider == null) {
			termItemProvider = new TermItemProvider(this);
		}

		return termItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.HoldsAt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HoldsAtItemProvider holdsAtItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.HoldsAt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHoldsAtAdapter() {
		if (holdsAtItemProvider == null) {
			holdsAtItemProvider = new HoldsAtItemProvider(this);
		}

		return holdsAtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Happens} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HappensItemProvider happensItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Happens}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHappensAdapter() {
		if (happensItemProvider == null) {
			happensItemProvider = new HappensItemProvider(this);
		}

		return happensItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Initiates} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitiatesItemProvider initiatesItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Initiates}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitiatesAdapter() {
		if (initiatesItemProvider == null) {
			initiatesItemProvider = new InitiatesItemProvider(this);
		}

		return initiatesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Terminates} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminatesItemProvider terminatesItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Terminates}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTerminatesAdapter() {
		if (terminatesItemProvider == null) {
			terminatesItemProvider = new TerminatesItemProvider(this);
		}

		return terminatesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.Path} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathItemProvider pathItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.Path}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathAdapter() {
		if (pathItemProvider == null) {
			pathItemProvider = new PathItemProvider(this);
		}

		return pathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.open.event.eventcalculus.File} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileItemProvider fileItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.open.event.eventcalculus.File}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileAdapter() {
		if (fileItemProvider == null) {
			fileItemProvider = new FileItemProvider(this);
		}

		return fileItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (knowledgeItemProvider != null) knowledgeItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (varDeclItemProvider != null) varDeclItemProvider.dispose();
		if (intTermItemProvider != null) intTermItemProvider.dispose();
		if (constTermItemProvider != null) constTermItemProvider.dispose();
		if (varTermItemProvider != null) varTermItemProvider.dispose();
		if (intExprItemProvider != null) intExprItemProvider.dispose();
		if (binaryIntExprItemProvider != null) binaryIntExprItemProvider.dispose();
		if (temporalPredicateItemProvider != null) temporalPredicateItemProvider.dispose();
		if (boolExprItemProvider != null) boolExprItemProvider.dispose();
		if (unaryBoolExprItemProvider != null) unaryBoolExprItemProvider.dispose();
		if (binaryBoolExprItemProvider != null) binaryBoolExprItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (sortItemProvider != null) sortItemProvider.dispose();
		if (importItemProvider != null) importItemProvider.dispose();
		if (varItemProvider != null) varItemProvider.dispose();
		if (fluentItemProvider != null) fluentItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (termItemProvider != null) termItemProvider.dispose();
		if (holdsAtItemProvider != null) holdsAtItemProvider.dispose();
		if (happensItemProvider != null) happensItemProvider.dispose();
		if (initiatesItemProvider != null) initiatesItemProvider.dispose();
		if (terminatesItemProvider != null) terminatesItemProvider.dispose();
		if (pathItemProvider != null) pathItemProvider.dispose();
		if (fileItemProvider != null) fileItemProvider.dispose();
	}

}
