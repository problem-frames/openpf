/*
* generated by Xtext
*/

package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ArgumentsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGivenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGroundsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGroundstatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroundstatementsGStatementParserRuleCall_2_0 = (RuleCall)cGroundstatementsAssignment_2.eContents().get(0);
		private final Keyword cWarrantedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cByKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cGroundstatementsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cGroundstatementsGStatementParserRuleCall_5_0_0 = (RuleCall)cGroundstatementsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cInnerAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cInnerRecArgParserRuleCall_5_1_1_0 = (RuleCall)cInnerAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Keyword cThusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cClaimKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cGroundstatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cGroundstatementsGStatementParserRuleCall_8_0 = (RuleCall)cGroundstatementsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cRebuttedKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cByKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cGroundstatementsAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cGroundstatementsGStatementParserRuleCall_9_2_0 = (RuleCall)cGroundstatementsAssignment_9_2.eContents().get(0);
		private final Keyword cFullStopKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Arg:
		//	"given" "grounds" groundstatements+=gStatement+ "warranted" "by" (groundstatements+=gStatement+ | "(" inner=RecArg
		//	")") "thus" "claim" groundstatements+=gStatement+ ("rebutted" "by" groundstatements+=gStatement+)? ".";
		public ParserRule getRule() { return rule; }

		//"given" "grounds" groundstatements+=gStatement+ "warranted" "by" (groundstatements+=gStatement+ | "(" inner=RecArg ")")
		//"thus" "claim" groundstatements+=gStatement+ ("rebutted" "by" groundstatements+=gStatement+)? "."
		public Group getGroup() { return cGroup; }

		//"given"
		public Keyword getGivenKeyword_0() { return cGivenKeyword_0; }

		//"grounds"
		public Keyword getGroundsKeyword_1() { return cGroundsKeyword_1; }

		//groundstatements+=gStatement+
		public Assignment getGroundstatementsAssignment_2() { return cGroundstatementsAssignment_2; }

		//gStatement
		public RuleCall getGroundstatementsGStatementParserRuleCall_2_0() { return cGroundstatementsGStatementParserRuleCall_2_0; }

		//"warranted"
		public Keyword getWarrantedKeyword_3() { return cWarrantedKeyword_3; }

		//"by"
		public Keyword getByKeyword_4() { return cByKeyword_4; }

		//groundstatements+=gStatement+ | "(" inner=RecArg ")"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//groundstatements+=gStatement+
		public Assignment getGroundstatementsAssignment_5_0() { return cGroundstatementsAssignment_5_0; }

		//gStatement
		public RuleCall getGroundstatementsGStatementParserRuleCall_5_0_0() { return cGroundstatementsGStatementParserRuleCall_5_0_0; }

		//"(" inner=RecArg ")"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1_0() { return cLeftParenthesisKeyword_5_1_0; }

		//inner=RecArg
		public Assignment getInnerAssignment_5_1_1() { return cInnerAssignment_5_1_1; }

		//RecArg
		public RuleCall getInnerRecArgParserRuleCall_5_1_1_0() { return cInnerRecArgParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_1_2() { return cRightParenthesisKeyword_5_1_2; }

		//"thus"
		public Keyword getThusKeyword_6() { return cThusKeyword_6; }

		//"claim"
		public Keyword getClaimKeyword_7() { return cClaimKeyword_7; }

		//groundstatements+=gStatement+
		public Assignment getGroundstatementsAssignment_8() { return cGroundstatementsAssignment_8; }

		//gStatement
		public RuleCall getGroundstatementsGStatementParserRuleCall_8_0() { return cGroundstatementsGStatementParserRuleCall_8_0; }

		//("rebutted" "by" groundstatements+=gStatement+)?
		public Group getGroup_9() { return cGroup_9; }

		//"rebutted"
		public Keyword getRebuttedKeyword_9_0() { return cRebuttedKeyword_9_0; }

		//"by"
		public Keyword getByKeyword_9_1() { return cByKeyword_9_1; }

		//groundstatements+=gStatement+
		public Assignment getGroundstatementsAssignment_9_2() { return cGroundstatementsAssignment_9_2; }

		//gStatement
		public RuleCall getGroundstatementsGStatementParserRuleCall_9_2_0() { return cGroundstatementsGStatementParserRuleCall_9_2_0; }

		//"."
		public Keyword getFullStopKeyword_10() { return cFullStopKeyword_10; }
	}

	public class GStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGroundstrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroundstrSTRINGTerminalRuleCall_2_0 = (RuleCall)cGroundstrAssignment_2.eContents().get(0);
		
		//gStatement:
		//	name=ID ":" groundstr=STRING;
		public ParserRule getRule() { return rule; }

		//name=ID ":" groundstr=STRING
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//groundstr=STRING
		public Assignment getGroundstrAssignment_2() { return cGroundstrAssignment_2; }

		//STRING
		public RuleCall getGroundstrSTRINGTerminalRuleCall_2_0() { return cGroundstrSTRINGTerminalRuleCall_2_0; }
	}

	public class RecArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGivenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGroundsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGroundstatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroundstatementsGStatementParserRuleCall_2_0 = (RuleCall)cGroundstatementsAssignment_2.eContents().get(0);
		private final Keyword cWarrantedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cByKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cGroundstatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGroundstatementsGStatementParserRuleCall_5_0 = (RuleCall)cGroundstatementsAssignment_5.eContents().get(0);
		private final Keyword cThusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cClaimKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cGroundstatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cGroundstatementsGStatementParserRuleCall_8_0 = (RuleCall)cGroundstatementsAssignment_8.eContents().get(0);
		
		/// *
		//Argument:
		//	"claim" cname=ID ":" claimstr=STRING
		//	"grounds" gname=ID "(" (groundstatements+=gStatement)* ")"
		//	"warrants" wname=ID "(" (warrantstatements+=wStatement)* ")"
		//	;
		//
		//Rebuttal:
		//	"argument" aname=Argument
		//	"rebuttals" rname=ID "(" (rebuttalstatements+=rStatement)* ")";
		//
		//gStatement:
		//	"statement" name=ID ":" groundstr=STRING;
		//	
		//wStatement:
		//	"statement" name=ID ":" groundstr=STRING;
		//
		//rStatement:
		//	"statement" name=ID ":" groundstr=STRING;
		// * /RecArg:
		//	"given" "grounds" groundstatements+=gStatement+ "warranted" "by" groundstatements+=gStatement+ "thus" "claim"
		//	groundstatements+=gStatement+;
		public ParserRule getRule() { return rule; }

		//"given" "grounds" groundstatements+=gStatement+ "warranted" "by" groundstatements+=gStatement+ "thus" "claim"
		//groundstatements+=gStatement+
		public Group getGroup() { return cGroup; }

		//"given"
		public Keyword getGivenKeyword_0() { return cGivenKeyword_0; }

		//"grounds"
		public Keyword getGroundsKeyword_1() { return cGroundsKeyword_1; }

		//groundstatements+=gStatement+
		public Assignment getGroundstatementsAssignment_2() { return cGroundstatementsAssignment_2; }

		//gStatement
		public RuleCall getGroundstatementsGStatementParserRuleCall_2_0() { return cGroundstatementsGStatementParserRuleCall_2_0; }

		//"warranted"
		public Keyword getWarrantedKeyword_3() { return cWarrantedKeyword_3; }

		//"by"
		public Keyword getByKeyword_4() { return cByKeyword_4; }

		//groundstatements+=gStatement+
		public Assignment getGroundstatementsAssignment_5() { return cGroundstatementsAssignment_5; }

		//gStatement
		public RuleCall getGroundstatementsGStatementParserRuleCall_5_0() { return cGroundstatementsGStatementParserRuleCall_5_0; }

		//"thus"
		public Keyword getThusKeyword_6() { return cThusKeyword_6; }

		//"claim"
		public Keyword getClaimKeyword_7() { return cClaimKeyword_7; }

		//groundstatements+=gStatement+
		public Assignment getGroundstatementsAssignment_8() { return cGroundstatementsAssignment_8; }

		//gStatement
		public RuleCall getGroundstatementsGStatementParserRuleCall_8_0() { return cGroundstatementsGStatementParserRuleCall_8_0; }
	}
	
	
	private ArgElements pArg;
	private GStatementElements pGStatement;
	private RecArgElements pRecArg;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArgumentsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Arg:
	//	"given" "grounds" groundstatements+=gStatement+ "warranted" "by" (groundstatements+=gStatement+ | "(" inner=RecArg
	//	")") "thus" "claim" groundstatements+=gStatement+ ("rebutted" "by" groundstatements+=gStatement+)? ".";
	public ArgElements getArgAccess() {
		return (pArg != null) ? pArg : (pArg = new ArgElements());
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}

	//gStatement:
	//	name=ID ":" groundstr=STRING;
	public GStatementElements getGStatementAccess() {
		return (pGStatement != null) ? pGStatement : (pGStatement = new GStatementElements());
	}
	
	public ParserRule getGStatementRule() {
		return getGStatementAccess().getRule();
	}

	/// *
	//Argument:
	//	"claim" cname=ID ":" claimstr=STRING
	//	"grounds" gname=ID "(" (groundstatements+=gStatement)* ")"
	//	"warrants" wname=ID "(" (warrantstatements+=wStatement)* ")"
	//	;
	//
	//Rebuttal:
	//	"argument" aname=Argument
	//	"rebuttals" rname=ID "(" (rebuttalstatements+=rStatement)* ")";
	//
	//gStatement:
	//	"statement" name=ID ":" groundstr=STRING;
	//	
	//wStatement:
	//	"statement" name=ID ":" groundstr=STRING;
	//
	//rStatement:
	//	"statement" name=ID ":" groundstr=STRING;
	// * /RecArg:
	//	"given" "grounds" groundstatements+=gStatement+ "warranted" "by" groundstatements+=gStatement+ "thus" "claim"
	//	groundstatements+=gStatement+;
	public RecArgElements getRecArgAccess() {
		return (pRecArg != null) ? pRecArg : (pRecArg = new RecArgElements());
	}
	
	public ParserRule getRecArgRule() {
		return getRecArgAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
