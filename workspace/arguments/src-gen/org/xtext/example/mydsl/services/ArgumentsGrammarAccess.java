/*
* generated by Xtext
*/

package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ArgumentsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClaimKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCnameIDTerminalRuleCall_1_0 = (RuleCall)cCnameAssignment_1.eContents().get(0);
		private final Assignment cClaimstrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClaimstrSTRINGTerminalRuleCall_2_0 = (RuleCall)cClaimstrAssignment_2.eContents().get(0);
		private final Keyword cGroundsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGnameIDTerminalRuleCall_4_0 = (RuleCall)cGnameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cGroundstatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGroundstatementsGStatementParserRuleCall_6_0 = (RuleCall)cGroundstatementsAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cWarrantsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cWnameAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cWnameIDTerminalRuleCall_9_0 = (RuleCall)cWnameAssignment_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cWarrantstatementsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cWarrantstatementsWStatementParserRuleCall_11_0 = (RuleCall)cWarrantstatementsAssignment_11.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Argument:
		//	"claim" cname=ID claimstr=STRING "grounds" gname=ID "(" groundstatements+=gStatement* ")" "warrants" wname=ID "("
		//	warrantstatements+=wStatement* ")";
		public ParserRule getRule() { return rule; }

		//"claim" cname=ID claimstr=STRING "grounds" gname=ID "(" groundstatements+=gStatement* ")" "warrants" wname=ID "("
		//warrantstatements+=wStatement* ")"
		public Group getGroup() { return cGroup; }

		//"claim"
		public Keyword getClaimKeyword_0() { return cClaimKeyword_0; }

		//cname=ID
		public Assignment getCnameAssignment_1() { return cCnameAssignment_1; }

		//ID
		public RuleCall getCnameIDTerminalRuleCall_1_0() { return cCnameIDTerminalRuleCall_1_0; }

		//claimstr=STRING
		public Assignment getClaimstrAssignment_2() { return cClaimstrAssignment_2; }

		//STRING
		public RuleCall getClaimstrSTRINGTerminalRuleCall_2_0() { return cClaimstrSTRINGTerminalRuleCall_2_0; }

		//"grounds"
		public Keyword getGroundsKeyword_3() { return cGroundsKeyword_3; }

		//gname=ID
		public Assignment getGnameAssignment_4() { return cGnameAssignment_4; }

		//ID
		public RuleCall getGnameIDTerminalRuleCall_4_0() { return cGnameIDTerminalRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//groundstatements+=gStatement*
		public Assignment getGroundstatementsAssignment_6() { return cGroundstatementsAssignment_6; }

		//gStatement
		public RuleCall getGroundstatementsGStatementParserRuleCall_6_0() { return cGroundstatementsGStatementParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//"warrants"
		public Keyword getWarrantsKeyword_8() { return cWarrantsKeyword_8; }

		//wname=ID
		public Assignment getWnameAssignment_9() { return cWnameAssignment_9; }

		//ID
		public RuleCall getWnameIDTerminalRuleCall_9_0() { return cWnameIDTerminalRuleCall_9_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_10() { return cLeftParenthesisKeyword_10; }

		//warrantstatements+=wStatement*
		public Assignment getWarrantstatementsAssignment_11() { return cWarrantstatementsAssignment_11; }

		//wStatement
		public RuleCall getWarrantstatementsWStatementParserRuleCall_11_0() { return cWarrantstatementsWStatementParserRuleCall_11_0; }

		//")"
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}

	public class RebuttalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rebuttal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArgumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnameArgumentParserRuleCall_1_0 = (RuleCall)cAnameAssignment_1.eContents().get(0);
		private final Keyword cRebuttalsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRnameIDTerminalRuleCall_3_0 = (RuleCall)cRnameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRebuttalstatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRebuttalstatementsRStatementParserRuleCall_5_0 = (RuleCall)cRebuttalstatementsAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Rebuttal:
		//	"argument" aname=Argument "rebuttals" rname=ID "(" rebuttalstatements+=rStatement* ")";
		public ParserRule getRule() { return rule; }

		//"argument" aname=Argument "rebuttals" rname=ID "(" rebuttalstatements+=rStatement* ")"
		public Group getGroup() { return cGroup; }

		//"argument"
		public Keyword getArgumentKeyword_0() { return cArgumentKeyword_0; }

		//aname=Argument
		public Assignment getAnameAssignment_1() { return cAnameAssignment_1; }

		//Argument
		public RuleCall getAnameArgumentParserRuleCall_1_0() { return cAnameArgumentParserRuleCall_1_0; }

		//"rebuttals"
		public Keyword getRebuttalsKeyword_2() { return cRebuttalsKeyword_2; }

		//rname=ID
		public Assignment getRnameAssignment_3() { return cRnameAssignment_3; }

		//ID
		public RuleCall getRnameIDTerminalRuleCall_3_0() { return cRnameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//rebuttalstatements+=rStatement*
		public Assignment getRebuttalstatementsAssignment_5() { return cRebuttalstatementsAssignment_5; }

		//rStatement
		public RuleCall getRebuttalstatementsRStatementParserRuleCall_5_0() { return cRebuttalstatementsRStatementParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class GStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cGroundstrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroundstrSTRINGTerminalRuleCall_2_0 = (RuleCall)cGroundstrAssignment_2.eContents().get(0);
		
		//gStatement:
		//	"statement" name=ID groundstr=STRING;
		public ParserRule getRule() { return rule; }

		//"statement" name=ID groundstr=STRING
		public Group getGroup() { return cGroup; }

		//"statement"
		public Keyword getStatementKeyword_0() { return cStatementKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//groundstr=STRING
		public Assignment getGroundstrAssignment_2() { return cGroundstrAssignment_2; }

		//STRING
		public RuleCall getGroundstrSTRINGTerminalRuleCall_2_0() { return cGroundstrSTRINGTerminalRuleCall_2_0; }
	}

	public class WStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cGroundstrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroundstrSTRINGTerminalRuleCall_2_0 = (RuleCall)cGroundstrAssignment_2.eContents().get(0);
		
		//wStatement:
		//	"statement" name=ID groundstr=STRING;
		public ParserRule getRule() { return rule; }

		//"statement" name=ID groundstr=STRING
		public Group getGroup() { return cGroup; }

		//"statement"
		public Keyword getStatementKeyword_0() { return cStatementKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//groundstr=STRING
		public Assignment getGroundstrAssignment_2() { return cGroundstrAssignment_2; }

		//STRING
		public RuleCall getGroundstrSTRINGTerminalRuleCall_2_0() { return cGroundstrSTRINGTerminalRuleCall_2_0; }
	}

	public class RStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cGroundstrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroundstrSTRINGTerminalRuleCall_2_0 = (RuleCall)cGroundstrAssignment_2.eContents().get(0);
		
		//rStatement:
		//	"statement" name=ID groundstr=STRING;
		public ParserRule getRule() { return rule; }

		//"statement" name=ID groundstr=STRING
		public Group getGroup() { return cGroup; }

		//"statement"
		public Keyword getStatementKeyword_0() { return cStatementKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//groundstr=STRING
		public Assignment getGroundstrAssignment_2() { return cGroundstrAssignment_2; }

		//STRING
		public RuleCall getGroundstrSTRINGTerminalRuleCall_2_0() { return cGroundstrSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private ArgumentElements pArgument;
	private RebuttalElements pRebuttal;
	private GStatementElements pGStatement;
	private WStatementElements pWStatement;
	private RStatementElements pRStatement;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArgumentsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Argument:
	//	"claim" cname=ID claimstr=STRING "grounds" gname=ID "(" groundstatements+=gStatement* ")" "warrants" wname=ID "("
	//	warrantstatements+=wStatement* ")";
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//Rebuttal:
	//	"argument" aname=Argument "rebuttals" rname=ID "(" rebuttalstatements+=rStatement* ")";
	public RebuttalElements getRebuttalAccess() {
		return (pRebuttal != null) ? pRebuttal : (pRebuttal = new RebuttalElements());
	}
	
	public ParserRule getRebuttalRule() {
		return getRebuttalAccess().getRule();
	}

	//gStatement:
	//	"statement" name=ID groundstr=STRING;
	public GStatementElements getGStatementAccess() {
		return (pGStatement != null) ? pGStatement : (pGStatement = new GStatementElements());
	}
	
	public ParserRule getGStatementRule() {
		return getGStatementAccess().getRule();
	}

	//wStatement:
	//	"statement" name=ID groundstr=STRING;
	public WStatementElements getWStatementAccess() {
		return (pWStatement != null) ? pWStatement : (pWStatement = new WStatementElements());
	}
	
	public ParserRule getWStatementRule() {
		return getWStatementAccess().getRule();
	}

	//rStatement:
	//	"statement" name=ID groundstr=STRING;
	public RStatementElements getRStatementAccess() {
		return (pRStatement != null) ? pRStatement : (pRStatement = new RStatementElements());
	}
	
	public ParserRule getRStatementRule() {
		return getRStatementAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
