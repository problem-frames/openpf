/*
* generated by Xtext
*/
grammar InternalArguments;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.xtext.example.mydsl.services.ArgumentsGrammarAccess;

}

@parser::members {

 	private ArgumentsGrammarAccess grammarAccess;
 	
    public InternalArgumentsParser(TokenStream input, IAstFactory factory, ArgumentsGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/xtext/example/mydsl/parser/antlr/internal/InternalArguments.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Argument";	
   	}
   	
   	@Override
   	protected ArgumentsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArgumentRule(), currentNode); }
	 iv_ruleArgument=ruleArgument 
	 { $current=$iv_ruleArgument.current; } 
	 EOF 
;

// Rule Argument
ruleArgument returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'claim' 
    {
        createLeafNode(grammarAccess.getArgumentAccess().getClaimKeyword_0(), null); 
    }
(
(
		lv_cname_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getArgumentAccess().getCnameIDTerminalRuleCall_1_0(), "cname"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"cname",
	        		lv_cname_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_claimstr_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getArgumentAccess().getClaimstrSTRINGTerminalRuleCall_2_0(), "claimstr"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"claimstr",
	        		lv_claimstr_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'grounds' 
    {
        createLeafNode(grammarAccess.getArgumentAccess().getGroundsKeyword_3(), null); 
    }
(
(
		lv_gname_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getArgumentAccess().getGnameIDTerminalRuleCall_4_0(), "gname"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"gname",
	        		lv_gname_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getArgumentAccess().getLeftParenthesisKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArgumentAccess().getGroundstatementsGStatementParserRuleCall_6_0(), currentNode); 
	    }
		lv_groundstatements_6_0=rulegStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groundstatements",
	        		lv_groundstatements_6_0, 
	        		"gStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	')' 
    {
        createLeafNode(grammarAccess.getArgumentAccess().getRightParenthesisKeyword_7(), null); 
    }
	'warrants' 
    {
        createLeafNode(grammarAccess.getArgumentAccess().getWarrantsKeyword_8(), null); 
    }
(
(
		lv_wname_9_0=RULE_ID
		{
			createLeafNode(grammarAccess.getArgumentAccess().getWnameIDTerminalRuleCall_9_0(), "wname"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"wname",
	        		lv_wname_9_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getArgumentAccess().getLeftParenthesisKeyword_10(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArgumentAccess().getWarrantstatementsWStatementParserRuleCall_11_0(), currentNode); 
	    }
		lv_warrantstatements_11_0=rulewStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"warrantstatements",
	        		lv_warrantstatements_11_0, 
	        		"wStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	')' 
    {
        createLeafNode(grammarAccess.getArgumentAccess().getRightParenthesisKeyword_12(), null); 
    }
)
;







// Entry rule entryRulegStatement
entryRulegStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGStatementRule(), currentNode); }
	 iv_rulegStatement=rulegStatement 
	 { $current=$iv_rulegStatement.current; } 
	 EOF 
;

// Rule gStatement
rulegStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'statement' 
    {
        createLeafNode(grammarAccess.getGStatementAccess().getStatementKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getGStatementAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_groundstr_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getGStatementAccess().getGroundstrSTRINGTerminalRuleCall_2_0(), "groundstr"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"groundstr",
	        		lv_groundstr_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRulewStatement
entryRulewStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWStatementRule(), currentNode); }
	 iv_rulewStatement=rulewStatement 
	 { $current=$iv_rulewStatement.current; } 
	 EOF 
;

// Rule wStatement
rulewStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'statement' 
    {
        createLeafNode(grammarAccess.getWStatementAccess().getStatementKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getWStatementAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_groundstr_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getWStatementAccess().getGroundstrSTRINGTerminalRuleCall_2_0(), "groundstr"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"groundstr",
	        		lv_groundstr_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRulerStatement
entryRulerStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRStatementRule(), currentNode); }
	 iv_rulerStatement=rulerStatement 
	 { $current=$iv_rulerStatement.current; } 
	 EOF 
;

// Rule rStatement
rulerStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'statement' 
    {
        createLeafNode(grammarAccess.getRStatementAccess().getStatementKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRStatementAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_groundstr_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getRStatementAccess().getGroundstrSTRINGTerminalRuleCall_2_0(), "groundstr"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"groundstr",
	        		lv_groundstr_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


