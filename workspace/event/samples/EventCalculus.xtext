grammar uk.ac.open.event.EventCalculus with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate eventcalculus "http://www.ac.uk/open/EventCalculus"

Model:
	(imports+=Import)*
	(declarations+=Declaration | statements+=Statement)*;

Import:
	'load'
	importURI=STRING;

Declaration:
	DefSort | DefRange | DefOption | DefCompletion | DefNonInertia | DefXor | DefMutex;

DefSort:
	(reified='reified')? 'sort' name=ID (':' type=ID)?;

DefRange:
	'range' name=[DefSort] min=INT max=INT;

DefOption:
  	  'option' name=ID value=INT
	| 'option' name=ID value2=ID;

DefCompletion:
	'completion' 'Theta'? name=[Definition];

DefNonInertia:
	'noninertial' names+=[Definition] (',' names+=[Definition])*;

DefXor:
	'xor' names+=[Definition] (',' names+=[Definition])*;

DefMutex:
	'mutex' names+=[Definition] (',' names+=[Definition])*;

Statement:
	SortDefinition | Expression '.';

SortDefinition:
	sort=[DefSort] definitions+=Definition (',' definitions+=Definition)*;
	
Definition:
	name=ID ('(' (args+=DeclaredParameter)? (',' args+=DeclaredParameter)* ')')? (':' return+=DeclaredParameter)?;
	
DeclaredParameter:
	name=[DefSort] | name=[Definition];

Expression:
	(label=ID ':')? (qualifiers+=Qualifier)* expr=AssignmentOp;

Qualifier: Exists | Forall;

Exists: "{" names+=DeclaredParameter ("," names+=DeclaredParameter)* "}";

Forall: "[" names+=DeclaredParameter ("," names+=DeclaredParameter)* "]";

AssignmentOp returns Expression:
	OrExp (({AssignPlus.left=current} '->' | {AssignMin.left=current} '<->') (qualifiers+=Qualifier)* right=OrExp)?;

OrExp returns Expression:
	AndExp ({Or.left=current} '|' (qualifiers+=Qualifier)* right=AndExp)*;

AndExp returns Expression:
	Relational ({And.left=current} '&' (qualifiers+=Qualifier)* right=Relational)*;

Relational returns Expression:
	Addition (({RelNotEq.left=current} '!=' | {RelEqEq.left=current} '==' | {RelLtEq.left=current} '>=' |
	{RelGtEq.left=current} '<=' |
	{RelEq.left=current} '=' | {RelLt.left=current} '<' | {RelGt.left=current} '>') right=Addition)?;

Addition returns Expression:
	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;

Multiplication returns Expression:
	Power (({Multi.left=current} '*' | {Div.left=current} '/') right=Power)*;

Power returns Expression:
	UnaryExpr (({Pow.left=current} '^') right=UnaryExpr)*;

UnaryExpr returns Expression:
	(op=UnarOp)? (qualifiers+=Qualifier)* right=PrePrimaryExpr;

enum UnarOp:
	NOT='!';

PrePrimaryExpr returns Expression:
	TerminalExpression | AbstractRef | '(' Expression ')';

AbstractRef returns Expression:
	DeclaredParameter
		(
			({FunctionRef.func=current} ('(' (args+=Expression)? (',' args+=Expression)*')') ) 
		)?;

TerminalExpression:
	{IntLiteral} value=INT 
	| {StringLiteral} value=STRING |
	{BooleanLiteral} value=BOOLEAN;

	// -----
FQN:
	ID ('.' ID)*;

terminal INT returns ecore::EInt:
	'0' | '-'? ('1'..'9' ('0'..'9')*);

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false';

terminal ID:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | '\\') | !('\\' | '"'))* '"' | "'" ('\\' ('b' | 't' | 'n' | 'f' |
	'r' | 'u' | "'" | '\\') | !('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	';' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
	.;