/*
* generated by Xtext
*/
package uk.ac.open.event.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import uk.ac.open.event.services.EventCalculusGrammarAccess;

import com.google.inject.Inject;

public class EventCalculusParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private EventCalculusGrammarAccess grammarAccess;
		
	public EventCalculusGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Knowledge_Group(this, this, 0, inst);
			case 1: return new Rule_Group(this, this, 1, inst);
			case 2: return new VarDecl_Group(this, this, 2, inst);
			case 3: return new IntTerm_Alternatives(this, this, 3, inst);
			case 4: return new IntExpr_Alternatives(this, this, 4, inst);
			case 5: return new BinaryIntExpr_Group(this, this, 5, inst);
			case 6: return new TemporalPredicate_Alternatives(this, this, 6, inst);
			case 7: return new BoolExpr_Alternatives(this, this, 7, inst);
			case 8: return new UnaryBoolExpr_Alternatives(this, this, 8, inst);
			case 9: return new BinaryBoolExpr_Group(this, this, 9, inst);
			case 10: return new Entity_Alternatives(this, this, 10, inst);
			case 11: return new Sort_Group(this, this, 11, inst);
			case 12: return new Import_Group(this, this, 12, inst);
			case 13: return new Var_Group(this, this, 13, inst);
			case 14: return new Fluent_Group(this, this, 14, inst);
			case 15: return new Event_Group(this, this, 15, inst);
			case 16: return new Term_Group(this, this, 16, inst);
			case 17: return new HoldsAt_Group(this, this, 17, inst);
			case 18: return new Happens_Group(this, this, 18, inst);
			case 19: return new Initiates_Group(this, this, 19, inst);
			case 20: return new Terminates_Group(this, this, 20, inst);
			case 21: return new Path_Group(this, this, 21, inst);
			case 22: return new File_Group(this, this, 22, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Knowledge ****************
 *
 * Knowledge:
 *   imports+=Import* entities+=Entity* (rules+=Rule ".")* vars+=Var*;
 *
 **/

// imports+=Import* entities+=Entity* (rules+=Rule ".")* vars+=Var*
protected class Knowledge_Group extends GroupToken {
	
	public Knowledge_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Knowledge_VarsAssignment_3(parent, this, 0, inst);
			case 1: return new Knowledge_Group_2(parent, this, 1, inst);
			case 2: return new Knowledge_EntitiesAssignment_1(parent, this, 2, inst);
			case 3: return new Knowledge_ImportsAssignment_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getKnowledgeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=Import*
protected class Knowledge_ImportsAssignment_0 extends AssignmentToken  {
	
	public Knowledge_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getImportsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getKnowledgeAccess().getImportsImportParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Knowledge_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// entities+=Entity*
protected class Knowledge_EntitiesAssignment_1 extends AssignmentToken  {
	
	public Knowledge_EntitiesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getEntitiesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entity_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entities",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEntityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getKnowledgeAccess().getEntitiesEntityParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Knowledge_EntitiesAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Knowledge_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// (rules+=Rule ".")*
protected class Knowledge_Group_2 extends GroupToken {
	
	public Knowledge_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Knowledge_FullStopKeyword_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// rules+=Rule
protected class Knowledge_RulesAssignment_2_0 extends AssignmentToken  {
	
	public Knowledge_RulesAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getRulesAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rules",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getKnowledgeAccess().getRulesRuleParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Knowledge_Group_2(parent, next, actIndex, consumed);
			case 1: return new Knowledge_EntitiesAssignment_1(parent, next, actIndex, consumed);
			case 2: return new Knowledge_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 3, consumed);
		}	
	}	
}

// "."
protected class Knowledge_FullStopKeyword_2_1 extends KeywordToken  {
	
	public Knowledge_FullStopKeyword_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getFullStopKeyword_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Knowledge_RulesAssignment_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// vars+=Var*
protected class Knowledge_VarsAssignment_3 extends AssignmentToken  {
	
	public Knowledge_VarsAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getVarsAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Var_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("vars",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("vars");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getKnowledgeAccess().getVarsVarParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Knowledge_VarsAssignment_3(parent, next, actIndex, consumed);
			case 1: return new Knowledge_Group_2(parent, next, actIndex, consumed);
			case 2: return new Knowledge_EntitiesAssignment_1(parent, next, actIndex, consumed);
			case 3: return new Knowledge_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 4, consumed);
		}	
	}	
}


/************ end Rule Knowledge ****************/


/************ begin Rule Rule ****************
 *
 * Rule:
 *   decl=VarDecl? expr=BoolExpr;
 *
 **/

// decl=VarDecl? expr=BoolExpr
protected class Rule_Group extends GroupToken {
	
	public Rule_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRuleAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_ExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// decl=VarDecl?
protected class Rule_DeclAssignment_0 extends AssignmentToken  {
	
	public Rule_DeclAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleAccess().getDeclAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("decl",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("decl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRuleAccess().getDeclVarDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// expr=BoolExpr
protected class Rule_ExprAssignment_1 extends AssignmentToken  {
	
	public Rule_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleAccess().getExprAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBoolExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRuleAccess().getExprBoolExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Rule_DeclAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule Rule ****************/


/************ begin Rule VarDecl ****************
 *
 * VarDecl:
 *   "[" vars+=[Var] ("," vars+=[Var])* "]";
 *
 **/

// "[" vars+=[Var] ("," vars+=[Var])* "]"
protected class VarDecl_Group extends GroupToken {
	
	public VarDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_RightSquareBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVarDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "["
protected class VarDecl_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public VarDecl_LeftSquareBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getLeftSquareBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// vars+=[Var]
protected class VarDecl_VarsAssignment_1 extends AssignmentToken  {
	
	public VarDecl_VarsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getVarsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_LeftSquareBracketKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("vars",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("vars");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarDeclAccess().getVarsVarCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getVarDeclAccess().getVarsVarCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("," vars+=[Var])*
protected class VarDecl_Group_2 extends GroupToken {
	
	public VarDecl_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_VarsAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class VarDecl_CommaKeyword_2_0 extends KeywordToken  {
	
	public VarDecl_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getCommaKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_Group_2(parent, this, 0, inst);
			case 1: return new VarDecl_VarsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// vars+=[Var]
protected class VarDecl_VarsAssignment_2_1 extends AssignmentToken  {
	
	public VarDecl_VarsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getVarsAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_CommaKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("vars",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("vars");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarDeclAccess().getVarsVarCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getVarDeclAccess().getVarsVarCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "]"
protected class VarDecl_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public VarDecl_RightSquareBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getRightSquareBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_Group_2(parent, this, 0, inst);
			case 1: return new VarDecl_VarsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule VarDecl ****************/


/************ begin Rule IntTerm ****************
 *
 * IntTerm:
 *   const=INT|var=[Var]; 
 * 
 *           
 * //IntExpr: IntTerm;
 *
 **/

// const=INT|var=[Var] 
// 
//           
// //IntExpr: IntTerm;
protected class IntTerm_Alternatives extends AlternativesToken {

	public IntTerm_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getIntTermAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntTerm_ConstAssignment_0(parent, this, 0, inst);
			case 1: return new IntTerm_VarAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntTermRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// const=INT
protected class IntTerm_ConstAssignment_0 extends AssignmentToken  {
	
	public IntTerm_ConstAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntTermAccess().getConstAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("const",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("const");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getIntTermAccess().getConstINTTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// var=[Var]
protected class IntTerm_VarAssignment_1 extends AssignmentToken  {
	
	public IntTerm_VarAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntTermAccess().getVarAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("var",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("var");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntTermAccess().getVarVarCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getIntTermAccess().getVarVarCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule IntTerm ****************/


/************ begin Rule IntExpr ****************
 *
 * IntExpr:
 *   IntTerm|BinaryIntExpr;     
 * //IntExpr: IntTerm;
 *       
 * //IntExpr: IntTerm | UnaryIntExpr | BinaryIntExpr;
 * //UnaryIntExpr: (unaryop_lhs=UnaryIntOp)? opr+=IntTerm (unaryop_rhs=UnaryIntOp)?;
 * //BinaryIntExpr: opr+=IntTerm binaryop=BinaryIntOp opr+=IntExpr;
 *
 **/

// IntTerm|BinaryIntExpr     
// //IntExpr: IntTerm;
//       
// //IntExpr: IntTerm | UnaryIntExpr | BinaryIntExpr;
// //UnaryIntExpr: (unaryop_lhs=UnaryIntOp)? opr+=IntTerm (unaryop_rhs=UnaryIntOp)?;
// //BinaryIntExpr: opr+=IntTerm binaryop=BinaryIntOp opr+=IntExpr;
protected class IntExpr_Alternatives extends AlternativesToken {

	public IntExpr_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getIntExprAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntExpr_IntTermParserRuleCall_0(parent, this, 0, inst);
			case 1: return new IntExpr_BinaryIntExprParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// IntTerm
protected class IntExpr_IntTermParserRuleCall_0 extends RuleCallToken {
	
	public IntExpr_IntTermParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIntExprAccess().getIntTermParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntTerm_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IntTerm_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntTermRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BinaryIntExpr
protected class IntExpr_BinaryIntExprParserRuleCall_1 extends RuleCallToken {
	
	public IntExpr_BinaryIntExprParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIntExprAccess().getBinaryIntExprParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BinaryIntExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BinaryIntExpr_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBinaryIntExprRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule IntExpr ****************/


/************ begin Rule BinaryIntExpr ****************
 *
 * BinaryIntExpr:
 *   opr+=IntTerm binaryop=BinaryIntOp opr+=IntTerm; 
 * //IntExpr: IntTerm | UnaryIntExpr | BinaryIntExpr;
 * //UnaryIntExpr: (unaryop_lhs=UnaryIntOp)? opr+=IntTerm (unaryop_rhs=UnaryIntOp)?;
 * //BinaryIntExpr: opr+=IntTerm binaryop=BinaryIntOp opr+=IntExpr;
 *       
 * //enum UnaryIntOp: MINUS="-" | LPAREN="(" | RPAREN=")";
 *
 **/

// opr+=IntTerm binaryop=BinaryIntOp opr+=IntTerm
protected class BinaryIntExpr_Group extends GroupToken {
	
	public BinaryIntExpr_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBinaryIntExprAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BinaryIntExpr_OprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBinaryIntExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// opr+=IntTerm
protected class BinaryIntExpr_OprAssignment_0 extends AssignmentToken  {
	
	public BinaryIntExpr_OprAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryIntExprAccess().getOprAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntTerm_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBinaryIntExprAccess().getOprIntTermParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// binaryop=BinaryIntOp
protected class BinaryIntExpr_BinaryopAssignment_1 extends AssignmentToken  {
	
	public BinaryIntExpr_BinaryopAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryIntExprAccess().getBinaryopAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BinaryIntExpr_OprAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("binaryop",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("binaryop");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getBinaryIntExprAccess().getBinaryopBinaryIntOpEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// opr+=IntTerm
protected class BinaryIntExpr_OprAssignment_2 extends AssignmentToken  {
	
	public BinaryIntExpr_OprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryIntExprAccess().getOprAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntTerm_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBinaryIntExprAccess().getOprIntTermParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BinaryIntExpr_BinaryopAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule BinaryIntExpr ****************/


/************ begin Rule TemporalPredicate ****************
 *
 * TemporalPredicate:
 *   HoldsAt|Happens|Initiates|Terminates;
 *
 **/

// HoldsAt|Happens|Initiates|Terminates
protected class TemporalPredicate_Alternatives extends AlternativesToken {

	public TemporalPredicate_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTemporalPredicateAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemporalPredicate_HoldsAtParserRuleCall_0(parent, this, 0, inst);
			case 1: return new TemporalPredicate_HappensParserRuleCall_1(parent, this, 1, inst);
			case 2: return new TemporalPredicate_InitiatesParserRuleCall_2(parent, this, 2, inst);
			case 3: return new TemporalPredicate_TerminatesParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTemporalPredicateRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// HoldsAt
protected class TemporalPredicate_HoldsAtParserRuleCall_0 extends RuleCallToken {
	
	public TemporalPredicate_HoldsAtParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemporalPredicateAccess().getHoldsAtParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HoldsAt_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(HoldsAt_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getHoldsAtRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Happens
protected class TemporalPredicate_HappensParserRuleCall_1 extends RuleCallToken {
	
	public TemporalPredicate_HappensParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemporalPredicateAccess().getHappensParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Happens_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Happens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getHappensRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Initiates
protected class TemporalPredicate_InitiatesParserRuleCall_2 extends RuleCallToken {
	
	public TemporalPredicate_InitiatesParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemporalPredicateAccess().getInitiatesParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initiates_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Initiates_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInitiatesRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Terminates
protected class TemporalPredicate_TerminatesParserRuleCall_3 extends RuleCallToken {
	
	public TemporalPredicate_TerminatesParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemporalPredicateAccess().getTerminatesParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Terminates_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Terminates_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTerminatesRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TemporalPredicate ****************/


/************ begin Rule BoolExpr ****************
 *
 * BoolExpr:
 *   TemporalPredicate|UnaryBoolExpr|BinaryBoolExpr;
 *
 **/

// TemporalPredicate|UnaryBoolExpr|BinaryBoolExpr
protected class BoolExpr_Alternatives extends AlternativesToken {

	public BoolExpr_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getBoolExprAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolExpr_TemporalPredicateParserRuleCall_0(parent, this, 0, inst);
			case 1: return new BoolExpr_UnaryBoolExprParserRuleCall_1(parent, this, 1, inst);
			case 2: return new BoolExpr_BinaryBoolExprParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBoolExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// TemporalPredicate
protected class BoolExpr_TemporalPredicateParserRuleCall_0 extends RuleCallToken {
	
	public BoolExpr_TemporalPredicateParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBoolExprAccess().getTemporalPredicateParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemporalPredicate_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TemporalPredicate_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTemporalPredicateRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UnaryBoolExpr
protected class BoolExpr_UnaryBoolExprParserRuleCall_1 extends RuleCallToken {
	
	public BoolExpr_UnaryBoolExprParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBoolExprAccess().getUnaryBoolExprParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryBoolExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnaryBoolExpr_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnaryBoolExprRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BinaryBoolExpr
protected class BoolExpr_BinaryBoolExprParserRuleCall_2 extends RuleCallToken {
	
	public BoolExpr_BinaryBoolExprParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBoolExprAccess().getBinaryBoolExprParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BinaryBoolExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BinaryBoolExpr_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBinaryBoolExprRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule BoolExpr ****************/


/************ begin Rule UnaryBoolExpr ****************
 *
 * UnaryBoolExpr:
 *   unaryop_lhs=UnaryBoolOp opr+=BoolExpr|"(" ops+=BoolExpr ")";
 *
 **/

// unaryop_lhs=UnaryBoolOp opr+=BoolExpr|"(" ops+=BoolExpr ")"
protected class UnaryBoolExpr_Alternatives extends AlternativesToken {

	public UnaryBoolExpr_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryBoolExpr_Group_0(parent, this, 0, inst);
			case 1: return new UnaryBoolExpr_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnaryBoolExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// unaryop_lhs=UnaryBoolOp opr+=BoolExpr
protected class UnaryBoolExpr_Group_0 extends GroupToken {
	
	public UnaryBoolExpr_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryBoolExpr_OprAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// unaryop_lhs=UnaryBoolOp
protected class UnaryBoolExpr_Unaryop_lhsAssignment_0_0 extends AssignmentToken  {
	
	public UnaryBoolExpr_Unaryop_lhsAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getUnaryop_lhsAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unaryop_lhs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unaryop_lhs");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getUnaryBoolExprAccess().getUnaryop_lhsUnaryBoolOpEnumRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// opr+=BoolExpr
protected class UnaryBoolExpr_OprAssignment_0_1 extends AssignmentToken  {
	
	public UnaryBoolExpr_OprAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getOprAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBoolExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnaryBoolExprAccess().getOprBoolExprParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnaryBoolExpr_Unaryop_lhsAssignment_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "(" ops+=BoolExpr ")"
protected class UnaryBoolExpr_Group_1 extends GroupToken {
	
	public UnaryBoolExpr_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryBoolExpr_RightParenthesisKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class UnaryBoolExpr_LeftParenthesisKeyword_1_0 extends KeywordToken  {
	
	public UnaryBoolExpr_LeftParenthesisKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getLeftParenthesisKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ops+=BoolExpr
protected class UnaryBoolExpr_OpsAssignment_1_1 extends AssignmentToken  {
	
	public UnaryBoolExpr_OpsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getOpsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ops",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ops");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBoolExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnaryBoolExprAccess().getOpsBoolExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnaryBoolExpr_LeftParenthesisKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class UnaryBoolExpr_RightParenthesisKeyword_1_2 extends KeywordToken  {
	
	public UnaryBoolExpr_RightParenthesisKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getRightParenthesisKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryBoolExpr_OpsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule UnaryBoolExpr ****************/


/************ begin Rule BinaryBoolExpr ****************
 *
 * BinaryBoolExpr:
 *   opr+=TemporalPredicate binaryop=BinaryBoolOp opr+=BoolExpr;      
 *       
 * //BinaryBoolExpr: opr+=BoolExpr binaryop=BinaryBoolOp opr+=BoolExpr;
 *
 **/

// opr+=TemporalPredicate binaryop=BinaryBoolOp opr+=BoolExpr
protected class BinaryBoolExpr_Group extends GroupToken {
	
	public BinaryBoolExpr_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBinaryBoolExprAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BinaryBoolExpr_OprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBinaryBoolExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// opr+=TemporalPredicate
protected class BinaryBoolExpr_OprAssignment_0 extends AssignmentToken  {
	
	public BinaryBoolExpr_OprAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryBoolExprAccess().getOprAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemporalPredicate_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTemporalPredicateRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBinaryBoolExprAccess().getOprTemporalPredicateParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// binaryop=BinaryBoolOp
protected class BinaryBoolExpr_BinaryopAssignment_1 extends AssignmentToken  {
	
	public BinaryBoolExpr_BinaryopAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryBoolExprAccess().getBinaryopAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BinaryBoolExpr_OprAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("binaryop",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("binaryop");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getBinaryBoolExprAccess().getBinaryopBinaryBoolOpEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// opr+=BoolExpr
protected class BinaryBoolExpr_OprAssignment_2 extends AssignmentToken  {
	
	public BinaryBoolExpr_OprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryBoolExprAccess().getOprAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBoolExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBinaryBoolExprAccess().getOprBoolExprParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BinaryBoolExpr_BinaryopAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule BinaryBoolExpr ****************/


/************ begin Rule Entity ****************
 *
 * Entity:
 *   Fluent|Event|Sort;
 *
 **/

// Fluent|Event|Sort
protected class Entity_Alternatives extends AlternativesToken {

	public Entity_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getEntityAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entity_FluentParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Entity_EventParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Entity_SortParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEntityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Fluent
protected class Entity_FluentParserRuleCall_0 extends RuleCallToken {
	
	public Entity_FluentParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityAccess().getFluentParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Fluent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Fluent_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFluentRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Event
protected class Entity_EventParserRuleCall_1 extends RuleCallToken {
	
	public Entity_EventParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityAccess().getEventParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Event_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Event_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getEventRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Sort
protected class Entity_SortParserRuleCall_2 extends RuleCallToken {
	
	public Entity_SortParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityAccess().getSortParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sort_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Sort_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Entity ****************/


/************ begin Rule Sort ****************
 *
 * Sort:
 *   "sort" name=ID;
 *
 **/

// "sort" name=ID
protected class Sort_Group extends GroupToken {
	
	public Sort_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSortAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sort_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "sort"
protected class Sort_SortKeyword_0 extends KeywordToken  {
	
	public Sort_SortKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSortAccess().getSortKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Sort_NameAssignment_1 extends AssignmentToken  {
	
	public Sort_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSortAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sort_SortKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSortAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Sort ****************/


/************ begin Rule Import ****************
 *
 * Import:
 *   "load" path=Path;
 *
 **/

// "load" path=Path
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_PathAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "load"
protected class Import_LoadKeyword_0 extends KeywordToken  {
	
	public Import_LoadKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getLoadKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// path=Path
protected class Import_PathAssignment_1 extends AssignmentToken  {
	
	public Import_PathAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getPathAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Path_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("path",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("path");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getImportAccess().getPathPathParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Import_LoadKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Import ****************/


/************ begin Rule Var ****************
 *
 * Var:
 *   "range" name=ID min=INT max=INT;
 *
 **/

// "range" name=ID min=INT max=INT
protected class Var_Group extends GroupToken {
	
	public Var_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Var_MaxAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVarRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "range"
protected class Var_RangeKeyword_0 extends KeywordToken  {
	
	public Var_RangeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarAccess().getRangeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Var_NameAssignment_1 extends AssignmentToken  {
	
	public Var_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Var_RangeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVarAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// min=INT
protected class Var_MinAssignment_2 extends AssignmentToken  {
	
	public Var_MinAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarAccess().getMinAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Var_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("min",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("min");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVarAccess().getMinINTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// max=INT
protected class Var_MaxAssignment_3 extends AssignmentToken  {
	
	public Var_MaxAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarAccess().getMaxAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Var_MinAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("max",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("max");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVarAccess().getMaxINTTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Var ****************/


/************ begin Rule Fluent ****************
 *
 * Fluent:
 *   "fluent" term=Term;
 *
 **/

// "fluent" term=Term
protected class Fluent_Group extends GroupToken {
	
	public Fluent_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFluentAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Fluent_TermAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFluentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "fluent"
protected class Fluent_FluentKeyword_0 extends KeywordToken  {
	
	public Fluent_FluentKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFluentAccess().getFluentKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// term=Term
protected class Fluent_TermAssignment_1 extends AssignmentToken  {
	
	public Fluent_TermAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFluentAccess().getTermAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("term",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("term");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFluentAccess().getTermTermParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Fluent_FluentKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Fluent ****************/


/************ begin Rule Event ****************
 *
 * Event:
 *   "event" term=Term;
 *
 **/

// "event" term=Term
protected class Event_Group extends GroupToken {
	
	public Event_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEventAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Event_TermAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEventRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "event"
protected class Event_EventKeyword_0 extends KeywordToken  {
	
	public Event_EventKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEventAccess().getEventKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// term=Term
protected class Event_TermAssignment_1 extends AssignmentToken  {
	
	public Event_TermAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEventAccess().getTermAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("term",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("term");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEventAccess().getTermTermParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Event_EventKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Event ****************/


/************ begin Rule Term ****************
 *
 * Term:
 *   name=ID ("(" args+=ID? ("," args+=ID)* ")")?;
 *
 **/

// name=ID ("(" args+=ID? ("," args+=ID)* ")")?
protected class Term_Group extends GroupToken {
	
	public Term_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTermAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group_1(parent, this, 0, inst);
			case 1: return new Term_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class Term_NameAssignment_0 extends AssignmentToken  {
	
	public Term_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTermAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTermAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("(" args+=ID? ("," args+=ID)* ")")?
protected class Term_Group_1 extends GroupToken {
	
	public Term_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTermAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_RightParenthesisKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Term_LeftParenthesisKeyword_1_0 extends KeywordToken  {
	
	public Term_LeftParenthesisKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTermAccess().getLeftParenthesisKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// args+=ID?
protected class Term_ArgsAssignment_1_1 extends AssignmentToken  {
	
	public Term_ArgsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTermAccess().getArgsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_LeftParenthesisKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("args",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("args");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTermAccess().getArgsIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// ("," args+=ID)*
protected class Term_Group_1_2 extends GroupToken {
	
	public Term_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTermAccess().getGroup_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_ArgsAssignment_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Term_CommaKeyword_1_2_0 extends KeywordToken  {
	
	public Term_CommaKeyword_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTermAccess().getCommaKeyword_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group_1_2(parent, this, 0, inst);
			case 1: return new Term_ArgsAssignment_1_1(parent, this, 1, inst);
			case 2: return new Term_LeftParenthesisKeyword_1_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// args+=ID
protected class Term_ArgsAssignment_1_2_1 extends AssignmentToken  {
	
	public Term_ArgsAssignment_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTermAccess().getArgsAssignment_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_CommaKeyword_1_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("args",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("args");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTermAccess().getArgsIDTerminalRuleCall_1_2_1_0();
			return obj;
		}
		return null;
	}

}


// ")"
protected class Term_RightParenthesisKeyword_1_3 extends KeywordToken  {
	
	public Term_RightParenthesisKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTermAccess().getRightParenthesisKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group_1_2(parent, this, 0, inst);
			case 1: return new Term_ArgsAssignment_1_1(parent, this, 1, inst);
			case 2: return new Term_LeftParenthesisKeyword_1_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Term ****************/


/************ begin Rule HoldsAt ****************
 *
 * HoldsAt:
 *   "HoldsAt" "(" fluent=Term "," time=IntExpr ")";
 *
 **/

// "HoldsAt" "(" fluent=Term "," time=IntExpr ")"
protected class HoldsAt_Group extends GroupToken {
	
	public HoldsAt_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HoldsAt_RightParenthesisKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getHoldsAtRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "HoldsAt"
protected class HoldsAt_HoldsAtKeyword_0 extends KeywordToken  {
	
	public HoldsAt_HoldsAtKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getHoldsAtKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class HoldsAt_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public HoldsAt_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HoldsAt_HoldsAtKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// fluent=Term
protected class HoldsAt_FluentAssignment_2 extends AssignmentToken  {
	
	public HoldsAt_FluentAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getFluentAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fluent",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fluent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getHoldsAtAccess().getFluentTermParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HoldsAt_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class HoldsAt_CommaKeyword_3 extends KeywordToken  {
	
	public HoldsAt_CommaKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getCommaKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HoldsAt_FluentAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// time=IntExpr
protected class HoldsAt_TimeAssignment_4 extends AssignmentToken  {
	
	public HoldsAt_TimeAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getTimeAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("time",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("time");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getHoldsAtAccess().getTimeIntExprParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HoldsAt_CommaKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class HoldsAt_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public HoldsAt_RightParenthesisKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getRightParenthesisKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HoldsAt_TimeAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule HoldsAt ****************/


/************ begin Rule Happens ****************
 *
 * Happens:
 *   "Happens" "(" event=Term "," time=IntExpr ")";
 *
 **/

// "Happens" "(" event=Term "," time=IntExpr ")"
protected class Happens_Group extends GroupToken {
	
	public Happens_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getHappensAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Happens_RightParenthesisKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getHappensRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "Happens"
protected class Happens_HappensKeyword_0 extends KeywordToken  {
	
	public Happens_HappensKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHappensAccess().getHappensKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class Happens_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Happens_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHappensAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Happens_HappensKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// event=Term
protected class Happens_EventAssignment_2 extends AssignmentToken  {
	
	public Happens_EventAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHappensAccess().getEventAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("event",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("event");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getHappensAccess().getEventTermParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Happens_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class Happens_CommaKeyword_3 extends KeywordToken  {
	
	public Happens_CommaKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHappensAccess().getCommaKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Happens_EventAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// time=IntExpr
protected class Happens_TimeAssignment_4 extends AssignmentToken  {
	
	public Happens_TimeAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHappensAccess().getTimeAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("time",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("time");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getHappensAccess().getTimeIntExprParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Happens_CommaKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Happens_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public Happens_RightParenthesisKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHappensAccess().getRightParenthesisKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Happens_TimeAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Happens ****************/


/************ begin Rule Initiates ****************
 *
 * Initiates:
 *   "Initiates" "(" event=Term "," fluent=Term "," time=IntExpr ")";
 *
 **/

// "Initiates" "(" event=Term "," fluent=Term "," time=IntExpr ")"
protected class Initiates_Group extends GroupToken {
	
	public Initiates_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initiates_RightParenthesisKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInitiatesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "Initiates"
protected class Initiates_InitiatesKeyword_0 extends KeywordToken  {
	
	public Initiates_InitiatesKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getInitiatesKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class Initiates_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Initiates_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initiates_InitiatesKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// event=Term
protected class Initiates_EventAssignment_2 extends AssignmentToken  {
	
	public Initiates_EventAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getEventAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("event",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("event");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInitiatesAccess().getEventTermParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Initiates_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class Initiates_CommaKeyword_3 extends KeywordToken  {
	
	public Initiates_CommaKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getCommaKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initiates_EventAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// fluent=Term
protected class Initiates_FluentAssignment_4 extends AssignmentToken  {
	
	public Initiates_FluentAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getFluentAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fluent",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fluent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInitiatesAccess().getFluentTermParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Initiates_CommaKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class Initiates_CommaKeyword_5 extends KeywordToken  {
	
	public Initiates_CommaKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getCommaKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initiates_FluentAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// time=IntExpr
protected class Initiates_TimeAssignment_6 extends AssignmentToken  {
	
	public Initiates_TimeAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getTimeAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("time",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("time");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInitiatesAccess().getTimeIntExprParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Initiates_CommaKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Initiates_RightParenthesisKeyword_7 extends KeywordToken  {
	
	public Initiates_RightParenthesisKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getRightParenthesisKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initiates_TimeAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Initiates ****************/


/************ begin Rule Terminates ****************
 *
 * Terminates:
 *   "Terminates" "(" event=Term "," fluent=Term "," time=IntExpr ")";
 *
 **/

// "Terminates" "(" event=Term "," fluent=Term "," time=IntExpr ")"
protected class Terminates_Group extends GroupToken {
	
	public Terminates_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Terminates_RightParenthesisKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTerminatesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "Terminates"
protected class Terminates_TerminatesKeyword_0 extends KeywordToken  {
	
	public Terminates_TerminatesKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getTerminatesKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class Terminates_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Terminates_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Terminates_TerminatesKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// event=Term
protected class Terminates_EventAssignment_2 extends AssignmentToken  {
	
	public Terminates_EventAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getEventAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("event",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("event");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTerminatesAccess().getEventTermParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Terminates_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class Terminates_CommaKeyword_3 extends KeywordToken  {
	
	public Terminates_CommaKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getCommaKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Terminates_EventAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// fluent=Term
protected class Terminates_FluentAssignment_4 extends AssignmentToken  {
	
	public Terminates_FluentAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getFluentAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fluent",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fluent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTerminatesAccess().getFluentTermParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Terminates_CommaKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class Terminates_CommaKeyword_5 extends KeywordToken  {
	
	public Terminates_CommaKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getCommaKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Terminates_FluentAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// time=IntExpr
protected class Terminates_TimeAssignment_6 extends AssignmentToken  {
	
	public Terminates_TimeAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getTimeAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("time",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("time");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTerminatesAccess().getTimeIntExprParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Terminates_CommaKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Terminates_RightParenthesisKeyword_7 extends KeywordToken  {
	
	public Terminates_RightParenthesisKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getRightParenthesisKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Terminates_TimeAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Terminates ****************/


/************ begin Rule Path ****************
 *
 * Path:
 *   file=File ("/" file=File)*;
 *
 **/

// file=File ("/" file=File)*
protected class Path_Group extends GroupToken {
	
	public Path_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Path_Group_1(parent, this, 0, inst);
			case 1: return new Path_FileAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPathRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// file=File
protected class Path_FileAssignment_0 extends AssignmentToken  {
	
	public Path_FileAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathAccess().getFileAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new File_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("file",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("file");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFileRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathAccess().getFileFileParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("/" file=File)*
protected class Path_Group_1 extends GroupToken {
	
	public Path_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Path_FileAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class Path_SolidusKeyword_1_0 extends KeywordToken  {
	
	public Path_SolidusKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathAccess().getSolidusKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Path_Group_1(parent, this, 0, inst);
			case 1: return new Path_FileAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// file=File
protected class Path_FileAssignment_1_1 extends AssignmentToken  {
	
	public Path_FileAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathAccess().getFileAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new File_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("file",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("file");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFileRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathAccess().getFileFileParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Path_SolidusKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Path ****************/


/************ begin Rule File ****************
 *
 * File:
 *   name=ID ("." name=ID)*;
 *
 **/

// name=ID ("." name=ID)*
protected class File_Group extends GroupToken {
	
	public File_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFileAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new File_Group_1(parent, this, 0, inst);
			case 1: return new File_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFileRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class File_NameAssignment_0 extends AssignmentToken  {
	
	public File_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFileAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFileAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("." name=ID)*
protected class File_Group_1 extends GroupToken {
	
	public File_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFileAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new File_NameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "."
protected class File_FullStopKeyword_1_0 extends KeywordToken  {
	
	public File_FullStopKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFileAccess().getFullStopKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new File_Group_1(parent, this, 0, inst);
			case 1: return new File_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class File_NameAssignment_1_1 extends AssignmentToken  {
	
	public File_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFileAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new File_FullStopKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFileAccess().getNameIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule File ****************/

}
