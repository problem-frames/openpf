/*
* generated by Xtext
*/
package uk.ac.open.event.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import uk.ac.open.event.services.EventCalculusGrammarAccess;

import com.google.inject.Inject;

public class EventCalculusParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private EventCalculusGrammarAccess grammarAccess;
		
	public EventCalculusGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Knowledge_Group(this, this, 0, inst);
			case 1: return new Rule_Group(this, this, 1, inst);
			case 2: return new VarDecl_Group(this, this, 2, inst);
			case 3: return new IntTerm_Alternatives(this, this, 3, inst);
			case 4: return new IntExpr_Alternatives(this, this, 4, inst);
			case 5: return new BinaryIntExpr_Group(this, this, 5, inst);
			case 6: return new TemporalPredicate_Alternatives(this, this, 6, inst);
			case 7: return new BoolExpr_Alternatives(this, this, 7, inst);
			case 8: return new UnaryBoolExpr_Alternatives(this, this, 8, inst);
			case 9: return new BinaryBoolExpr_Group(this, this, 9, inst);
			case 10: return new Entity_Alternatives(this, this, 10, inst);
			case 11: return new Sort_Group(this, this, 11, inst);
			case 12: return new Import_Group(this, this, 12, inst);
			case 13: return new Var_Group(this, this, 13, inst);
			case 14: return new Fluent_Group(this, this, 14, inst);
			case 15: return new Event_Group(this, this, 15, inst);
			case 16: return new Term_Group(this, this, 16, inst);
			case 17: return new HoldsAt_Group(this, this, 17, inst);
			case 18: return new Happens_Group(this, this, 18, inst);
			case 19: return new Initiates_Group(this, this, 19, inst);
			case 20: return new Terminates_Group(this, this, 20, inst);
			case 21: return new Path_Group(this, this, 21, inst);
			case 22: return new File_Group(this, this, 22, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Knowledge ****************
 *
 * Knowledge:
 *   imports+=Import* entities+=Entity* (rules+=Rule ".")* vars+=Var*;
 *
 **/

// imports+=Import* entities+=Entity* (rules+=Rule ".")* vars+=Var*
protected class Knowledge_Group extends GroupToken {
	
	public Knowledge_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Knowledge_VarsAssignment_3(parent, this, 0, inst);
			case 1: return new Knowledge_Group_2(parent, this, 1, inst);
			case 2: return new Knowledge_EntitiesAssignment_1(parent, this, 2, inst);
			case 3: return new Knowledge_ImportsAssignment_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getKnowledgeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=Import*
protected class Knowledge_ImportsAssignment_0 extends AssignmentToken  {
	
	public Knowledge_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getImportsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getKnowledgeAccess().getImportsImportParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Knowledge_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// entities+=Entity*
protected class Knowledge_EntitiesAssignment_1 extends AssignmentToken  {
	
	public Knowledge_EntitiesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getEntitiesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entity_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entities",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEntityRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getKnowledgeAccess().getEntitiesEntityParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Knowledge_EntitiesAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Knowledge_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// (rules+=Rule ".")*
protected class Knowledge_Group_2 extends GroupToken {
	
	public Knowledge_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Knowledge_FullStopKeyword_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// rules+=Rule
protected class Knowledge_RulesAssignment_2_0 extends AssignmentToken  {
	
	public Knowledge_RulesAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getRulesAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rules",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getKnowledgeAccess().getRulesRuleParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Knowledge_Group_2(parent, next, actIndex, consumed);
			case 1: return new Knowledge_EntitiesAssignment_1(parent, next, actIndex, consumed);
			case 2: return new Knowledge_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 3, consumed);
		}	
	}	
}

// "."
protected class Knowledge_FullStopKeyword_2_1 extends KeywordToken  {
	
	public Knowledge_FullStopKeyword_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getFullStopKeyword_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Knowledge_RulesAssignment_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// vars+=Var*
protected class Knowledge_VarsAssignment_3 extends AssignmentToken  {
	
	public Knowledge_VarsAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getKnowledgeAccess().getVarsAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Var_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("vars",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("vars");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getKnowledgeAccess().getVarsVarParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Knowledge_VarsAssignment_3(parent, next, actIndex, consumed);
			case 1: return new Knowledge_Group_2(parent, next, actIndex, consumed);
			case 2: return new Knowledge_EntitiesAssignment_1(parent, next, actIndex, consumed);
			case 3: return new Knowledge_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 4, consumed);
		}	
	}	
}


/************ end Rule Knowledge ****************/


/************ begin Rule Rule ****************
 *
 * Rule:
 *   decl=VarDecl? expr=BoolExpr;
 *
 **/

// decl=VarDecl? expr=BoolExpr
protected class Rule_Group extends GroupToken {
	
	public Rule_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRuleAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Rule_ExprAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRuleRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// decl=VarDecl?
protected class Rule_DeclAssignment_0 extends AssignmentToken  {
	
	public Rule_DeclAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleAccess().getDeclAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("decl",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("decl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRuleAccess().getDeclVarDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// expr=BoolExpr
protected class Rule_ExprAssignment_1 extends AssignmentToken  {
	
	public Rule_ExprAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleAccess().getExprAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBoolExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRuleAccess().getExprBoolExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Rule_DeclAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule Rule ****************/


/************ begin Rule VarDecl ****************
 *
 * VarDecl:
 *   "[" vars+=[Var] ("," vars+=[Var])* "]";
 *
 **/

// "[" vars+=[Var] ("," vars+=[Var])* "]"
protected class VarDecl_Group extends GroupToken {
	
	public VarDecl_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_RightSquareBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVarDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "["
protected class VarDecl_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public VarDecl_LeftSquareBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getLeftSquareBracketKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// vars+=[Var]
protected class VarDecl_VarsAssignment_1 extends AssignmentToken  {
	
	public VarDecl_VarsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getVarsAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_LeftSquareBracketKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("vars",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("vars");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarDeclAccess().getVarsVarCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getVarDeclAccess().getVarsVarCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("," vars+=[Var])*
protected class VarDecl_Group_2 extends GroupToken {
	
	public VarDecl_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_VarsAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class VarDecl_CommaKeyword_2_0 extends KeywordToken  {
	
	public VarDecl_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getCommaKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_Group_2(parent, this, 0, inst);
			case 1: return new VarDecl_VarsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// vars+=[Var]
protected class VarDecl_VarsAssignment_2_1 extends AssignmentToken  {
	
	public VarDecl_VarsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getVarsAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_CommaKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("vars",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("vars");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVarDeclAccess().getVarsVarCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getVarDeclAccess().getVarsVarCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "]"
protected class VarDecl_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public VarDecl_RightSquareBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarDeclAccess().getRightSquareBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VarDecl_Group_2(parent, this, 0, inst);
			case 1: return new VarDecl_VarsAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule VarDecl ****************/


/************ begin Rule IntTerm ****************
 *
 * IntTerm:
 *   const=INT|var=[Var]; 
 * 
 *           
 * //IntExpr: IntTerm;
 *
 **/

// const=INT|var=[Var] 
// 
//           
// //IntExpr: IntTerm;
protected class IntTerm_Alternatives extends AlternativesToken {

	public IntTerm_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getIntTermAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntTerm_ConstAssignment_0(parent, this, 0, inst);
			case 1: return new IntTerm_VarAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntTermRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// const=INT
protected class IntTerm_ConstAssignment_0 extends AssignmentToken  {
	
	public IntTerm_ConstAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntTermAccess().getConstAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("const",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("const");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getIntTermAccess().getConstINTTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// var=[Var]
protected class IntTerm_VarAssignment_1 extends AssignmentToken  {
	
	public IntTerm_VarAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntTermAccess().getVarAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("var",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("var");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntTermAccess().getVarVarCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getIntTermAccess().getVarVarCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule IntTerm ****************/


/************ begin Rule IntExpr ****************
 *
 * IntExpr:
 *   IntTerm|BinaryIntExpr;     
 * //IntExpr: IntTerm;
 *       
 * //IntExpr: IntTerm | UnaryIntExpr | BinaryIntExpr;
 * //UnaryIntExpr: (unaryop_lhs=UnaryIntOp)? opr+=IntTerm (unaryop_rhs=UnaryIntOp)?;
 * //BinaryIntExpr: opr+=IntTerm binaryop=BinaryIntOp opr+=IntExpr;
 *
 **/

// IntTerm|BinaryIntExpr     
// //IntExpr: IntTerm;
//       
// //IntExpr: IntTerm | UnaryIntExpr | BinaryIntExpr;
// //UnaryIntExpr: (unaryop_lhs=UnaryIntOp)? opr+=IntTerm (unaryop_rhs=UnaryIntOp)?;
// //BinaryIntExpr: opr+=IntTerm binaryop=BinaryIntOp opr+=IntExpr;
protected class IntExpr_Alternatives extends AlternativesToken {

	public IntExpr_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getIntExprAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntExpr_IntTermParserRuleCall_0(parent, this, 0, inst);
			case 1: return new IntExpr_BinaryIntExprParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// IntTerm
protected class IntExpr_IntTermParserRuleCall_0 extends RuleCallToken {
	
	public IntExpr_IntTermParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIntExprAccess().getIntTermParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntTerm_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IntTerm_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntTermRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BinaryIntExpr
protected class IntExpr_BinaryIntExprParserRuleCall_1 extends RuleCallToken {
	
	public IntExpr_BinaryIntExprParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIntExprAccess().getBinaryIntExprParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BinaryIntExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BinaryIntExpr_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBinaryIntExprRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule IntExpr ****************/


/************ begin Rule BinaryIntExpr ****************
 *
 * BinaryIntExpr:
 *   opr+=IntTerm binaryop=BinaryIntOp opr+=IntTerm; 
 * //IntExpr: IntTerm | UnaryIntExpr | BinaryIntExpr;
 * //UnaryIntExpr: (unaryop_lhs=UnaryIntOp)? opr+=IntTerm (unaryop_rhs=UnaryIntOp)?;
 * //BinaryIntExpr: opr+=IntTerm binaryop=BinaryIntOp opr+=IntExpr;
 *       
 * //enum UnaryIntOp: MINUS="-" | LPAREN="(" | RPAREN=")";
 *
 **/

// opr+=IntTerm binaryop=BinaryIntOp opr+=IntTerm
protected class BinaryIntExpr_Group extends GroupToken {
	
	public BinaryIntExpr_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBinaryIntExprAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BinaryIntExpr_OprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBinaryIntExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// opr+=IntTerm
protected class BinaryIntExpr_OprAssignment_0 extends AssignmentToken  {
	
	public BinaryIntExpr_OprAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryIntExprAccess().getOprAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntTerm_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBinaryIntExprAccess().getOprIntTermParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// binaryop=BinaryIntOp
protected class BinaryIntExpr_BinaryopAssignment_1 extends AssignmentToken  {
	
	public BinaryIntExpr_BinaryopAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryIntExprAccess().getBinaryopAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BinaryIntExpr_OprAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("binaryop",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("binaryop");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getBinaryIntExprAccess().getBinaryopBinaryIntOpEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// opr+=IntTerm
protected class BinaryIntExpr_OprAssignment_2 extends AssignmentToken  {
	
	public BinaryIntExpr_OprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryIntExprAccess().getOprAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntTerm_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBinaryIntExprAccess().getOprIntTermParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BinaryIntExpr_BinaryopAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule BinaryIntExpr ****************/


/************ begin Rule TemporalPredicate ****************
 *
 * TemporalPredicate:
 *   HoldsAt|Happens|Initiates|Terminates;
 *
 **/

// HoldsAt|Happens|Initiates|Terminates
protected class TemporalPredicate_Alternatives extends AlternativesToken {

	public TemporalPredicate_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTemporalPredicateAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemporalPredicate_HoldsAtParserRuleCall_0(parent, this, 0, inst);
			case 1: return new TemporalPredicate_HappensParserRuleCall_1(parent, this, 1, inst);
			case 2: return new TemporalPredicate_InitiatesParserRuleCall_2(parent, this, 2, inst);
			case 3: return new TemporalPredicate_TerminatesParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTemporalPredicateRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// HoldsAt
protected class TemporalPredicate_HoldsAtParserRuleCall_0 extends RuleCallToken {
	
	public TemporalPredicate_HoldsAtParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemporalPredicateAccess().getHoldsAtParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HoldsAt_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(HoldsAt_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getHoldsAtRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Happens
protected class TemporalPredicate_HappensParserRuleCall_1 extends RuleCallToken {
	
	public TemporalPredicate_HappensParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemporalPredicateAccess().getHappensParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Happens_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Happens_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getHappensRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Initiates
protected class TemporalPredicate_InitiatesParserRuleCall_2 extends RuleCallToken {
	
	public TemporalPredicate_InitiatesParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemporalPredicateAccess().getInitiatesParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initiates_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Initiates_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInitiatesRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Terminates
protected class TemporalPredicate_TerminatesParserRuleCall_3 extends RuleCallToken {
	
	public TemporalPredicate_TerminatesParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemporalPredicateAccess().getTerminatesParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Terminates_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Terminates_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTerminatesRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TemporalPredicate ****************/


/************ begin Rule BoolExpr ****************
 *
 * BoolExpr:
 *   TemporalPredicate|UnaryBoolExpr|BinaryBoolExpr;
 *
 **/

// TemporalPredicate|UnaryBoolExpr|BinaryBoolExpr
protected class BoolExpr_Alternatives extends AlternativesToken {

	public BoolExpr_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getBoolExprAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolExpr_TemporalPredicateParserRuleCall_0(parent, this, 0, inst);
			case 1: return new BoolExpr_UnaryBoolExprParserRuleCall_1(parent, this, 1, inst);
			case 2: return new BoolExpr_BinaryBoolExprParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBoolExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// TemporalPredicate
protected class BoolExpr_TemporalPredicateParserRuleCall_0 extends RuleCallToken {
	
	public BoolExpr_TemporalPredicateParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBoolExprAccess().getTemporalPredicateParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemporalPredicate_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TemporalPredicate_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTemporalPredicateRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UnaryBoolExpr
protected class BoolExpr_UnaryBoolExprParserRuleCall_1 extends RuleCallToken {
	
	public BoolExpr_UnaryBoolExprParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBoolExprAccess().getUnaryBoolExprParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryBoolExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UnaryBoolExpr_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUnaryBoolExprRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BinaryBoolExpr
protected class BoolExpr_BinaryBoolExprParserRuleCall_2 extends RuleCallToken {
	
	public BoolExpr_BinaryBoolExprParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getBoolExprAccess().getBinaryBoolExprParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BinaryBoolExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BinaryBoolExpr_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBinaryBoolExprRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule BoolExpr ****************/


/************ begin Rule UnaryBoolExpr ****************
 *
 * UnaryBoolExpr:
 *   unaryop_lhs=UnaryBoolOp opr+=BoolExpr|"(" ops+=BoolExpr ")";
 *
 **/

// unaryop_lhs=UnaryBoolOp opr+=BoolExpr|"(" ops+=BoolExpr ")"
protected class UnaryBoolExpr_Alternatives extends AlternativesToken {

	public UnaryBoolExpr_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryBoolExpr_Group_0(parent, this, 0, inst);
			case 1: return new UnaryBoolExpr_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUnaryBoolExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// unaryop_lhs=UnaryBoolOp opr+=BoolExpr
protected class UnaryBoolExpr_Group_0 extends GroupToken {
	
	public UnaryBoolExpr_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryBoolExpr_OprAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// unaryop_lhs=UnaryBoolOp
protected class UnaryBoolExpr_Unaryop_lhsAssignment_0_0 extends AssignmentToken  {
	
	public UnaryBoolExpr_Unaryop_lhsAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getUnaryop_lhsAssignment_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unaryop_lhs",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unaryop_lhs");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getUnaryBoolExprAccess().getUnaryop_lhsUnaryBoolOpEnumRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// opr+=BoolExpr
protected class UnaryBoolExpr_OprAssignment_0_1 extends AssignmentToken  {
	
	public UnaryBoolExpr_OprAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getOprAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBoolExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnaryBoolExprAccess().getOprBoolExprParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnaryBoolExpr_Unaryop_lhsAssignment_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "(" ops+=BoolExpr ")"
protected class UnaryBoolExpr_Group_1 extends GroupToken {
	
	public UnaryBoolExpr_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryBoolExpr_RightParenthesisKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class UnaryBoolExpr_LeftParenthesisKeyword_1_0 extends KeywordToken  {
	
	public UnaryBoolExpr_LeftParenthesisKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getLeftParenthesisKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ops+=BoolExpr
protected class UnaryBoolExpr_OpsAssignment_1_1 extends AssignmentToken  {
	
	public UnaryBoolExpr_OpsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getOpsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ops",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ops");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBoolExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getUnaryBoolExprAccess().getOpsBoolExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnaryBoolExpr_LeftParenthesisKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class UnaryBoolExpr_RightParenthesisKeyword_1_2 extends KeywordToken  {
	
	public UnaryBoolExpr_RightParenthesisKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUnaryBoolExprAccess().getRightParenthesisKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UnaryBoolExpr_OpsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule UnaryBoolExpr ****************/


/************ begin Rule BinaryBoolExpr ****************
 *
 * BinaryBoolExpr:
 *   opr+=TemporalPredicate binaryop=BinaryBoolOp opr+=BoolExpr;      
 *       
 * //BinaryBoolExpr: opr+=BoolExpr binaryop=BinaryBoolOp opr+=BoolExpr;
 *
 **/

// opr+=TemporalPredicate binaryop=BinaryBoolOp opr+=BoolExpr
protected class BinaryBoolExpr_Group extends GroupToken {
	
	public BinaryBoolExpr_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBinaryBoolExprAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BinaryBoolExpr_OprAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBinaryBoolExprRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// opr+=TemporalPredicate
protected class BinaryBoolExpr_OprAssignment_0 extends AssignmentToken  {
	
	public BinaryBoolExpr_OprAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryBoolExprAccess().getOprAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemporalPredicate_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTemporalPredicateRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBinaryBoolExprAccess().getOprTemporalPredicateParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// binaryop=BinaryBoolOp
protected class BinaryBoolExpr_BinaryopAssignment_1 extends AssignmentToken  {
	
	public BinaryBoolExpr_BinaryopAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryBoolExprAccess().getBinaryopAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BinaryBoolExpr_OprAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("binaryop",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("binaryop");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getBinaryBoolExprAccess().getBinaryopBinaryBoolOpEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// opr+=BoolExpr
protected class BinaryBoolExpr_OprAssignment_2 extends AssignmentToken  {
	
	public BinaryBoolExpr_OprAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryBoolExprAccess().getOprAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("opr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("opr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBoolExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBinaryBoolExprAccess().getOprBoolExprParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BinaryBoolExpr_BinaryopAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule BinaryBoolExpr ****************/


/************ begin Rule Entity ****************
 *
 * Entity:
 *   Fluent|Event|Sort;
 *
 **/

// Fluent|Event|Sort
protected class Entity_Alternatives extends AlternativesToken {

	public Entity_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getEntityAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entity_FluentParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Entity_EventParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Entity_SortParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEntityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Fluent
protected class Entity_FluentParserRuleCall_0 extends RuleCallToken {
	
	public Entity_FluentParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityAccess().getFluentParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Fluent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Fluent_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFluentRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Event
protected class Entity_EventParserRuleCall_1 extends RuleCallToken {
	
	public Entity_EventParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityAccess().getEventParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Event_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Event_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getEventRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Sort
protected class Entity_SortParserRuleCall_2 extends RuleCallToken {
	
	public Entity_SortParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityAccess().getSortParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sort_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Sort_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Entity ****************/


/************ begin Rule Sort ****************
 *
 * Sort:
 *   "sort" name=ID;
 *
 **/

// "sort" name=ID
protected class Sort_Group extends GroupToken {
	
	public Sort_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSortAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sort_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "sort"
protected class Sort_SortKeyword_0 extends KeywordToken  {
	
	public Sort_SortKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSortAccess().getSortKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Sort_NameAssignment_1 extends AssignmentToken  {
	
	public Sort_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSortAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Sort_SortKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSortAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Sort ****************/


/************ begin Rule Import ****************
 *
 * Import:
 *   "load" path=Path;
 *
 **/

// "load" path=Path
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_PathAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "load"
protected class Import_LoadKeyword_0 extends KeywordToken  {
	
	public Import_LoadKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getLoadKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// path=Path
protected class Import_PathAssignment_1 extends AssignmentToken  {
	
	public Import_PathAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getPathAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Path_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("path",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("path");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPathRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getImportAccess().getPathPathParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Import_LoadKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Import ****************/


/************ begin Rule Var ****************
 *
 * Var:
 *   "range" name=ID min=INT max=INT;
 *
 **/

// "range" name=ID min=INT max=INT
protected class Var_Group extends GroupToken {
	
	public Var_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVarAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Var_MaxAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVarRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "range"
protected class Var_RangeKeyword_0 extends KeywordToken  {
	
	public Var_RangeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVarAccess().getRangeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Var_NameAssignment_1 extends AssignmentToken  {
	
	public Var_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Var_RangeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVarAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// min=INT
protected class Var_MinAssignment_2 extends AssignmentToken  {
	
	public Var_MinAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarAccess().getMinAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Var_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("min",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("min");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVarAccess().getMinINTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// max=INT
protected class Var_MaxAssignment_3 extends AssignmentToken  {
	
	public Var_MaxAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVarAccess().getMaxAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Var_MinAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("max",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("max");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getVarAccess().getMaxINTTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Var ****************/


/************ begin Rule Fluent ****************
 *
 * Fluent:
 *   "fluent" term=Term;
 *
 **/

// "fluent" term=Term
protected class Fluent_Group extends GroupToken {
	
	public Fluent_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFluentAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Fluent_TermAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFluentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "fluent"
protected class Fluent_FluentKeyword_0 extends KeywordToken  {
	
	public Fluent_FluentKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFluentAccess().getFluentKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// term=Term
protected class Fluent_TermAssignment_1 extends AssignmentToken  {
	
	public Fluent_TermAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFluentAccess().getTermAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("term",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("term");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFluentAccess().getTermTermParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Fluent_FluentKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Fluent ****************/


/************ begin Rule Event ****************
 *
 * Event:
 *   "event" term=Term;
 *
 **/

// "event" term=Term
protected class Event_Group extends GroupToken {
	
	public Event_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEventAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Event_TermAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEventRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "event"
protected class Event_EventKeyword_0 extends KeywordToken  {
	
	public Event_EventKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEventAccess().getEventKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// term=Term
protected class Event_TermAssignment_1 extends AssignmentToken  {
	
	public Event_TermAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEventAccess().getTermAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("term",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("term");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEventAccess().getTermTermParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Event_EventKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Event ****************/


/************ begin Rule Term ****************
 *
 * Term:
 *   name=ID ("(" args+=ID? ("," args+=ID)* ")")?;
 *
 **/

// name=ID ("(" args+=ID? ("," args+=ID)* ")")?
protected class Term_Group extends GroupToken {
	
	public Term_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTermAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group_1(parent, this, 0, inst);
			case 1: return new Term_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class Term_NameAssignment_0 extends AssignmentToken  {
	
	public Term_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTermAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTermAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("(" args+=ID? ("," args+=ID)* ")")?
protected class Term_Group_1 extends GroupToken {
	
	public Term_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTermAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_RightParenthesisKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Term_LeftParenthesisKeyword_1_0 extends KeywordToken  {
	
	public Term_LeftParenthesisKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTermAccess().getLeftParenthesisKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// args+=ID?
protected class Term_ArgsAssignment_1_1 extends AssignmentToken  {
	
	public Term_ArgsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTermAccess().getArgsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_LeftParenthesisKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("args",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("args");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTermAccess().getArgsIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// ("," args+=ID)*
protected class Term_Group_1_2 extends GroupToken {
	
	public Term_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTermAccess().getGroup_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_ArgsAssignment_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Term_CommaKeyword_1_2_0 extends KeywordToken  {
	
	public Term_CommaKeyword_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTermAccess().getCommaKeyword_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group_1_2(parent, this, 0, inst);
			case 1: return new Term_ArgsAssignment_1_1(parent, this, 1, inst);
			case 2: return new Term_LeftParenthesisKeyword_1_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// args+=ID
protected class Term_ArgsAssignment_1_2_1 extends AssignmentToken  {
	
	public Term_ArgsAssignment_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTermAccess().getArgsAssignment_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_CommaKeyword_1_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("args",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("args");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTermAccess().getArgsIDTerminalRuleCall_1_2_1_0();
			return obj;
		}
		return null;
	}

}


// ")"
protected class Term_RightParenthesisKeyword_1_3 extends KeywordToken  {
	
	public Term_RightParenthesisKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTermAccess().getRightParenthesisKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group_1_2(parent, this, 0, inst);
			case 1: return new Term_ArgsAssignment_1_1(parent, this, 1, inst);
			case 2: return new Term_LeftParenthesisKeyword_1_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Term ****************/


/************ begin Rule HoldsAt ****************
 *
 * HoldsAt:
 *   "HoldsAt" "(" fluent=Term "," time=IntExpr ")";
 *
 **/

// "HoldsAt" "(" fluent=Term "," time=IntExpr ")"
protected class HoldsAt_Group extends GroupToken {
	
	public HoldsAt_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HoldsAt_RightParenthesisKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getHoldsAtRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "HoldsAt"
protected class HoldsAt_HoldsAtKeyword_0 extends KeywordToken  {
	
	public HoldsAt_HoldsAtKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getHoldsAtKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class HoldsAt_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public HoldsAt_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HoldsAt_HoldsAtKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// fluent=Term
protected class HoldsAt_FluentAssignment_2 extends AssignmentToken  {
	
	public HoldsAt_FluentAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getFluentAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fluent",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fluent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getHoldsAtAccess().getFluentTermParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HoldsAt_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class HoldsAt_CommaKeyword_3 extends KeywordToken  {
	
	public HoldsAt_CommaKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getCommaKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HoldsAt_FluentAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// time=IntExpr
protected class HoldsAt_TimeAssignment_4 extends AssignmentToken  {
	
	public HoldsAt_TimeAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getTimeAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("time",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("time");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getHoldsAtAccess().getTimeIntExprParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HoldsAt_CommaKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class HoldsAt_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public HoldsAt_RightParenthesisKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHoldsAtAccess().getRightParenthesisKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HoldsAt_TimeAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule HoldsAt ****************/


/************ begin Rule Happens ****************
 *
 * Happens:
 *   "Happens" "(" event=Term "," time=IntExpr ")";
 *
 **/

// "Happens" "(" event=Term "," time=IntExpr ")"
protected class Happens_Group extends GroupToken {
	
	public Happens_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getHappensAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Happens_RightParenthesisKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getHappensRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "Happens"
protected class Happens_HappensKeyword_0 extends KeywordToken  {
	
	public Happens_HappensKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHappensAccess().getHappensKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class Happens_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Happens_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHappensAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Happens_HappensKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// event=Term
protected class Happens_EventAssignment_2 extends AssignmentToken  {
	
	public Happens_EventAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHappensAccess().getEventAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("event",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("event");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getHappensAccess().getEventTermParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Happens_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class Happens_CommaKeyword_3 extends KeywordToken  {
	
	public Happens_CommaKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHappensAccess().getCommaKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Happens_EventAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// time=IntExpr
protected class Happens_TimeAssignment_4 extends AssignmentToken  {
	
	public Happens_TimeAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHappensAccess().getTimeAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("time",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("time");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getHappensAccess().getTimeIntExprParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Happens_CommaKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Happens_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public Happens_RightParenthesisKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHappensAccess().getRightParenthesisKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Happens_TimeAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Happens ****************/


/************ begin Rule Initiates ****************
 *
 * Initiates:
 *   "Initiates" "(" event=Term "," fluent=Term "," time=IntExpr ")";
 *
 **/

// "Initiates" "(" event=Term "," fluent=Term "," time=IntExpr ")"
protected class Initiates_Group extends GroupToken {
	
	public Initiates_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initiates_RightParenthesisKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInitiatesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "Initiates"
protected class Initiates_InitiatesKeyword_0 extends KeywordToken  {
	
	public Initiates_InitiatesKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getInitiatesKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class Initiates_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Initiates_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initiates_InitiatesKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// event=Term
protected class Initiates_EventAssignment_2 extends AssignmentToken  {
	
	public Initiates_EventAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getEventAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("event",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("event");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInitiatesAccess().getEventTermParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Initiates_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class Initiates_CommaKeyword_3 extends KeywordToken  {
	
	public Initiates_CommaKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getCommaKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initiates_EventAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// fluent=Term
protected class Initiates_FluentAssignment_4 extends AssignmentToken  {
	
	public Initiates_FluentAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getFluentAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fluent",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fluent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInitiatesAccess().getFluentTermParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Initiates_CommaKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class Initiates_CommaKeyword_5 extends KeywordToken  {
	
	public Initiates_CommaKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getCommaKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initiates_FluentAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// time=IntExpr
protected class Initiates_TimeAssignment_6 extends AssignmentToken  {
	
	public Initiates_TimeAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getTimeAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("time",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("time");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInitiatesAccess().getTimeIntExprParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Initiates_CommaKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Initiates_RightParenthesisKeyword_7 extends KeywordToken  {
	
	public Initiates_RightParenthesisKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInitiatesAccess().getRightParenthesisKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Initiates_TimeAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Initiates ****************/


/************ begin Rule Terminates ****************
 *
 * Terminates:
 *   "Terminates" "(" event=Term "," fluent=Term "," time=IntExpr ")";
 *
 **/

// "Terminates" "(" event=Term "," fluent=Term "," time=IntExpr ")"
protected class Terminates_Group extends GroupToken {
	
	public Terminates_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Terminates_RightParenthesisKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTerminatesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "Terminates"
protected class Terminates_TerminatesKeyword_0 extends KeywordToken  {
	
	public Terminates_TerminatesKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getTerminatesKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "("
protected class Terminates_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Terminates_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Terminates_TerminatesKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// event=Term
protected class Terminates_EventAssignment_2 extends AssignmentToken  {
	
	public Terminates_EventAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getEventAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("event",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("event");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTerminatesAccess().getEventTermParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Terminates_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class Terminates_CommaKeyword_3 extends KeywordToken  {
	
	public Terminates_CommaKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getCommaKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Terminates_EventAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// fluent=Term
protected class Terminates_FluentAssignment_4 extends AssignmentToken  {
	
	public Terminates_FluentAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getFluentAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Term_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fluent",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fluent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTerminatesAccess().getFluentTermParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Terminates_CommaKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class Terminates_CommaKeyword_5 extends KeywordToken  {
	
	public Terminates_CommaKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getCommaKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Terminates_FluentAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// time=IntExpr
protected class Terminates_TimeAssignment_6 extends AssignmentToken  {
	
	public Terminates_TimeAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getTimeAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("time",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("time");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntExprRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTerminatesAccess().getTimeIntExprParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Terminates_CommaKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Terminates_RightParenthesisKeyword_7 extends KeywordToken  {
	
	public Terminates_RightParenthesisKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTerminatesAccess().getRightParenthesisKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Terminates_TimeAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Terminates ****************/


/************ begin Rule Path ****************
 *
 * Path:
 *   file=File ("/" file=File)*;
 *
 **/

// file=File ("/" file=File)*
protected class Path_Group extends GroupToken {
	
	public Path_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Path_Group_1(parent, this, 0, inst);
			case 1: return new Path_FileAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPathRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// file=File
protected class Path_FileAssignment_0 extends AssignmentToken  {
	
	public Path_FileAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathAccess().getFileAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new File_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("file",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("file");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFileRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathAccess().getFileFileParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("/" file=File)*
protected class Path_Group_1 extends GroupToken {
	
	public Path_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPathAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Path_FileAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "/"
protected class Path_SolidusKeyword_1_0 extends KeywordToken  {
	
	public Path_SolidusKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPathAccess().getSolidusKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Path_Group_1(parent, this, 0, inst);
			case 1: return new Path_FileAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// file=File
protected class Path_FileAssignment_1_1 extends AssignmentToken  {
	
	public Path_FileAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPathAccess().getFileAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new File_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("file",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("file");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFileRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPathAccess().getFileFileParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Path_SolidusKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Path ****************/


/************ begin Rule File ****************
 *
 * File:
 *   name=ID ("." name=ID)*;
 *
 **/

// name=ID ("." name=ID)*
protected class File_Group extends GroupToken {
	
	public File_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFileAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new File_Group_1(parent, this, 0, inst);
			case 1: return new File_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFileRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class File_NameAssignment_0 extends AssignmentToken  {
	
	public File_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFileAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFileAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("." name=ID)*
protected class File_Group_1 extends GroupToken {
	
	public File_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFileAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new File_NameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "."
protected class File_FullStopKeyword_1_0 extends KeywordToken  {
	
	public File_FullStopKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFileAccess().getFullStopKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new File_Group_1(parent, this, 0, inst);
			case 1: return new File_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class File_NameAssignment_1_1 extends AssignmentToken  {
	
	public File_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFileAccess().getNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new File_FullStopKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFileAccess().getNameIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule File ****************/


/************ begin Rule Model ****************
 *
 * Model:
 *   "istar" name=ID? ":" (containers+=Container|intentions+=Intention|decompositions+=
 *   Decomposition|dependencies+=Dependency|contributions+=Contribution|associations
 *   +=Association)*;
 *
 **/

// "istar" name=ID? ":" (containers+=Container|intentions+=Intention|decompositions+=
// Decomposition|dependencies+=Dependency|contributions+=Contribution|associations
// +=Association)*
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Alternatives_3(parent, this, 0, inst);
			case 1: return new Model_ColonKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "istar"
protected class Model_IstarKeyword_0 extends KeywordToken  {
	
	public Model_IstarKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getIstarKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID?
protected class Model_NameAssignment_1 extends AssignmentToken  {
	
	public Model_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_IstarKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class Model_ColonKeyword_2 extends KeywordToken  {
	
	public Model_ColonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getColonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_NameAssignment_1(parent, this, 0, inst);
			case 1: return new Model_IstarKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// (containers+=Container|intentions+=Intention|decompositions+=Decomposition|
// dependencies+=Dependency|contributions+=Contribution|associations+=Association)*
protected class Model_Alternatives_3 extends AlternativesToken {

	public Model_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_ContainersAssignment_3_0(parent, this, 0, inst);
			case 1: return new Model_IntentionsAssignment_3_1(parent, this, 1, inst);
			case 2: return new Model_DecompositionsAssignment_3_2(parent, this, 2, inst);
			case 3: return new Model_DependenciesAssignment_3_3(parent, this, 3, inst);
			case 4: return new Model_ContributionsAssignment_3_4(parent, this, 4, inst);
			case 5: return new Model_AssociationsAssignment_3_5(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}

// containers+=Container
protected class Model_ContainersAssignment_3_0 extends AssignmentToken  {
	
	public Model_ContainersAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getContainersAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Container_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("containers",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("containers");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContainerRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getContainersContainerParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_Alternatives_3(parent, next, actIndex, consumed);
			case 1: return new Model_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// intentions+=Intention
protected class Model_IntentionsAssignment_3_1 extends AssignmentToken  {
	
	public Model_IntentionsAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getIntentionsAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Intention_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intentions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intentions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntentionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getIntentionsIntentionParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_Alternatives_3(parent, next, actIndex, consumed);
			case 1: return new Model_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// decompositions+=Decomposition
protected class Model_DecompositionsAssignment_3_2 extends AssignmentToken  {
	
	public Model_DecompositionsAssignment_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getDecompositionsAssignment_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decomposition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("decompositions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("decompositions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDecompositionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getDecompositionsDecompositionParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_Alternatives_3(parent, next, actIndex, consumed);
			case 1: return new Model_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// dependencies+=Dependency
protected class Model_DependenciesAssignment_3_3 extends AssignmentToken  {
	
	public Model_DependenciesAssignment_3_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getDependenciesAssignment_3_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dependency_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dependencies",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dependencies");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDependencyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getDependenciesDependencyParserRuleCall_3_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_Alternatives_3(parent, next, actIndex, consumed);
			case 1: return new Model_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// contributions+=Contribution
protected class Model_ContributionsAssignment_3_4 extends AssignmentToken  {
	
	public Model_ContributionsAssignment_3_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getContributionsAssignment_3_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Contribution_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contributions",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contributions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContributionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getContributionsContributionParserRuleCall_3_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_Alternatives_3(parent, next, actIndex, consumed);
			case 1: return new Model_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// associations+=Association
protected class Model_AssociationsAssignment_3_5 extends AssignmentToken  {
	
	public Model_AssociationsAssignment_3_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getAssociationsAssignment_3_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("associations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("associations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getAssociationsAssociationParserRuleCall_3_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_Alternatives_3(parent, next, actIndex, consumed);
			case 1: return new Model_ColonKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Model ****************/


/************ begin Rule Container ****************
 *
 * Container:
 *   Actor|Agent|Role|Position;
 *
 **/

// Actor|Agent|Role|Position
protected class Container_Alternatives extends AlternativesToken {

	public Container_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getContainerAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Container_ActorParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Container_AgentParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Container_RoleParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Container_PositionParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContainerRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Actor
protected class Container_ActorParserRuleCall_0 extends RuleCallToken {
	
	public Container_ActorParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContainerAccess().getActorParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Actor_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Actor_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getActorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Agent
protected class Container_AgentParserRuleCall_1 extends RuleCallToken {
	
	public Container_AgentParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContainerAccess().getAgentParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Agent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Agent_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAgentRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Role
protected class Container_RoleParserRuleCall_2 extends RuleCallToken {
	
	public Container_RoleParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContainerAccess().getRoleParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Role_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Role_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRoleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Position
protected class Container_PositionParserRuleCall_3 extends RuleCallToken {
	
	public Container_PositionParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContainerAccess().getPositionParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Position_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Position_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPositionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Container ****************/


/************ begin Rule Actor ****************
 *
 * Actor:
 *   "actor" name=ID (is_a+=[Actor]|is_part_of+=[Actor])* ("{" intentions+=Intention* "}")
 *   ?;
 *
 **/

// "actor" name=ID (is_a+=[Actor]|is_part_of+=[Actor])* ("{" intentions+=Intention* "}")
// ?
protected class Actor_Group extends GroupToken {
	
	public Actor_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Actor_Group_3(parent, this, 0, inst);
			case 1: return new Actor_Alternatives_2(parent, this, 1, inst);
			case 2: return new Actor_NameAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getActorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "actor"
protected class Actor_ActorKeyword_0 extends KeywordToken  {
	
	public Actor_ActorKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActorAccess().getActorKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Actor_NameAssignment_1 extends AssignmentToken  {
	
	public Actor_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActorAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Actor_ActorKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getActorAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (is_a+=[Actor]|is_part_of+=[Actor])*
protected class Actor_Alternatives_2 extends AlternativesToken {

	public Actor_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getActorAccess().getAlternatives_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Actor_Is_aAssignment_2_0(parent, this, 0, inst);
			case 1: return new Actor_Is_part_ofAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// is_a+=[Actor]
protected class Actor_Is_aAssignment_2_0 extends AssignmentToken  {
	
	public Actor_Is_aAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActorAccess().getIs_aAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Actor_Alternatives_2(parent, this, 0, inst);
			case 1: return new Actor_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("is_a",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("is_a");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActorAccess().getIs_aActorCrossReference_2_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getActorAccess().getIs_aActorCrossReference_2_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// is_part_of+=[Actor]
protected class Actor_Is_part_ofAssignment_2_1 extends AssignmentToken  {
	
	public Actor_Is_part_ofAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActorAccess().getIs_part_ofAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Actor_Alternatives_2(parent, this, 0, inst);
			case 1: return new Actor_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("is_part_of",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("is_part_of");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActorAccess().getIs_part_ofActorCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getActorAccess().getIs_part_ofActorCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ("{" intentions+=Intention* "}")?
protected class Actor_Group_3 extends GroupToken {
	
	public Actor_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getActorAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Actor_RightCurlyBracketKeyword_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Actor_LeftCurlyBracketKeyword_3_0 extends KeywordToken  {
	
	public Actor_LeftCurlyBracketKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActorAccess().getLeftCurlyBracketKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Actor_Alternatives_2(parent, this, 0, inst);
			case 1: return new Actor_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// intentions+=Intention*
protected class Actor_IntentionsAssignment_3_1 extends AssignmentToken  {
	
	public Actor_IntentionsAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getActorAccess().getIntentionsAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Intention_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intentions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intentions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntentionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getActorAccess().getIntentionsIntentionParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Actor_IntentionsAssignment_3_1(parent, next, actIndex, consumed);
			case 1: return new Actor_LeftCurlyBracketKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Actor_RightCurlyBracketKeyword_3_2 extends KeywordToken  {
	
	public Actor_RightCurlyBracketKeyword_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getActorAccess().getRightCurlyBracketKeyword_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Actor_IntentionsAssignment_3_1(parent, this, 0, inst);
			case 1: return new Actor_LeftCurlyBracketKeyword_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Actor ****************/


/************ begin Rule Agent ****************
 *
 * Agent:
 *   "agent" name=ID ("{" intentions+=Intention* "}")?;
 *
 **/

// "agent" name=ID ("{" intentions+=Intention* "}")?
protected class Agent_Group extends GroupToken {
	
	public Agent_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAgentAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Agent_Group_2(parent, this, 0, inst);
			case 1: return new Agent_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAgentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "agent"
protected class Agent_AgentKeyword_0 extends KeywordToken  {
	
	public Agent_AgentKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAgentAccess().getAgentKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Agent_NameAssignment_1 extends AssignmentToken  {
	
	public Agent_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAgentAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Agent_AgentKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAgentAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("{" intentions+=Intention* "}")?
protected class Agent_Group_2 extends GroupToken {
	
	public Agent_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAgentAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Agent_RightCurlyBracketKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Agent_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public Agent_LeftCurlyBracketKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAgentAccess().getLeftCurlyBracketKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Agent_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// intentions+=Intention*
protected class Agent_IntentionsAssignment_2_1 extends AssignmentToken  {
	
	public Agent_IntentionsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAgentAccess().getIntentionsAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Intention_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intentions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intentions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntentionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAgentAccess().getIntentionsIntentionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Agent_IntentionsAssignment_2_1(parent, next, actIndex, consumed);
			case 1: return new Agent_LeftCurlyBracketKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Agent_RightCurlyBracketKeyword_2_2 extends KeywordToken  {
	
	public Agent_RightCurlyBracketKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAgentAccess().getRightCurlyBracketKeyword_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Agent_IntentionsAssignment_2_1(parent, this, 0, inst);
			case 1: return new Agent_LeftCurlyBracketKeyword_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Agent ****************/


/************ begin Rule Role ****************
 *
 * Role:
 *   "role" name=ID ("{" intentions+=Intention* "}")?;
 *
 **/

// "role" name=ID ("{" intentions+=Intention* "}")?
protected class Role_Group extends GroupToken {
	
	public Role_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRoleAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Role_Group_2(parent, this, 0, inst);
			case 1: return new Role_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRoleRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "role"
protected class Role_RoleKeyword_0 extends KeywordToken  {
	
	public Role_RoleKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRoleAccess().getRoleKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Role_NameAssignment_1 extends AssignmentToken  {
	
	public Role_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRoleAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Role_RoleKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getRoleAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("{" intentions+=Intention* "}")?
protected class Role_Group_2 extends GroupToken {
	
	public Role_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getRoleAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Role_RightCurlyBracketKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Role_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public Role_LeftCurlyBracketKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRoleAccess().getLeftCurlyBracketKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Role_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// intentions+=Intention*
protected class Role_IntentionsAssignment_2_1 extends AssignmentToken  {
	
	public Role_IntentionsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getRoleAccess().getIntentionsAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Intention_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intentions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intentions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntentionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRoleAccess().getIntentionsIntentionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Role_IntentionsAssignment_2_1(parent, next, actIndex, consumed);
			case 1: return new Role_LeftCurlyBracketKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Role_RightCurlyBracketKeyword_2_2 extends KeywordToken  {
	
	public Role_RightCurlyBracketKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getRoleAccess().getRightCurlyBracketKeyword_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Role_IntentionsAssignment_2_1(parent, this, 0, inst);
			case 1: return new Role_LeftCurlyBracketKeyword_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Role ****************/


/************ begin Rule Position ****************
 *
 * Position:
 *   "position" name=ID ("{" intentions+=Intention* "}")?;
 *
 **/

// "position" name=ID ("{" intentions+=Intention* "}")?
protected class Position_Group extends GroupToken {
	
	public Position_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPositionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Position_Group_2(parent, this, 0, inst);
			case 1: return new Position_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPositionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "position"
protected class Position_PositionKeyword_0 extends KeywordToken  {
	
	public Position_PositionKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPositionAccess().getPositionKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Position_NameAssignment_1 extends AssignmentToken  {
	
	public Position_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPositionAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Position_PositionKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPositionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("{" intentions+=Intention* "}")?
protected class Position_Group_2 extends GroupToken {
	
	public Position_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPositionAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Position_RightCurlyBracketKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Position_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public Position_LeftCurlyBracketKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPositionAccess().getLeftCurlyBracketKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Position_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// intentions+=Intention*
protected class Position_IntentionsAssignment_2_1 extends AssignmentToken  {
	
	public Position_IntentionsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPositionAccess().getIntentionsAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Intention_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("intentions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("intentions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIntentionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPositionAccess().getIntentionsIntentionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Position_IntentionsAssignment_2_1(parent, next, actIndex, consumed);
			case 1: return new Position_LeftCurlyBracketKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Position_RightCurlyBracketKeyword_2_2 extends KeywordToken  {
	
	public Position_RightCurlyBracketKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPositionAccess().getRightCurlyBracketKeyword_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Position_IntentionsAssignment_2_1(parent, this, 0, inst);
			case 1: return new Position_LeftCurlyBracketKeyword_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Position ****************/


/************ begin Rule Intention ****************
 *
 * Intention:
 *   Goal|Softgoal|Task|Resource|Belief;
 *
 **/

// Goal|Softgoal|Task|Resource|Belief
protected class Intention_Alternatives extends AlternativesToken {

	public Intention_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getIntentionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Intention_GoalParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Intention_SoftgoalParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Intention_TaskParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Intention_ResourceParserRuleCall_3(parent, this, 3, inst);
			case 4: return new Intention_BeliefParserRuleCall_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntentionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Goal
protected class Intention_GoalParserRuleCall_0 extends RuleCallToken {
	
	public Intention_GoalParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIntentionAccess().getGoalParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Goal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Goal_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getGoalRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Softgoal
protected class Intention_SoftgoalParserRuleCall_1 extends RuleCallToken {
	
	public Intention_SoftgoalParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIntentionAccess().getSoftgoalParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Softgoal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Softgoal_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSoftgoalRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Task
protected class Intention_TaskParserRuleCall_2 extends RuleCallToken {
	
	public Intention_TaskParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIntentionAccess().getTaskParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Task_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Task_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTaskRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Resource
protected class Intention_ResourceParserRuleCall_3 extends RuleCallToken {
	
	public Intention_ResourceParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIntentionAccess().getResourceParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Resource_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Resource_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getResourceRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Belief
protected class Intention_BeliefParserRuleCall_4 extends RuleCallToken {
	
	public Intention_BeliefParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIntentionAccess().getBeliefParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Belief_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Belief_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBeliefRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Intention ****************/


/************ begin Rule Goal ****************
 *
 * Goal:
 *   "goal" name=ID ("{" decompositions+=[Decomposition]* "}")?;
 *
 **/

// "goal" name=ID ("{" decompositions+=[Decomposition]* "}")?
protected class Goal_Group extends GroupToken {
	
	public Goal_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGoalAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Goal_Group_2(parent, this, 0, inst);
			case 1: return new Goal_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getGoalRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "goal"
protected class Goal_GoalKeyword_0 extends KeywordToken  {
	
	public Goal_GoalKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGoalAccess().getGoalKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Goal_NameAssignment_1 extends AssignmentToken  {
	
	public Goal_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGoalAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Goal_GoalKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getGoalAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("{" decompositions+=[Decomposition]* "}")?
protected class Goal_Group_2 extends GroupToken {
	
	public Goal_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGoalAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Goal_RightCurlyBracketKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Goal_LeftCurlyBracketKeyword_2_0 extends KeywordToken  {
	
	public Goal_LeftCurlyBracketKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGoalAccess().getLeftCurlyBracketKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Goal_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// decompositions+=[Decomposition]*
protected class Goal_DecompositionsAssignment_2_1 extends AssignmentToken  {
	
	public Goal_DecompositionsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGoalAccess().getDecompositionsAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Goal_DecompositionsAssignment_2_1(parent, this, 0, inst);
			case 1: return new Goal_LeftCurlyBracketKeyword_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("decompositions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("decompositions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGoalAccess().getDecompositionsDecompositionCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getGoalAccess().getDecompositionsDecompositionCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "}"
protected class Goal_RightCurlyBracketKeyword_2_2 extends KeywordToken  {
	
	public Goal_RightCurlyBracketKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGoalAccess().getRightCurlyBracketKeyword_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Goal_DecompositionsAssignment_2_1(parent, this, 0, inst);
			case 1: return new Goal_LeftCurlyBracketKeyword_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Goal ****************/


/************ begin Rule Softgoal ****************
 *
 * Softgoal:
 *   "soft" name=ID;
 *
 **/

// "soft" name=ID
protected class Softgoal_Group extends GroupToken {
	
	public Softgoal_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSoftgoalAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Softgoal_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSoftgoalRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "soft"
protected class Softgoal_SoftKeyword_0 extends KeywordToken  {
	
	public Softgoal_SoftKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSoftgoalAccess().getSoftKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Softgoal_NameAssignment_1 extends AssignmentToken  {
	
	public Softgoal_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSoftgoalAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Softgoal_SoftKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSoftgoalAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Softgoal ****************/


/************ begin Rule Task ****************
 *
 * Task:
 *   "task" name=ID;
 *
 **/

// "task" name=ID
protected class Task_Group extends GroupToken {
	
	public Task_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTaskAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Task_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTaskRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "task"
protected class Task_TaskKeyword_0 extends KeywordToken  {
	
	public Task_TaskKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTaskAccess().getTaskKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Task_NameAssignment_1 extends AssignmentToken  {
	
	public Task_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTaskAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Task_TaskKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Task ****************/


/************ begin Rule Resource ****************
 *
 * Resource:
 *   "resource" name=ID;
 *
 **/

// "resource" name=ID
protected class Resource_Group extends GroupToken {
	
	public Resource_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getResourceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Resource_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getResourceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "resource"
protected class Resource_ResourceKeyword_0 extends KeywordToken  {
	
	public Resource_ResourceKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResourceAccess().getResourceKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Resource_NameAssignment_1 extends AssignmentToken  {
	
	public Resource_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResourceAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Resource_ResourceKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getResourceAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Resource ****************/


/************ begin Rule Belief ****************
 *
 * Belief:
 *   "belief" name=ID;
 *
 **/

// "belief" name=ID
protected class Belief_Group extends GroupToken {
	
	public Belief_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBeliefAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Belief_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBeliefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "belief"
protected class Belief_BeliefKeyword_0 extends KeywordToken  {
	
	public Belief_BeliefKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBeliefAccess().getBeliefKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Belief_NameAssignment_1 extends AssignmentToken  {
	
	public Belief_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBeliefAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Belief_BeliefKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBeliefAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Belief ****************/


/************ begin Rule Link ****************
 *
 * Link:
 *   Association|Dependency|Decomposition|Contribution;
 *
 **/

// Association|Dependency|Decomposition|Contribution
protected class Link_Alternatives extends AlternativesToken {

	public Link_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getLinkAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_AssociationParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Link_DependencyParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Link_DecompositionParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Link_ContributionParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLinkRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Association
protected class Link_AssociationParserRuleCall_0 extends RuleCallToken {
	
	public Link_AssociationParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLinkAccess().getAssociationParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Association_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAssociationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Dependency
protected class Link_DependencyParserRuleCall_1 extends RuleCallToken {
	
	public Link_DependencyParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLinkAccess().getDependencyParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dependency_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Dependency_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDependencyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Decomposition
protected class Link_DecompositionParserRuleCall_2 extends RuleCallToken {
	
	public Link_DecompositionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLinkAccess().getDecompositionParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decomposition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Decomposition_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDecompositionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Contribution
protected class Link_ContributionParserRuleCall_3 extends RuleCallToken {
	
	public Link_ContributionParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLinkAccess().getContributionParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Contribution_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Contribution_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getContributionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Link ****************/


/************ begin Rule Dependable ****************
 *
 * Dependable:
 *   Intention|Container;
 *
 **/

// Intention|Container
protected class Dependable_Alternatives extends AlternativesToken {

	public Dependable_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDependableAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dependable_IntentionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Dependable_ContainerParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDependableRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Intention
protected class Dependable_IntentionParserRuleCall_0 extends RuleCallToken {
	
	public Dependable_IntentionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDependableAccess().getIntentionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Intention_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Intention_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntentionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Container
protected class Dependable_ContainerParserRuleCall_1 extends RuleCallToken {
	
	public Dependable_ContainerParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDependableAccess().getContainerParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Container_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Container_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getContainerRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Dependable ****************/


/************ begin Rule Association ****************
 *
 * Association:
 *   source=[Container] "~~>" target=[Container];
 *
 **/

// source=[Container] "~~>" target=[Container]
protected class Association_Group extends GroupToken {
	
	public Association_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssociationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_TargetAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssociationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// source=[Container]
protected class Association_SourceAssignment_0 extends AssignmentToken  {
	
	public Association_SourceAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationAccess().getSourceAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("source",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationAccess().getSourceContainerCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAssociationAccess().getSourceContainerCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "~~>"
protected class Association_TildeTildeGreaterThanSignKeyword_1 extends KeywordToken  {
	
	public Association_TildeTildeGreaterThanSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationAccess().getTildeTildeGreaterThanSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_SourceAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// target=[Container]
protected class Association_TargetAssignment_2 extends AssignmentToken  {
	
	public Association_TargetAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationAccess().getTargetAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_TildeTildeGreaterThanSignKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationAccess().getTargetContainerCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAssociationAccess().getTargetContainerCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule Association ****************/


/************ begin Rule Dependency ****************
 *
 * Dependency:
 *   dependencyFrom=[Dependable] "~>" dependencyTo=[Dependable];
 *
 **/

// dependencyFrom=[Dependable] "~>" dependencyTo=[Dependable]
protected class Dependency_Group extends GroupToken {
	
	public Dependency_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDependencyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dependency_DependencyToAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDependencyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// dependencyFrom=[Dependable]
protected class Dependency_DependencyFromAssignment_0 extends AssignmentToken  {
	
	public Dependency_DependencyFromAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDependencyAccess().getDependencyFromAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dependencyFrom",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dependencyFrom");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDependencyAccess().getDependencyFromDependableCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDependencyAccess().getDependencyFromDependableCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "~>"
protected class Dependency_TildeGreaterThanSignKeyword_1 extends KeywordToken  {
	
	public Dependency_TildeGreaterThanSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDependencyAccess().getTildeGreaterThanSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dependency_DependencyFromAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dependencyTo=[Dependable]
protected class Dependency_DependencyToAssignment_2 extends AssignmentToken  {
	
	public Dependency_DependencyToAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDependencyAccess().getDependencyToAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dependency_TildeGreaterThanSignKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dependencyTo",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dependencyTo");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDependencyAccess().getDependencyToDependableCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDependencyAccess().getDependencyToDependableCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule Dependency ****************/


/************ begin Rule Decomposition ****************
 *
 * Decomposition:
 *   AndDecomposition|OrDecomposition;
 *
 **/

// AndDecomposition|OrDecomposition
protected class Decomposition_Alternatives extends AlternativesToken {

	public Decomposition_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDecompositionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decomposition_AndDecompositionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Decomposition_OrDecompositionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDecompositionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AndDecomposition
protected class Decomposition_AndDecompositionParserRuleCall_0 extends RuleCallToken {
	
	public Decomposition_AndDecompositionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDecompositionAccess().getAndDecompositionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndDecomposition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AndDecomposition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAndDecompositionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// OrDecomposition
protected class Decomposition_OrDecompositionParserRuleCall_1 extends RuleCallToken {
	
	public Decomposition_OrDecompositionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDecompositionAccess().getOrDecompositionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrDecomposition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OrDecomposition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOrDecompositionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Decomposition ****************/


/************ begin Rule AndDecomposition ****************
 *
 * AndDecomposition:
 *   target=[Intention] "<-(and)-" source=[Intention];
 *
 **/

// target=[Intention] "<-(and)-" source=[Intention]
protected class AndDecomposition_Group extends GroupToken {
	
	public AndDecomposition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndDecompositionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndDecomposition_SourceAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAndDecompositionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// target=[Intention]
protected class AndDecomposition_TargetAssignment_0 extends AssignmentToken  {
	
	public AndDecomposition_TargetAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndDecompositionAccess().getTargetAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndDecompositionAccess().getTargetIntentionCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAndDecompositionAccess().getTargetIntentionCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "<-(and)-"
protected class AndDecomposition_AndKeyword_1 extends KeywordToken  {
	
	public AndDecomposition_AndKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAndDecompositionAccess().getAndKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndDecomposition_TargetAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// source=[Intention]
protected class AndDecomposition_SourceAssignment_2 extends AssignmentToken  {
	
	public AndDecomposition_SourceAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndDecompositionAccess().getSourceAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndDecomposition_AndKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("source",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndDecompositionAccess().getSourceIntentionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAndDecompositionAccess().getSourceIntentionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule AndDecomposition ****************/


/************ begin Rule OrDecomposition ****************
 *
 * OrDecomposition:
 *   target=[Intention] "<-(or)-" source=[Intention];
 *
 **/

// target=[Intention] "<-(or)-" source=[Intention]
protected class OrDecomposition_Group extends GroupToken {
	
	public OrDecomposition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOrDecompositionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrDecomposition_SourceAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOrDecompositionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// target=[Intention]
protected class OrDecomposition_TargetAssignment_0 extends AssignmentToken  {
	
	public OrDecomposition_TargetAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrDecompositionAccess().getTargetAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrDecompositionAccess().getTargetIntentionCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getOrDecompositionAccess().getTargetIntentionCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "<-(or)-"
protected class OrDecomposition_OrKeyword_1 extends KeywordToken  {
	
	public OrDecomposition_OrKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOrDecompositionAccess().getOrKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrDecomposition_TargetAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// source=[Intention]
protected class OrDecomposition_SourceAssignment_2 extends AssignmentToken  {
	
	public OrDecomposition_SourceAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrDecompositionAccess().getSourceAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrDecomposition_OrKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("source",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrDecompositionAccess().getSourceIntentionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getOrDecompositionAccess().getSourceIntentionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule OrDecomposition ****************/


/************ begin Rule Contribution ****************
 *
 * Contribution:
 *   AndContribution|OrContribution|HelpContribution|HurtContribution|
 *   MakeContribution|BreakContribution;
 *
 **/

// AndContribution|OrContribution|HelpContribution|HurtContribution|
// MakeContribution|BreakContribution
protected class Contribution_Alternatives extends AlternativesToken {

	public Contribution_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getContributionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Contribution_AndContributionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Contribution_OrContributionParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Contribution_HelpContributionParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Contribution_HurtContributionParserRuleCall_3(parent, this, 3, inst);
			case 4: return new Contribution_MakeContributionParserRuleCall_4(parent, this, 4, inst);
			case 5: return new Contribution_BreakContributionParserRuleCall_5(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getContributionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AndContribution
protected class Contribution_AndContributionParserRuleCall_0 extends RuleCallToken {
	
	public Contribution_AndContributionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContributionAccess().getAndContributionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndContribution_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AndContribution_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAndContributionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// OrContribution
protected class Contribution_OrContributionParserRuleCall_1 extends RuleCallToken {
	
	public Contribution_OrContributionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContributionAccess().getOrContributionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrContribution_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OrContribution_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOrContributionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// HelpContribution
protected class Contribution_HelpContributionParserRuleCall_2 extends RuleCallToken {
	
	public Contribution_HelpContributionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContributionAccess().getHelpContributionParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HelpContribution_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(HelpContribution_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getHelpContributionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// HurtContribution
protected class Contribution_HurtContributionParserRuleCall_3 extends RuleCallToken {
	
	public Contribution_HurtContributionParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContributionAccess().getHurtContributionParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HurtContribution_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(HurtContribution_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getHurtContributionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// MakeContribution
protected class Contribution_MakeContributionParserRuleCall_4 extends RuleCallToken {
	
	public Contribution_MakeContributionParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContributionAccess().getMakeContributionParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MakeContribution_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(MakeContribution_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMakeContributionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BreakContribution
protected class Contribution_BreakContributionParserRuleCall_5 extends RuleCallToken {
	
	public Contribution_BreakContributionParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getContributionAccess().getBreakContributionParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakContribution_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BreakContribution_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBreakContributionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Contribution ****************/


/************ begin Rule AndContribution ****************
 *
 * AndContribution:
 *   source=[Intention] "-(and)->" target=[Intention];
 *
 **/

// source=[Intention] "-(and)->" target=[Intention]
protected class AndContribution_Group extends GroupToken {
	
	public AndContribution_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndContributionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndContribution_TargetAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAndContributionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// source=[Intention]
protected class AndContribution_SourceAssignment_0 extends AssignmentToken  {
	
	public AndContribution_SourceAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndContributionAccess().getSourceAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("source",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndContributionAccess().getSourceIntentionCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAndContributionAccess().getSourceIntentionCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "-(and)->"
protected class AndContribution_AndKeyword_1 extends KeywordToken  {
	
	public AndContribution_AndKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAndContributionAccess().getAndKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndContribution_SourceAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// target=[Intention]
protected class AndContribution_TargetAssignment_2 extends AssignmentToken  {
	
	public AndContribution_TargetAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndContributionAccess().getTargetAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndContribution_AndKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndContributionAccess().getTargetIntentionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAndContributionAccess().getTargetIntentionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule AndContribution ****************/


/************ begin Rule OrContribution ****************
 *
 * OrContribution:
 *   source=[Intention] "-(or)->" target=[Intention];
 *
 **/

// source=[Intention] "-(or)->" target=[Intention]
protected class OrContribution_Group extends GroupToken {
	
	public OrContribution_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOrContributionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrContribution_TargetAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOrContributionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// source=[Intention]
protected class OrContribution_SourceAssignment_0 extends AssignmentToken  {
	
	public OrContribution_SourceAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrContributionAccess().getSourceAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("source",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrContributionAccess().getSourceIntentionCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getOrContributionAccess().getSourceIntentionCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "-(or)->"
protected class OrContribution_OrKeyword_1 extends KeywordToken  {
	
	public OrContribution_OrKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOrContributionAccess().getOrKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrContribution_SourceAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// target=[Intention]
protected class OrContribution_TargetAssignment_2 extends AssignmentToken  {
	
	public OrContribution_TargetAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrContributionAccess().getTargetAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrContribution_OrKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrContributionAccess().getTargetIntentionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getOrContributionAccess().getTargetIntentionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule OrContribution ****************/


/************ begin Rule HelpContribution ****************
 *
 * HelpContribution:
 *   source=[Intention] "-(+)->" target=[Intention];
 *
 **/

// source=[Intention] "-(+)->" target=[Intention]
protected class HelpContribution_Group extends GroupToken {
	
	public HelpContribution_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getHelpContributionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HelpContribution_TargetAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getHelpContributionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// source=[Intention]
protected class HelpContribution_SourceAssignment_0 extends AssignmentToken  {
	
	public HelpContribution_SourceAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHelpContributionAccess().getSourceAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("source",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHelpContributionAccess().getSourceIntentionCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getHelpContributionAccess().getSourceIntentionCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "-(+)->"
protected class HelpContribution_HyphenMinusLeftParenthesisPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1 extends KeywordToken  {
	
	public HelpContribution_HyphenMinusLeftParenthesisPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHelpContributionAccess().getHyphenMinusLeftParenthesisPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HelpContribution_SourceAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// target=[Intention]
protected class HelpContribution_TargetAssignment_2 extends AssignmentToken  {
	
	public HelpContribution_TargetAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHelpContributionAccess().getTargetAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HelpContribution_HyphenMinusLeftParenthesisPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHelpContributionAccess().getTargetIntentionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getHelpContributionAccess().getTargetIntentionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule HelpContribution ****************/


/************ begin Rule MakeContribution ****************
 *
 * MakeContribution:
 *   source=[Intention] "-(++)->" target=[Intention];
 *
 **/

// source=[Intention] "-(++)->" target=[Intention]
protected class MakeContribution_Group extends GroupToken {
	
	public MakeContribution_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMakeContributionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MakeContribution_TargetAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMakeContributionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// source=[Intention]
protected class MakeContribution_SourceAssignment_0 extends AssignmentToken  {
	
	public MakeContribution_SourceAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMakeContributionAccess().getSourceAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("source",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMakeContributionAccess().getSourceIntentionCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getMakeContributionAccess().getSourceIntentionCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "-(++)->"
protected class MakeContribution_HyphenMinusLeftParenthesisPlusSignPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1 extends KeywordToken  {
	
	public MakeContribution_HyphenMinusLeftParenthesisPlusSignPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMakeContributionAccess().getHyphenMinusLeftParenthesisPlusSignPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MakeContribution_SourceAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// target=[Intention]
protected class MakeContribution_TargetAssignment_2 extends AssignmentToken  {
	
	public MakeContribution_TargetAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMakeContributionAccess().getTargetAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MakeContribution_HyphenMinusLeftParenthesisPlusSignPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMakeContributionAccess().getTargetIntentionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getMakeContributionAccess().getTargetIntentionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule MakeContribution ****************/


/************ begin Rule HurtContribution ****************
 *
 * HurtContribution:
 *   source=[Intention] "-(-)->" target=[Intention];
 *
 **/

// source=[Intention] "-(-)->" target=[Intention]
protected class HurtContribution_Group extends GroupToken {
	
	public HurtContribution_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getHurtContributionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HurtContribution_TargetAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getHurtContributionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// source=[Intention]
protected class HurtContribution_SourceAssignment_0 extends AssignmentToken  {
	
	public HurtContribution_SourceAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHurtContributionAccess().getSourceAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("source",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHurtContributionAccess().getSourceIntentionCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getHurtContributionAccess().getSourceIntentionCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "-(-)->"
protected class HurtContribution_HyphenMinusLeftParenthesisHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1 extends KeywordToken  {
	
	public HurtContribution_HyphenMinusLeftParenthesisHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getHurtContributionAccess().getHyphenMinusLeftParenthesisHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HurtContribution_SourceAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// target=[Intention]
protected class HurtContribution_TargetAssignment_2 extends AssignmentToken  {
	
	public HurtContribution_TargetAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getHurtContributionAccess().getTargetAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new HurtContribution_HyphenMinusLeftParenthesisHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHurtContributionAccess().getTargetIntentionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getHurtContributionAccess().getTargetIntentionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule HurtContribution ****************/


/************ begin Rule BreakContribution ****************
 *
 * BreakContribution:
 *   source=[Intention] "-(--)->" target=[Intention];
 *
 **/

// source=[Intention] "-(--)->" target=[Intention]
protected class BreakContribution_Group extends GroupToken {
	
	public BreakContribution_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBreakContributionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakContribution_TargetAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBreakContributionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// source=[Intention]
protected class BreakContribution_SourceAssignment_0 extends AssignmentToken  {
	
	public BreakContribution_SourceAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBreakContributionAccess().getSourceAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("source",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBreakContributionAccess().getSourceIntentionCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getBreakContributionAccess().getSourceIntentionCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "-(--)->"
protected class BreakContribution_HyphenMinusLeftParenthesisHyphenMinusHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1 extends KeywordToken  {
	
	public BreakContribution_HyphenMinusLeftParenthesisHyphenMinusHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBreakContributionAccess().getHyphenMinusLeftParenthesisHyphenMinusHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakContribution_SourceAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// target=[Intention]
protected class BreakContribution_TargetAssignment_2 extends AssignmentToken  {
	
	public BreakContribution_TargetAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBreakContributionAccess().getTargetAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BreakContribution_HyphenMinusLeftParenthesisHyphenMinusHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBreakContributionAccess().getTargetIntentionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getBreakContributionAccess().getTargetIntentionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule BreakContribution ****************/

}
