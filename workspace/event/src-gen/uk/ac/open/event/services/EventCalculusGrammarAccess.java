/*
 * generated by Xtext
 */
package uk.ac.open.event.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class EventCalculusGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_1_0_0 = (RuleCall)cDeclarationsAssignment_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		
		//Model:
		//	imports+=Import* (declarations+=Declaration | statements+=Statement)*;
		@Override public ParserRule getRule() { return rule; }

		//imports+=Import* (declarations+=Declaration | statements+=Statement)*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//(declarations+=Declaration | statements+=Statement)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//declarations+=Declaration
		public Assignment getDeclarationsAssignment_1_0() { return cDeclarationsAssignment_1_0; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_1_0_0() { return cDeclarationsDeclarationParserRuleCall_1_0_0; }

		//statements+=Statement
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_1_0() { return cStatementsStatementParserRuleCall_1_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	'load'
		//	importURI=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'load' importURI=STRING
		public Group getGroup() { return cGroup; }

		//'load'
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeANNOTATION_TYPEEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cValueAssignment_3_0.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cValueNotKeyword_3_1_0 = (Keyword)cValueAssignment_3_1.eContents().get(0);
		
		//Annotation:
		//	';' '#' type=ANNOTATION_TYPE (value=STRING | value='not')?;
		@Override public ParserRule getRule() { return rule; }

		//';' '#' type=ANNOTATION_TYPE (value=STRING | value='not')?
		public Group getGroup() { return cGroup; }

		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }

		//'#'
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//type=ANNOTATION_TYPE
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ANNOTATION_TYPE
		public RuleCall getTypeANNOTATION_TYPEEnumRuleCall_2_0() { return cTypeANNOTATION_TYPEEnumRuleCall_2_0; }

		//(value=STRING | value='not')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//value=STRING
		public Assignment getValueAssignment_3_0() { return cValueAssignment_3_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0_0() { return cValueSTRINGTerminalRuleCall_3_0_0; }

		//value='not'
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//'not'
		public Keyword getValueNotKeyword_3_1_0() { return cValueNotKeyword_3_1_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefSortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefOptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefCompletionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDefNonInertiaParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDefXorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDefMutexParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Declaration:
		//	DefSort | DefRange | DefOption | DefCompletion | DefNonInertia | DefXor | DefMutex;
		@Override public ParserRule getRule() { return rule; }

		//DefSort | DefRange | DefOption | DefCompletion | DefNonInertia | DefXor | DefMutex
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefSort
		public RuleCall getDefSortParserRuleCall_0() { return cDefSortParserRuleCall_0; }

		//DefRange
		public RuleCall getDefRangeParserRuleCall_1() { return cDefRangeParserRuleCall_1; }

		//DefOption
		public RuleCall getDefOptionParserRuleCall_2() { return cDefOptionParserRuleCall_2; }

		//DefCompletion
		public RuleCall getDefCompletionParserRuleCall_3() { return cDefCompletionParserRuleCall_3; }

		//DefNonInertia
		public RuleCall getDefNonInertiaParserRuleCall_4() { return cDefNonInertiaParserRuleCall_4; }

		//DefXor
		public RuleCall getDefXorParserRuleCall_5() { return cDefXorParserRuleCall_5; }

		//DefMutex
		public RuleCall getDefMutexParserRuleCall_6() { return cDefMutexParserRuleCall_6; }
	}

	public class DefinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Defines");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefSortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Defines:
		//	DefSort | Definition;
		@Override public ParserRule getRule() { return rule; }

		//DefSort | Definition
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefSort
		public RuleCall getDefSortParserRuleCall_0() { return cDefSortParserRuleCall_0; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_1() { return cDefinitionParserRuleCall_1; }
	}

	public class DefSortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.DefSort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cReifiedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cReifiedReifiedKeyword_1_0 = (Keyword)cReifiedAssignment_1.eContents().get(0);
		private final Keyword cSortKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		
		//DefSort:
		//	annotations+=Annotation*
		//	reified='reified'? 'sort' name=ID (':' type=ID)?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* reified='reified'? 'sort' name=ID (':' type=ID)?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//reified='reified'?
		public Assignment getReifiedAssignment_1() { return cReifiedAssignment_1; }

		//'reified'
		public Keyword getReifiedReifiedKeyword_1_0() { return cReifiedReifiedKeyword_1_0; }

		//'sort'
		public Keyword getSortKeyword_2() { return cSortKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//(':' type=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//type=ID
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_4_1_0() { return cTypeIDTerminalRuleCall_4_1_0; }
	}

	public class DefRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.DefRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameDefSortCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameDefSortIDTerminalRuleCall_2_0_1 = (RuleCall)cNameDefSortCrossReference_2_0.eContents().get(1);
		private final Assignment cMinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinINTTerminalRuleCall_3_0 = (RuleCall)cMinAssignment_3.eContents().get(0);
		private final Assignment cMaxAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMaxINTTerminalRuleCall_4_0 = (RuleCall)cMaxAssignment_4.eContents().get(0);
		
		//DefRange:
		//	annotations+=Annotation*
		//	'range' name=[DefSort] min=INT max=INT;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* 'range' name=[DefSort] min=INT max=INT
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//'range'
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }

		//name=[DefSort]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//[DefSort]
		public CrossReference getNameDefSortCrossReference_2_0() { return cNameDefSortCrossReference_2_0; }

		//ID
		public RuleCall getNameDefSortIDTerminalRuleCall_2_0_1() { return cNameDefSortIDTerminalRuleCall_2_0_1; }

		//min=INT
		public Assignment getMinAssignment_3() { return cMinAssignment_3; }

		//INT
		public RuleCall getMinINTTerminalRuleCall_3_0() { return cMinINTTerminalRuleCall_3_0; }

		//max=INT
		public Assignment getMaxAssignment_4() { return cMaxAssignment_4; }

		//INT
		public RuleCall getMaxINTTerminalRuleCall_4_0() { return cMaxINTTerminalRuleCall_4_0; }
	}

	public class DefOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.DefOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cOptionKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0_1_0 = (RuleCall)cNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cValueAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_1_0_2_0 = (RuleCall)cValueAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cOptionKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Assignment cValue2Assignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cValue2IDTerminalRuleCall_1_1_2_0 = (RuleCall)cValue2Assignment_1_1_2.eContents().get(0);
		
		//DefOption:
		//	annotations+=Annotation* ('option' name=ID value=INT
		//	| 'option' name=ID value2=ID);
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* ('option' name=ID value=INT | 'option' name=ID value2=ID)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//'option' name=ID value=INT | 'option' name=ID value2=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'option' name=ID value=INT
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'option'
		public Keyword getOptionKeyword_1_0_0() { return cOptionKeyword_1_0_0; }

		//name=ID
		public Assignment getNameAssignment_1_0_1() { return cNameAssignment_1_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_1_0() { return cNameIDTerminalRuleCall_1_0_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_0_2() { return cValueAssignment_1_0_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0_2_0() { return cValueINTTerminalRuleCall_1_0_2_0; }

		//'option' name=ID value2=ID
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'option'
		public Keyword getOptionKeyword_1_1_0() { return cOptionKeyword_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_1_0() { return cNameIDTerminalRuleCall_1_1_1_0; }

		//value2=ID
		public Assignment getValue2Assignment_1_1_2() { return cValue2Assignment_1_1_2; }

		//ID
		public RuleCall getValue2IDTerminalRuleCall_1_1_2_0() { return cValue2IDTerminalRuleCall_1_1_2_0; }
	}

	public class DefCompletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.DefCompletion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cCompletionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeLabelTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLabelDefinitionCrossReference_3_0 = (CrossReference)cLabelAssignment_3.eContents().get(0);
		private final RuleCall cLabelDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cLabelDefinitionCrossReference_3_0.eContents().get(1);
		
		//DefCompletion:
		//	annotations+=Annotation*
		//	'completion' type=LabelType? label=[Definition];
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* 'completion' type=LabelType? label=[Definition]
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//'completion'
		public Keyword getCompletionKeyword_1() { return cCompletionKeyword_1; }

		//type=LabelType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//LabelType
		public RuleCall getTypeLabelTypeEnumRuleCall_2_0() { return cTypeLabelTypeEnumRuleCall_2_0; }

		//label=[Definition]
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//[Definition]
		public CrossReference getLabelDefinitionCrossReference_3_0() { return cLabelDefinitionCrossReference_3_0; }

		//ID
		public RuleCall getLabelDefinitionIDTerminalRuleCall_3_0_1() { return cLabelDefinitionIDTerminalRuleCall_3_0_1; }
	}

	public class DefNonInertiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.DefNonInertia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cNoninertialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNamesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNamesDefinitionCrossReference_2_0 = (CrossReference)cNamesAssignment_2.eContents().get(0);
		private final RuleCall cNamesDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cNamesDefinitionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNamesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cNamesDefinitionCrossReference_3_1_0 = (CrossReference)cNamesAssignment_3_1.eContents().get(0);
		private final RuleCall cNamesDefinitionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cNamesDefinitionCrossReference_3_1_0.eContents().get(1);
		
		//DefNonInertia:
		//	annotations+=Annotation*
		//	'noninertial' names+=[Definition] (',' names+=[Definition])*;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* 'noninertial' names+=[Definition] (',' names+=[Definition])*
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//'noninertial'
		public Keyword getNoninertialKeyword_1() { return cNoninertialKeyword_1; }

		//names+=[Definition]
		public Assignment getNamesAssignment_2() { return cNamesAssignment_2; }

		//[Definition]
		public CrossReference getNamesDefinitionCrossReference_2_0() { return cNamesDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getNamesDefinitionIDTerminalRuleCall_2_0_1() { return cNamesDefinitionIDTerminalRuleCall_2_0_1; }

		//(',' names+=[Definition])*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//names+=[Definition]
		public Assignment getNamesAssignment_3_1() { return cNamesAssignment_3_1; }

		//[Definition]
		public CrossReference getNamesDefinitionCrossReference_3_1_0() { return cNamesDefinitionCrossReference_3_1_0; }

		//ID
		public RuleCall getNamesDefinitionIDTerminalRuleCall_3_1_0_1() { return cNamesDefinitionIDTerminalRuleCall_3_1_0_1; }
	}

	public class DefXorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.DefXor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cXorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNamesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNamesDefinitionCrossReference_2_0 = (CrossReference)cNamesAssignment_2.eContents().get(0);
		private final RuleCall cNamesDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cNamesDefinitionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNamesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cNamesDefinitionCrossReference_3_1_0 = (CrossReference)cNamesAssignment_3_1.eContents().get(0);
		private final RuleCall cNamesDefinitionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cNamesDefinitionCrossReference_3_1_0.eContents().get(1);
		
		//DefXor:
		//	annotations+=Annotation*
		//	'xor' names+=[Definition] (',' names+=[Definition])*;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* 'xor' names+=[Definition] (',' names+=[Definition])*
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//'xor'
		public Keyword getXorKeyword_1() { return cXorKeyword_1; }

		//names+=[Definition]
		public Assignment getNamesAssignment_2() { return cNamesAssignment_2; }

		//[Definition]
		public CrossReference getNamesDefinitionCrossReference_2_0() { return cNamesDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getNamesDefinitionIDTerminalRuleCall_2_0_1() { return cNamesDefinitionIDTerminalRuleCall_2_0_1; }

		//(',' names+=[Definition])*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//names+=[Definition]
		public Assignment getNamesAssignment_3_1() { return cNamesAssignment_3_1; }

		//[Definition]
		public CrossReference getNamesDefinitionCrossReference_3_1_0() { return cNamesDefinitionCrossReference_3_1_0; }

		//ID
		public RuleCall getNamesDefinitionIDTerminalRuleCall_3_1_0_1() { return cNamesDefinitionIDTerminalRuleCall_3_1_0_1; }
	}

	public class DefMutexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.DefMutex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cMutexKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNamesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNamesDefinitionCrossReference_2_0 = (CrossReference)cNamesAssignment_2.eContents().get(0);
		private final RuleCall cNamesDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cNamesDefinitionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNamesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cNamesDefinitionCrossReference_3_1_0 = (CrossReference)cNamesAssignment_3_1.eContents().get(0);
		private final RuleCall cNamesDefinitionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cNamesDefinitionCrossReference_3_1_0.eContents().get(1);
		
		//DefMutex:
		//	annotations+=Annotation*
		//	'mutex' names+=[Definition] (',' names+=[Definition])*;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* 'mutex' names+=[Definition] (',' names+=[Definition])*
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//'mutex'
		public Keyword getMutexKeyword_1() { return cMutexKeyword_1; }

		//names+=[Definition]
		public Assignment getNamesAssignment_2() { return cNamesAssignment_2; }

		//[Definition]
		public CrossReference getNamesDefinitionCrossReference_2_0() { return cNamesDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getNamesDefinitionIDTerminalRuleCall_2_0_1() { return cNamesDefinitionIDTerminalRuleCall_2_0_1; }

		//(',' names+=[Definition])*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//names+=[Definition]
		public Assignment getNamesAssignment_3_1() { return cNamesAssignment_3_1; }

		//[Definition]
		public CrossReference getNamesDefinitionCrossReference_3_1_0() { return cNamesDefinitionCrossReference_3_1_0; }

		//ID
		public RuleCall getNamesDefinitionIDTerminalRuleCall_3_1_0_1() { return cNamesDefinitionIDTerminalRuleCall_3_1_0_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSortDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabeledExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	SortDefinition | LabeledExpression;
		@Override public ParserRule getRule() { return rule; }

		//SortDefinition | LabeledExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SortDefinition
		public RuleCall getSortDefinitionParserRuleCall_0() { return cSortDefinitionParserRuleCall_0; }

		//LabeledExpression
		public RuleCall getLabeledExpressionParserRuleCall_1() { return cLabeledExpressionParserRuleCall_1; }
	}

	public class LabeledExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.LabeledExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameLabelTypeEnumRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LabeledExpression:
		//	annotations+=Annotation* (name=LabelType ':')?
		//	expr=Expression '.';
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* (name=LabelType ':')? expr=Expression '.'
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//(name=LabelType ':')?
		public Group getGroup_1() { return cGroup_1; }

		//name=LabelType
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//LabelType
		public RuleCall getNameLabelTypeEnumRuleCall_1_0_0() { return cNameLabelTypeEnumRuleCall_1_0_0; }

		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}

	public class SortDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.SortDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cSortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSortDefSortCrossReference_1_0 = (CrossReference)cSortAssignment_1.eContents().get(0);
		private final RuleCall cSortDefSortIDTerminalRuleCall_1_0_1 = (RuleCall)cSortDefSortCrossReference_1_0.eContents().get(1);
		private final Assignment cDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefinitionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_3_1_0 = (RuleCall)cDefinitionsAssignment_3_1.eContents().get(0);
		
		//SortDefinition:
		//	annotations+=Annotation*
		//	sort=[DefSort] definitions+=Definition (',' definitions+=Definition)*;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* sort=[DefSort] definitions+=Definition (',' definitions+=Definition)*
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//sort=[DefSort]
		public Assignment getSortAssignment_1() { return cSortAssignment_1; }

		//[DefSort]
		public CrossReference getSortDefSortCrossReference_1_0() { return cSortDefSortCrossReference_1_0; }

		//ID
		public RuleCall getSortDefSortIDTerminalRuleCall_1_0_1() { return cSortDefSortIDTerminalRuleCall_1_0_1; }

		//definitions+=Definition
		public Assignment getDefinitionsAssignment_2() { return cDefinitionsAssignment_2; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_2_0() { return cDefinitionsDefinitionParserRuleCall_2_0; }

		//(',' definitions+=Definition)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//definitions+=Definition
		public Assignment getDefinitionsAssignment_3_1() { return cDefinitionsAssignment_3_1; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_3_1_0() { return cDefinitionsDefinitionParserRuleCall_3_1_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cArgsDefinesCrossReference_1_1_0 = (CrossReference)cArgsAssignment_1_1.eContents().get(0);
		private final RuleCall cArgsDefinesIDTerminalRuleCall_1_1_0_1 = (RuleCall)cArgsDefinesCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cArgsDefinesCrossReference_1_2_1_0 = (CrossReference)cArgsAssignment_1_2_1.eContents().get(0);
		private final RuleCall cArgsDefinesIDTerminalRuleCall_1_2_1_0_1 = (RuleCall)cArgsDefinesCrossReference_1_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReturnAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cReturnDefinesCrossReference_2_1_0 = (CrossReference)cReturnAssignment_2_1.eContents().get(0);
		private final RuleCall cReturnDefinesIDTerminalRuleCall_2_1_0_1 = (RuleCall)cReturnDefinesCrossReference_2_1_0.eContents().get(1);
		
		//Definition:
		//	name=ID ('(' args+=[Defines]? (',' args+=[Defines])* ')')? (':' return+=[Defines])?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ('(' args+=[Defines]? (',' args+=[Defines])* ')')? (':' return+=[Defines])?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//('(' args+=[Defines]? (',' args+=[Defines])* ')')?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//args+=[Defines]?
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//[Defines]
		public CrossReference getArgsDefinesCrossReference_1_1_0() { return cArgsDefinesCrossReference_1_1_0; }

		//ID
		public RuleCall getArgsDefinesIDTerminalRuleCall_1_1_0_1() { return cArgsDefinesIDTerminalRuleCall_1_1_0_1; }

		//(',' args+=[Defines])*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//args+=[Defines]
		public Assignment getArgsAssignment_1_2_1() { return cArgsAssignment_1_2_1; }

		//[Defines]
		public CrossReference getArgsDefinesCrossReference_1_2_1_0() { return cArgsDefinesCrossReference_1_2_1_0; }

		//ID
		public RuleCall getArgsDefinesIDTerminalRuleCall_1_2_1_0_1() { return cArgsDefinesIDTerminalRuleCall_1_2_1_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//(':' return+=[Defines])?
		public Group getGroup_2() { return cGroup_2; }

		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//return+=[Defines]
		public Assignment getReturnAssignment_2_1() { return cReturnAssignment_2_1; }

		//[Defines]
		public CrossReference getReturnDefinesCrossReference_2_1_0() { return cReturnDefinesCrossReference_2_1_0; }

		//ID
		public RuleCall getReturnDefinesIDTerminalRuleCall_2_1_0_1() { return cReturnDefinesIDTerminalRuleCall_2_1_0_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprAssignmentOpParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cQualifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cQualifiersQualifierParserRuleCall_1_0_0 = (RuleCall)cQualifiersAssignment_1_0.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//Expression:
		//	expr=AssignmentOp | qualifiers=Qualifier expr=Expression;
		@Override public ParserRule getRule() { return rule; }

		//expr=AssignmentOp | qualifiers=Qualifier expr=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//expr=AssignmentOp
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//AssignmentOp
		public RuleCall getExprAssignmentOpParserRuleCall_0_0() { return cExprAssignmentOpParserRuleCall_0_0; }

		//qualifiers=Qualifier expr=Expression
		public Group getGroup_1() { return cGroup_1; }

		//qualifiers=Qualifier
		public Assignment getQualifiersAssignment_1_0() { return cQualifiersAssignment_1_0; }

		//Qualifier
		public RuleCall getQualifiersQualifierParserRuleCall_1_0_0() { return cQualifiersQualifierParserRuleCall_1_0_0; }

		//expr=Expression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_1_0() { return cExprExpressionParserRuleCall_1_1_0; }
	}

	public class QualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Qualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExistsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Qualifier:
		//	Exists | Forall;
		@Override public ParserRule getRule() { return rule; }

		//Exists | Forall
		public Alternatives getAlternatives() { return cAlternatives; }

		//Exists
		public RuleCall getExistsParserRuleCall_0() { return cExistsParserRuleCall_0; }

		//Forall
		public RuleCall getForallParserRuleCall_1() { return cForallParserRuleCall_1; }
	}

	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNamesDefinesCrossReference_0_0 = (CrossReference)cNamesAssignment_0.eContents().get(0);
		private final RuleCall cNamesDefinesIDTerminalRuleCall_0_0_1 = (RuleCall)cNamesDefinesCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cNamesDefinesCrossReference_1_1_0 = (CrossReference)cNamesAssignment_1_1.eContents().get(0);
		private final RuleCall cNamesDefinesIDTerminalRuleCall_1_1_0_1 = (RuleCall)cNamesDefinesCrossReference_1_1_0.eContents().get(1);
		
		//Parameters:
		//	names+=[Defines] ("," names+=[Defines])*;
		@Override public ParserRule getRule() { return rule; }

		//names+=[Defines] ("," names+=[Defines])*
		public Group getGroup() { return cGroup; }

		//names+=[Defines]
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }

		//[Defines]
		public CrossReference getNamesDefinesCrossReference_0_0() { return cNamesDefinesCrossReference_0_0; }

		//ID
		public RuleCall getNamesDefinesIDTerminalRuleCall_0_0_1() { return cNamesDefinesIDTerminalRuleCall_0_0_1; }

		//("," names+=[Defines])*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//names+=[Defines]
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }

		//[Defines]
		public CrossReference getNamesDefinesCrossReference_1_1_0() { return cNamesDefinesCrossReference_1_1_0; }

		//ID
		public RuleCall getNamesDefinesIDTerminalRuleCall_1_1_0_1() { return cNamesDefinesIDTerminalRuleCall_1_1_0_1; }
	}

	public class ExistsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Exists");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpUnaryOpEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParametersParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Exists Qualifier:
		//	op=UnaryOp? '{' parameters=Parameters '}';
		@Override public ParserRule getRule() { return rule; }

		//op=UnaryOp? '{' parameters=Parameters '}'
		public Group getGroup() { return cGroup; }

		//op=UnaryOp?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//UnaryOp
		public RuleCall getOpUnaryOpEnumRuleCall_0_0() { return cOpUnaryOpEnumRuleCall_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//parameters=Parameters
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//Parameters
		public RuleCall getParametersParametersParserRuleCall_2_0() { return cParametersParametersParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ForallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Forall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpUnaryOpEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParametersParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Forall Qualifier:
		//	op=UnaryOp? '[' parameters=Parameters ']';
		@Override public ParserRule getRule() { return rule; }

		//op=UnaryOp? '[' parameters=Parameters ']'
		public Group getGroup() { return cGroup; }

		//op=UnaryOp?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//UnaryOp
		public RuleCall getOpUnaryOpEnumRuleCall_0_0() { return cOpUnaryOpEnumRuleCall_0_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//parameters=Parameters
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//Parameters
		public RuleCall getParametersParametersParserRuleCall_2_0() { return cParametersParametersParserRuleCall_2_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class AssignmentOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.AssignmentOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAssignPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cAssignMinLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cQAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQQualifierParserRuleCall_1_1_0 = (RuleCall)cQAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AssignmentOp Expression:
		//	OrExp (({AssignPlus.left=current} '->' | {AssignMin.left=current} '<->') q=Qualifier? right=OrExp)?;
		@Override public ParserRule getRule() { return rule; }

		//OrExp (({AssignPlus.left=current} '->' | {AssignMin.left=current} '<->') q=Qualifier? right=OrExp)?
		public Group getGroup() { return cGroup; }

		//OrExp
		public RuleCall getOrExpParserRuleCall_0() { return cOrExpParserRuleCall_0; }

		//(({AssignPlus.left=current} '->' | {AssignMin.left=current} '<->') q=Qualifier? right=OrExp)?
		public Group getGroup_1() { return cGroup_1; }

		//{AssignPlus.left=current} '->' | {AssignMin.left=current} '<->'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{AssignPlus.left=current} '->'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{AssignPlus.left=current}
		public Action getAssignPlusLeftAction_1_0_0_0() { return cAssignPlusLeftAction_1_0_0_0; }

		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_0_1() { return cHyphenMinusGreaterThanSignKeyword_1_0_0_1; }

		//{AssignMin.left=current} '<->'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{AssignMin.left=current}
		public Action getAssignMinLeftAction_1_0_1_0() { return cAssignMinLeftAction_1_0_1_0; }

		//'<->'
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1; }

		//q=Qualifier?
		public Assignment getQAssignment_1_1() { return cQAssignment_1_1; }

		//Qualifier
		public RuleCall getQQualifierParserRuleCall_1_1_0() { return cQQualifierParserRuleCall_1_1_0; }

		//right=OrExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//OrExp
		public RuleCall getRightOrExpParserRuleCall_1_2_0() { return cRightOrExpParserRuleCall_1_2_0; }
	}

	public class OrExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.OrExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cQAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cQQualifierParserRuleCall_1_2_0 = (RuleCall)cQAssignment_1_2.eContents().get(0);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightAndExpParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//OrExp Expression:
		//	AndExp ({Or.left=current} '|' q=Qualifier? right=AndExp)*;
		@Override public ParserRule getRule() { return rule; }

		//AndExp ({Or.left=current} '|' q=Qualifier? right=AndExp)*
		public Group getGroup() { return cGroup; }

		//AndExp
		public RuleCall getAndExpParserRuleCall_0() { return cAndExpParserRuleCall_0; }

		//({Or.left=current} '|' q=Qualifier? right=AndExp)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//'|'
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//q=Qualifier?
		public Assignment getQAssignment_1_2() { return cQAssignment_1_2; }

		//Qualifier
		public RuleCall getQQualifierParserRuleCall_1_2_0() { return cQQualifierParserRuleCall_1_2_0; }

		//right=AndExp
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }

		//AndExp
		public RuleCall getRightAndExpParserRuleCall_1_3_0() { return cRightAndExpParserRuleCall_1_3_0; }
	}

	public class AndExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.AndExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cQAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cQQualifierParserRuleCall_1_2_0 = (RuleCall)cQAssignment_1_2.eContents().get(0);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightRelationalParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//AndExp Expression:
		//	Relational ({And.left=current} '&' q=Qualifier? right=Relational)*;
		@Override public ParserRule getRule() { return rule; }

		//Relational ({And.left=current} '&' q=Qualifier? right=Relational)*
		public Group getGroup() { return cGroup; }

		//Relational
		public RuleCall getRelationalParserRuleCall_0() { return cRelationalParserRuleCall_0; }

		//({And.left=current} '&' q=Qualifier? right=Relational)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//'&'
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }

		//q=Qualifier?
		public Assignment getQAssignment_1_2() { return cQAssignment_1_2; }

		//Qualifier
		public RuleCall getQQualifierParserRuleCall_1_2_0() { return cQQualifierParserRuleCall_1_2_0; }

		//right=Relational
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }

		//Relational
		public RuleCall getRightRelationalParserRuleCall_1_3_0() { return cRightRelationalParserRuleCall_1_3_0; }
	}

	public class RelationalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Relational");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cRelNotEqLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cRelEqEqLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cRelLtEqLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cRelGtEqLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cRelEqLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Action cRelLtLeftAction_1_0_5_0 = (Action)cGroup_1_0_5.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_5_1 = (Keyword)cGroup_1_0_5.eContents().get(1);
		private final Group cGroup_1_0_6 = (Group)cAlternatives_1_0.eContents().get(6);
		private final Action cRelGtLeftAction_1_0_6_0 = (Action)cGroup_1_0_6.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_6_1 = (Keyword)cGroup_1_0_6.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Relational Expression:
		//	Addition (({RelNotEq.left=current} '!=' | {RelEqEq.left=current} '==' | {RelLtEq.left=current} '>=' |
		//	{RelGtEq.left=current} '<=' | {RelEq.left=current} '=' | {RelLt.left=current} '<' | {RelGt.left=current} '>')
		//	right=Addition)?;
		@Override public ParserRule getRule() { return rule; }

		//Addition (({RelNotEq.left=current} '!=' | {RelEqEq.left=current} '==' | {RelLtEq.left=current} '>=' |
		//{RelGtEq.left=current} '<=' | {RelEq.left=current} '=' | {RelLt.left=current} '<' | {RelGt.left=current} '>')
		//right=Addition)?
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//(({RelNotEq.left=current} '!=' | {RelEqEq.left=current} '==' | {RelLtEq.left=current} '>=' | {RelGtEq.left=current} '<='
		//| {RelEq.left=current} '=' | {RelLt.left=current} '<' | {RelGt.left=current} '>') right=Addition)?
		public Group getGroup_1() { return cGroup_1; }

		//{RelNotEq.left=current} '!=' | {RelEqEq.left=current} '==' | {RelLtEq.left=current} '>=' | {RelGtEq.left=current} '<=' |
		//{RelEq.left=current} '=' | {RelLt.left=current} '<' | {RelGt.left=current} '>'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{RelNotEq.left=current} '!='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{RelNotEq.left=current}
		public Action getRelNotEqLeftAction_1_0_0_0() { return cRelNotEqLeftAction_1_0_0_0; }

		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_0_1; }

		//{RelEqEq.left=current} '=='
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{RelEqEq.left=current}
		public Action getRelEqEqLeftAction_1_0_1_0() { return cRelEqEqLeftAction_1_0_1_0; }

		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_1_1() { return cEqualsSignEqualsSignKeyword_1_0_1_1; }

		//{RelLtEq.left=current} '>='
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{RelLtEq.left=current}
		public Action getRelLtEqLeftAction_1_0_2_0() { return cRelLtEqLeftAction_1_0_2_0; }

		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_2_1() { return cGreaterThanSignEqualsSignKeyword_1_0_2_1; }

		//{RelGtEq.left=current} '<='
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{RelGtEq.left=current}
		public Action getRelGtEqLeftAction_1_0_3_0() { return cRelGtEqLeftAction_1_0_3_0; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_3_1() { return cLessThanSignEqualsSignKeyword_1_0_3_1; }

		//{RelEq.left=current} '='
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//{RelEq.left=current}
		public Action getRelEqLeftAction_1_0_4_0() { return cRelEqLeftAction_1_0_4_0; }

		//'='
		public Keyword getEqualsSignKeyword_1_0_4_1() { return cEqualsSignKeyword_1_0_4_1; }

		//{RelLt.left=current} '<'
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//{RelLt.left=current}
		public Action getRelLtLeftAction_1_0_5_0() { return cRelLtLeftAction_1_0_5_0; }

		//'<'
		public Keyword getLessThanSignKeyword_1_0_5_1() { return cLessThanSignKeyword_1_0_5_1; }

		//{RelGt.left=current} '>'
		public Group getGroup_1_0_6() { return cGroup_1_0_6; }

		//{RelGt.left=current}
		public Action getRelGtLeftAction_1_0_6_0() { return cRelGtLeftAction_1_0_6_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_6_1() { return cGreaterThanSignKeyword_1_0_6_1; }

		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition Expression:
		//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }

		//Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} '+' | {Minus.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPowerParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication Expression:
		//	Power (({Multi.left=current} '*' | {Div.left=current} '/') right=Power)*;
		@Override public ParserRule getRule() { return rule; }

		//Power (({Multi.left=current} '*' | {Div.left=current} '/') right=Power)*
		public Group getGroup() { return cGroup; }

		//Power
		public RuleCall getPowerParserRuleCall_0() { return cPowerParserRuleCall_0; }

		//(({Multi.left=current} '*' | {Div.left=current} '/') right=Power)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current} '*' | {Div.left=current} '/'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multi.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }

		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Div.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }

		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=Power
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Power
		public RuleCall getRightPowerParserRuleCall_1_1_0() { return cRightPowerParserRuleCall_1_1_0; }
	}

	public class PowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.Power");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cPowLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Power Expression:
		//	UnaryExpr (({Pow.left=current} '^') right=UnaryExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//UnaryExpr (({Pow.left=current} '^') right=UnaryExpr)*
		public Group getGroup() { return cGroup; }

		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }

		//(({Pow.left=current} '^') right=UnaryExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//{Pow.left=current} '^'
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Pow.left=current}
		public Action getPowLeftAction_1_0_0() { return cPowLeftAction_1_0_0; }

		//'^'
		public Keyword getCircumflexAccentKeyword_1_0_1() { return cCircumflexAccentKeyword_1_0_1; }

		//right=UnaryExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryExpr
		public RuleCall getRightUnaryExprParserRuleCall_1_1_0() { return cRightUnaryExprParserRuleCall_1_1_0; }
	}

	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.UnaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpUnaryOpEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightPrePrimaryExprParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//UnaryExpr Expression:
		//	op=UnaryOp? right=PrePrimaryExpr;
		@Override public ParserRule getRule() { return rule; }

		//op=UnaryOp? right=PrePrimaryExpr
		public Group getGroup() { return cGroup; }

		//op=UnaryOp?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//UnaryOp
		public RuleCall getOpUnaryOpEnumRuleCall_0_0() { return cOpUnaryOpEnumRuleCall_0_0; }

		//right=PrePrimaryExpr
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//PrePrimaryExpr
		public RuleCall getRightPrePrimaryExprParserRuleCall_1_0() { return cRightPrePrimaryExprParserRuleCall_1_0; }
	}

	public class PrePrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.PrePrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_3_1_0 = (RuleCall)cNAssignment_3_1.eContents().get(0);
		
		//PrePrimaryExpr Expression:
		//	TerminalExpression | AbstractRef | '(' Expression ')' | '-' n=INT;
		@Override public ParserRule getRule() { return rule; }

		//TerminalExpression | AbstractRef | '(' Expression ')' | '-' n=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//AbstractRef
		public RuleCall getAbstractRefParserRuleCall_1() { return cAbstractRefParserRuleCall_1; }

		//'(' Expression ')'
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//'-' n=INT
		public Group getGroup_3() { return cGroup_3; }

		//'-'
		public Keyword getHyphenMinusKeyword_3_0() { return cHyphenMinusKeyword_3_0; }

		//n=INT
		public Assignment getNAssignment_3_1() { return cNAssignment_3_1; }

		//INT
		public RuleCall getNINTTerminalRuleCall_3_1_0() { return cNINTTerminalRuleCall_3_1_0; }
	}

	public class AbstractRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.AbstractRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefineAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDefineDefinesCrossReference_0_0 = (CrossReference)cDefineAssignment_0.eContents().get(0);
		private final RuleCall cDefineDefinesIDTerminalRuleCall_0_0_1 = (RuleCall)cDefineDefinesCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFunctionRefFuncAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_1_1_0 = (RuleCall)cArgsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cArgsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_1_2_1_0 = (RuleCall)cArgsAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//AbstractRef Expression:
		//	define=[Defines] ({FunctionRef.func=current} ('(' args+=Expression? (',' args+=Expression)* ')'))?;
		@Override public ParserRule getRule() { return rule; }

		//define=[Defines] ({FunctionRef.func=current} ('(' args+=Expression? (',' args+=Expression)* ')'))?
		public Group getGroup() { return cGroup; }

		//define=[Defines]
		public Assignment getDefineAssignment_0() { return cDefineAssignment_0; }

		//[Defines]
		public CrossReference getDefineDefinesCrossReference_0_0() { return cDefineDefinesCrossReference_0_0; }

		//ID
		public RuleCall getDefineDefinesIDTerminalRuleCall_0_0_1() { return cDefineDefinesIDTerminalRuleCall_0_0_1; }

		//({FunctionRef.func=current} ('(' args+=Expression? (',' args+=Expression)* ')'))?
		public Group getGroup_1() { return cGroup_1; }

		//{FunctionRef.func=current}
		public Action getFunctionRefFuncAction_1_0() { return cFunctionRefFuncAction_1_0; }

		//'(' args+=Expression? (',' args+=Expression)* ')'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//args+=Expression?
		public Assignment getArgsAssignment_1_1_1() { return cArgsAssignment_1_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_1_1_0() { return cArgsExpressionParserRuleCall_1_1_1_0; }

		//(',' args+=Expression)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//','
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }

		//args+=Expression
		public Assignment getArgsAssignment_1_1_2_1() { return cArgsAssignment_1_1_2_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_1_2_1_0() { return cArgsExpressionParserRuleCall_1_1_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_1_3() { return cRightParenthesisKeyword_1_1_3; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//TerminalExpression:
		//	{IntLiteral} value=INT
		//	| {StringLiteral} value=STRING | {BooleanLiteral} value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }

		//{IntLiteral} value=INT | {StringLiteral} value=STRING | {BooleanLiteral} value=BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntLiteral} value=INT
		public Group getGroup_0() { return cGroup_0; }

		//{IntLiteral}
		public Action getIntLiteralAction_0_0() { return cIntLiteralAction_0_0; }

		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }

		//{StringLiteral} value=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{StringLiteral}
		public Action getStringLiteralAction_1_0() { return cStringLiteralAction_1_0; }

		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }

		//{BooleanLiteral} value=BOOLEAN
		public Group getGroup_2() { return cGroup_2; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_2_0() { return cBooleanLiteralAction_2_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_2_1_0() { return cValueBOOLEANTerminalRuleCall_2_1_0; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// -----
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class ANNOTATION_TYPEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.ANNOTATION_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGGeneratedKeyword_0_0 = (Keyword)cGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAAuthorKeyword_1_0 = (Keyword)cAEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ANNOTATION_TYPE:
		//	G='generated' | A='author';
		public EnumRule getRule() { return rule; }

		//G='generated' | A='author'
		public Alternatives getAlternatives() { return cAlternatives; }

		//G='generated'
		public EnumLiteralDeclaration getGEnumLiteralDeclaration_0() { return cGEnumLiteralDeclaration_0; }

		//'generated'
		public Keyword getGGeneratedKeyword_0_0() { return cGGeneratedKeyword_0_0; }

		//A='author'
		public EnumLiteralDeclaration getAEnumLiteralDeclaration_1() { return cAEnumLiteralDeclaration_1; }

		//'author'
		public Keyword getAAuthorKeyword_1_0() { return cAAuthorKeyword_1_0; }
	}

	public class LabelTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.LabelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTThetaKeyword_0_0 = (Keyword)cTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDDeltaKeyword_1_0 = (Keyword)cDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LabelType:
		//	T='Theta' | D='Delta';
		public EnumRule getRule() { return rule; }

		//T='Theta' | D='Delta'
		public Alternatives getAlternatives() { return cAlternatives; }

		//T='Theta'
		public EnumLiteralDeclaration getTEnumLiteralDeclaration_0() { return cTEnumLiteralDeclaration_0; }

		//'Theta'
		public Keyword getTThetaKeyword_0_0() { return cTThetaKeyword_0_0; }

		//D='Delta'
		public EnumLiteralDeclaration getDEnumLiteralDeclaration_1() { return cDEnumLiteralDeclaration_1; }

		//'Delta'
		public Keyword getDDeltaKeyword_1_0() { return cDDeltaKeyword_1_0; }
	}

	public class UnaryOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.UnaryOp");
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNOTExclamationMarkKeyword_0 = (Keyword)cNOTEnumLiteralDeclaration.eContents().get(0);
		
		//enum UnaryOp:
		//	NOT='!';
		public EnumRule getRule() { return rule; }

		//NOT='!'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration() { return cNOTEnumLiteralDeclaration; }

		//'!'
		public Keyword getNOTExclamationMarkKeyword_0() { return cNOTExclamationMarkKeyword_0; }
	}
	
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final AnnotationElements pAnnotation;
	private final ANNOTATION_TYPEElements eANNOTATION_TYPE;
	private final DeclarationElements pDeclaration;
	private final DefinesElements pDefines;
	private final DefSortElements pDefSort;
	private final DefRangeElements pDefRange;
	private final DefOptionElements pDefOption;
	private final DefCompletionElements pDefCompletion;
	private final DefNonInertiaElements pDefNonInertia;
	private final DefXorElements pDefXor;
	private final DefMutexElements pDefMutex;
	private final StatementElements pStatement;
	private final LabeledExpressionElements pLabeledExpression;
	private final LabelTypeElements eLabelType;
	private final SortDefinitionElements pSortDefinition;
	private final DefinitionElements pDefinition;
	private final ExpressionElements pExpression;
	private final QualifierElements pQualifier;
	private final ParametersElements pParameters;
	private final ExistsElements pExists;
	private final ForallElements pForall;
	private final AssignmentOpElements pAssignmentOp;
	private final OrExpElements pOrExp;
	private final AndExpElements pAndExp;
	private final RelationalElements pRelational;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PowerElements pPower;
	private final UnaryExprElements pUnaryExpr;
	private final UnaryOpElements eUnaryOp;
	private final PrePrimaryExprElements pPrePrimaryExpr;
	private final AbstractRefElements pAbstractRef;
	private final TerminalExpressionElements pTerminalExpression;
	private final FQNElements pFQN;
	private final TerminalRule tINT;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public EventCalculusGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pAnnotation = new AnnotationElements();
		this.eANNOTATION_TYPE = new ANNOTATION_TYPEElements();
		this.pDeclaration = new DeclarationElements();
		this.pDefines = new DefinesElements();
		this.pDefSort = new DefSortElements();
		this.pDefRange = new DefRangeElements();
		this.pDefOption = new DefOptionElements();
		this.pDefCompletion = new DefCompletionElements();
		this.pDefNonInertia = new DefNonInertiaElements();
		this.pDefXor = new DefXorElements();
		this.pDefMutex = new DefMutexElements();
		this.pStatement = new StatementElements();
		this.pLabeledExpression = new LabeledExpressionElements();
		this.eLabelType = new LabelTypeElements();
		this.pSortDefinition = new SortDefinitionElements();
		this.pDefinition = new DefinitionElements();
		this.pExpression = new ExpressionElements();
		this.pQualifier = new QualifierElements();
		this.pParameters = new ParametersElements();
		this.pExists = new ExistsElements();
		this.pForall = new ForallElements();
		this.pAssignmentOp = new AssignmentOpElements();
		this.pOrExp = new OrExpElements();
		this.pAndExp = new AndExpElements();
		this.pRelational = new RelationalElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPower = new PowerElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.eUnaryOp = new UnaryOpElements();
		this.pPrePrimaryExpr = new PrePrimaryExprElements();
		this.pAbstractRef = new AbstractRefElements();
		this.pTerminalExpression = new TerminalExpressionElements();
		this.pFQN = new FQNElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.INT");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.BOOLEAN");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.event.EventCalculus.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.open.event.EventCalculus".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	imports+=Import* (declarations+=Declaration | statements+=Statement)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//	'load'
	//	importURI=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Annotation:
	//	';' '#' type=ANNOTATION_TYPE (value=STRING | value='not')?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//enum ANNOTATION_TYPE:
	//	G='generated' | A='author';
	public ANNOTATION_TYPEElements getANNOTATION_TYPEAccess() {
		return eANNOTATION_TYPE;
	}
	
	public EnumRule getANNOTATION_TYPERule() {
		return getANNOTATION_TYPEAccess().getRule();
	}

	//Declaration:
	//	DefSort | DefRange | DefOption | DefCompletion | DefNonInertia | DefXor | DefMutex;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Defines:
	//	DefSort | Definition;
	public DefinesElements getDefinesAccess() {
		return pDefines;
	}
	
	public ParserRule getDefinesRule() {
		return getDefinesAccess().getRule();
	}

	//DefSort:
	//	annotations+=Annotation*
	//	reified='reified'? 'sort' name=ID (':' type=ID)?;
	public DefSortElements getDefSortAccess() {
		return pDefSort;
	}
	
	public ParserRule getDefSortRule() {
		return getDefSortAccess().getRule();
	}

	//DefRange:
	//	annotations+=Annotation*
	//	'range' name=[DefSort] min=INT max=INT;
	public DefRangeElements getDefRangeAccess() {
		return pDefRange;
	}
	
	public ParserRule getDefRangeRule() {
		return getDefRangeAccess().getRule();
	}

	//DefOption:
	//	annotations+=Annotation* ('option' name=ID value=INT
	//	| 'option' name=ID value2=ID);
	public DefOptionElements getDefOptionAccess() {
		return pDefOption;
	}
	
	public ParserRule getDefOptionRule() {
		return getDefOptionAccess().getRule();
	}

	//DefCompletion:
	//	annotations+=Annotation*
	//	'completion' type=LabelType? label=[Definition];
	public DefCompletionElements getDefCompletionAccess() {
		return pDefCompletion;
	}
	
	public ParserRule getDefCompletionRule() {
		return getDefCompletionAccess().getRule();
	}

	//DefNonInertia:
	//	annotations+=Annotation*
	//	'noninertial' names+=[Definition] (',' names+=[Definition])*;
	public DefNonInertiaElements getDefNonInertiaAccess() {
		return pDefNonInertia;
	}
	
	public ParserRule getDefNonInertiaRule() {
		return getDefNonInertiaAccess().getRule();
	}

	//DefXor:
	//	annotations+=Annotation*
	//	'xor' names+=[Definition] (',' names+=[Definition])*;
	public DefXorElements getDefXorAccess() {
		return pDefXor;
	}
	
	public ParserRule getDefXorRule() {
		return getDefXorAccess().getRule();
	}

	//DefMutex:
	//	annotations+=Annotation*
	//	'mutex' names+=[Definition] (',' names+=[Definition])*;
	public DefMutexElements getDefMutexAccess() {
		return pDefMutex;
	}
	
	public ParserRule getDefMutexRule() {
		return getDefMutexAccess().getRule();
	}

	//Statement:
	//	SortDefinition | LabeledExpression;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//LabeledExpression:
	//	annotations+=Annotation* (name=LabelType ':')?
	//	expr=Expression '.';
	public LabeledExpressionElements getLabeledExpressionAccess() {
		return pLabeledExpression;
	}
	
	public ParserRule getLabeledExpressionRule() {
		return getLabeledExpressionAccess().getRule();
	}

	//enum LabelType:
	//	T='Theta' | D='Delta';
	public LabelTypeElements getLabelTypeAccess() {
		return eLabelType;
	}
	
	public EnumRule getLabelTypeRule() {
		return getLabelTypeAccess().getRule();
	}

	//SortDefinition:
	//	annotations+=Annotation*
	//	sort=[DefSort] definitions+=Definition (',' definitions+=Definition)*;
	public SortDefinitionElements getSortDefinitionAccess() {
		return pSortDefinition;
	}
	
	public ParserRule getSortDefinitionRule() {
		return getSortDefinitionAccess().getRule();
	}

	//Definition:
	//	name=ID ('(' args+=[Defines]? (',' args+=[Defines])* ')')? (':' return+=[Defines])?;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Expression:
	//	expr=AssignmentOp | qualifiers=Qualifier expr=Expression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Qualifier:
	//	Exists | Forall;
	public QualifierElements getQualifierAccess() {
		return pQualifier;
	}
	
	public ParserRule getQualifierRule() {
		return getQualifierAccess().getRule();
	}

	//Parameters:
	//	names+=[Defines] ("," names+=[Defines])*;
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}

	//Exists Qualifier:
	//	op=UnaryOp? '{' parameters=Parameters '}';
	public ExistsElements getExistsAccess() {
		return pExists;
	}
	
	public ParserRule getExistsRule() {
		return getExistsAccess().getRule();
	}

	//Forall Qualifier:
	//	op=UnaryOp? '[' parameters=Parameters ']';
	public ForallElements getForallAccess() {
		return pForall;
	}
	
	public ParserRule getForallRule() {
		return getForallAccess().getRule();
	}

	//AssignmentOp Expression:
	//	OrExp (({AssignPlus.left=current} '->' | {AssignMin.left=current} '<->') q=Qualifier? right=OrExp)?;
	public AssignmentOpElements getAssignmentOpAccess() {
		return pAssignmentOp;
	}
	
	public ParserRule getAssignmentOpRule() {
		return getAssignmentOpAccess().getRule();
	}

	//OrExp Expression:
	//	AndExp ({Or.left=current} '|' q=Qualifier? right=AndExp)*;
	public OrExpElements getOrExpAccess() {
		return pOrExp;
	}
	
	public ParserRule getOrExpRule() {
		return getOrExpAccess().getRule();
	}

	//AndExp Expression:
	//	Relational ({And.left=current} '&' q=Qualifier? right=Relational)*;
	public AndExpElements getAndExpAccess() {
		return pAndExp;
	}
	
	public ParserRule getAndExpRule() {
		return getAndExpAccess().getRule();
	}

	//Relational Expression:
	//	Addition (({RelNotEq.left=current} '!=' | {RelEqEq.left=current} '==' | {RelLtEq.left=current} '>=' |
	//	{RelGtEq.left=current} '<=' | {RelEq.left=current} '=' | {RelLt.left=current} '<' | {RelGt.left=current} '>')
	//	right=Addition)?;
	public RelationalElements getRelationalAccess() {
		return pRelational;
	}
	
	public ParserRule getRelationalRule() {
		return getRelationalAccess().getRule();
	}

	//Addition Expression:
	//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication Expression:
	//	Power (({Multi.left=current} '*' | {Div.left=current} '/') right=Power)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Power Expression:
	//	UnaryExpr (({Pow.left=current} '^') right=UnaryExpr)*;
	public PowerElements getPowerAccess() {
		return pPower;
	}
	
	public ParserRule getPowerRule() {
		return getPowerAccess().getRule();
	}

	//UnaryExpr Expression:
	//	op=UnaryOp? right=PrePrimaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}

	//enum UnaryOp:
	//	NOT='!';
	public UnaryOpElements getUnaryOpAccess() {
		return eUnaryOp;
	}
	
	public EnumRule getUnaryOpRule() {
		return getUnaryOpAccess().getRule();
	}

	//PrePrimaryExpr Expression:
	//	TerminalExpression | AbstractRef | '(' Expression ')' | '-' n=INT;
	public PrePrimaryExprElements getPrePrimaryExprAccess() {
		return pPrePrimaryExpr;
	}
	
	public ParserRule getPrePrimaryExprRule() {
		return getPrePrimaryExprAccess().getRule();
	}

	//AbstractRef Expression:
	//	define=[Defines] ({FunctionRef.func=current} ('(' args+=Expression? (',' args+=Expression)* ')'))?;
	public AbstractRefElements getAbstractRefAccess() {
		return pAbstractRef;
	}
	
	public ParserRule getAbstractRefRule() {
		return getAbstractRefAccess().getRule();
	}

	//TerminalExpression:
	//	{IntLiteral} value=INT
	//	| {StringLiteral} value=STRING | {BooleanLiteral} value=BOOLEAN;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//// -----
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	'0' | '1'..'9' '0'..'9'*;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | '\\') | !('\\' | '"'))* '"' | "'" ('\\' ('b' | 't' | 'n' | 'f' |
	//	'r' | 'u' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	';' !('\n' | '\r' | '#')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
