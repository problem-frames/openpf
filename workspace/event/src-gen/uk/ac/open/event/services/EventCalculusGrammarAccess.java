/*
* generated by Xtext
*/

package uk.ac.open.event.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EventCalculusGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class KnowledgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Knowledge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cEntitiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntitiesEntityParserRuleCall_1_0 = (RuleCall)cEntitiesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRulesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRulesRuleParserRuleCall_2_0_0 = (RuleCall)cRulesAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cVarsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarsVarParserRuleCall_3_0 = (RuleCall)cVarsAssignment_3.eContents().get(0);
		
		//Knowledge:
		//	imports+=Import* entities+=Entity* (rules+=Rule ".")* vars+=Var*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* entities+=Entity* (rules+=Rule ".")* vars+=Var*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_1() { return cEntitiesAssignment_1; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_1_0() { return cEntitiesEntityParserRuleCall_1_0; }

		//(rules+=Rule ".")*
		public Group getGroup_2() { return cGroup_2; }

		//rules+=Rule
		public Assignment getRulesAssignment_2_0() { return cRulesAssignment_2_0; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_2_0_0() { return cRulesRuleParserRuleCall_2_0_0; }

		//"."
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }

		//vars+=Var*
		public Assignment getVarsAssignment_3() { return cVarsAssignment_3; }

		//Var
		public RuleCall getVarsVarParserRuleCall_3_0() { return cVarsVarParserRuleCall_3_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclVarDeclParserRuleCall_0_0 = (RuleCall)cDeclAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprBoolExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//Rule:
		//	decl=VarDecl? expr=BoolExpr;
		public ParserRule getRule() { return rule; }

		//decl=VarDecl? expr=BoolExpr
		public Group getGroup() { return cGroup; }

		//decl=VarDecl?
		public Assignment getDeclAssignment_0() { return cDeclAssignment_0; }

		//VarDecl
		public RuleCall getDeclVarDeclParserRuleCall_0_0() { return cDeclVarDeclParserRuleCall_0_0; }

		//expr=BoolExpr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//BoolExpr
		public RuleCall getExprBoolExprParserRuleCall_1_0() { return cExprBoolExprParserRuleCall_1_0; }
	}

	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarsVarCrossReference_1_0 = (CrossReference)cVarsAssignment_1.eContents().get(0);
		private final RuleCall cVarsVarIDTerminalRuleCall_1_0_1 = (RuleCall)cVarsVarCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVarsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cVarsVarCrossReference_2_1_0 = (CrossReference)cVarsAssignment_2_1.eContents().get(0);
		private final RuleCall cVarsVarIDTerminalRuleCall_2_1_0_1 = (RuleCall)cVarsVarCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VarDecl:
		//	"[" vars+=[Var] ("," vars+=[Var])* "]";
		public ParserRule getRule() { return rule; }

		//"[" vars+=[Var] ("," vars+=[Var])* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//vars+=[Var]
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }

		//[Var]
		public CrossReference getVarsVarCrossReference_1_0() { return cVarsVarCrossReference_1_0; }

		//ID
		public RuleCall getVarsVarIDTerminalRuleCall_1_0_1() { return cVarsVarIDTerminalRuleCall_1_0_1; }

		//("," vars+=[Var])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//vars+=[Var]
		public Assignment getVarsAssignment_2_1() { return cVarsAssignment_2_1; }

		//[Var]
		public CrossReference getVarsVarCrossReference_2_1_0() { return cVarsVarCrossReference_2_1_0; }

		//ID
		public RuleCall getVarsVarIDTerminalRuleCall_2_1_0_1() { return cVarsVarIDTerminalRuleCall_2_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class IntTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstINTTerminalRuleCall_0_0 = (RuleCall)cConstAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cVarVarCrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarVarIDTerminalRuleCall_1_0_1 = (RuleCall)cVarVarCrossReference_1_0.eContents().get(1);
		
		//IntTerm:
		//	const=INT | var=[Var];
		public ParserRule getRule() { return rule; }

		//const=INT | var=[Var]
		public Alternatives getAlternatives() { return cAlternatives; }

		//const=INT
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }

		//INT
		public RuleCall getConstINTTerminalRuleCall_0_0() { return cConstINTTerminalRuleCall_0_0; }

		//var=[Var]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//[Var]
		public CrossReference getVarVarCrossReference_1_0() { return cVarVarCrossReference_1_0; }

		//ID
		public RuleCall getVarVarIDTerminalRuleCall_1_0_1() { return cVarVarIDTerminalRuleCall_1_0_1; }
	}

	public class IntExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryIntExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////IntExpr: IntTerm;
		//IntExpr:
		//	IntTerm | BinaryIntExpr;
		public ParserRule getRule() { return rule; }

		//IntTerm | BinaryIntExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntTerm
		public RuleCall getIntTermParserRuleCall_0() { return cIntTermParserRuleCall_0; }

		//BinaryIntExpr
		public RuleCall getBinaryIntExprParserRuleCall_1() { return cBinaryIntExprParserRuleCall_1; }
	}

	public class BinaryIntExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryIntExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOprIntTermParserRuleCall_0_0 = (RuleCall)cOprAssignment_0.eContents().get(0);
		private final Assignment cBinaryopAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBinaryopBinaryIntOpEnumRuleCall_1_0 = (RuleCall)cBinaryopAssignment_1.eContents().get(0);
		private final Assignment cOprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOprIntTermParserRuleCall_2_0 = (RuleCall)cOprAssignment_2.eContents().get(0);
		
		////IntExpr: IntTerm | UnaryIntExpr | BinaryIntExpr;
		////UnaryIntExpr: (unaryop_lhs=UnaryIntOp)? opr+=IntTerm (unaryop_rhs=UnaryIntOp)?;
		////BinaryIntExpr: opr+=IntTerm binaryop=BinaryIntOp opr+=IntExpr;
		//BinaryIntExpr:
		//	opr+=IntTerm binaryop=BinaryIntOp opr+=IntTerm;
		public ParserRule getRule() { return rule; }

		//opr+=IntTerm binaryop=BinaryIntOp opr+=IntTerm
		public Group getGroup() { return cGroup; }

		//opr+=IntTerm
		public Assignment getOprAssignment_0() { return cOprAssignment_0; }

		//IntTerm
		public RuleCall getOprIntTermParserRuleCall_0_0() { return cOprIntTermParserRuleCall_0_0; }

		//binaryop=BinaryIntOp
		public Assignment getBinaryopAssignment_1() { return cBinaryopAssignment_1; }

		//BinaryIntOp
		public RuleCall getBinaryopBinaryIntOpEnumRuleCall_1_0() { return cBinaryopBinaryIntOpEnumRuleCall_1_0; }

		//opr+=IntTerm
		public Assignment getOprAssignment_2() { return cOprAssignment_2; }

		//IntTerm
		public RuleCall getOprIntTermParserRuleCall_2_0() { return cOprIntTermParserRuleCall_2_0; }
	}

	public class TemporalPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemporalPredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHoldsAtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHappensParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInitiatesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTerminatesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TemporalPredicate:
		//	HoldsAt | Happens | Initiates | Terminates;
		public ParserRule getRule() { return rule; }

		//HoldsAt | Happens | Initiates | Terminates
		public Alternatives getAlternatives() { return cAlternatives; }

		//HoldsAt
		public RuleCall getHoldsAtParserRuleCall_0() { return cHoldsAtParserRuleCall_0; }

		//Happens
		public RuleCall getHappensParserRuleCall_1() { return cHappensParserRuleCall_1; }

		//Initiates
		public RuleCall getInitiatesParserRuleCall_2() { return cInitiatesParserRuleCall_2; }

		//Terminates
		public RuleCall getTerminatesParserRuleCall_3() { return cTerminatesParserRuleCall_3; }
	}

	public class BoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTemporalPredicateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryBoolExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBinaryBoolExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BoolExpr:
		//	TemporalPredicate | UnaryBoolExpr | BinaryBoolExpr;
		public ParserRule getRule() { return rule; }

		//TemporalPredicate | UnaryBoolExpr | BinaryBoolExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//TemporalPredicate
		public RuleCall getTemporalPredicateParserRuleCall_0() { return cTemporalPredicateParserRuleCall_0; }

		//UnaryBoolExpr
		public RuleCall getUnaryBoolExprParserRuleCall_1() { return cUnaryBoolExprParserRuleCall_1; }

		//BinaryBoolExpr
		public RuleCall getBinaryBoolExprParserRuleCall_2() { return cBinaryBoolExprParserRuleCall_2; }
	}

	public class UnaryBoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryBoolExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cUnaryop_lhsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cUnaryop_lhsUnaryBoolOpEnumRuleCall_0_0_0 = (RuleCall)cUnaryop_lhsAssignment_0_0.eContents().get(0);
		private final Assignment cOprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOprBoolExprParserRuleCall_0_1_0 = (RuleCall)cOprAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpsBoolExprParserRuleCall_1_1_0 = (RuleCall)cOpsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//UnaryBoolExpr:
		//	unaryop_lhs=UnaryBoolOp opr+=BoolExpr | "(" ops+=BoolExpr ")";
		public ParserRule getRule() { return rule; }

		//unaryop_lhs=UnaryBoolOp opr+=BoolExpr | "(" ops+=BoolExpr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//unaryop_lhs=UnaryBoolOp opr+=BoolExpr
		public Group getGroup_0() { return cGroup_0; }

		//unaryop_lhs=UnaryBoolOp
		public Assignment getUnaryop_lhsAssignment_0_0() { return cUnaryop_lhsAssignment_0_0; }

		//UnaryBoolOp
		public RuleCall getUnaryop_lhsUnaryBoolOpEnumRuleCall_0_0_0() { return cUnaryop_lhsUnaryBoolOpEnumRuleCall_0_0_0; }

		//opr+=BoolExpr
		public Assignment getOprAssignment_0_1() { return cOprAssignment_0_1; }

		//BoolExpr
		public RuleCall getOprBoolExprParserRuleCall_0_1_0() { return cOprBoolExprParserRuleCall_0_1_0; }

		//"(" ops+=BoolExpr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//ops+=BoolExpr
		public Assignment getOpsAssignment_1_1() { return cOpsAssignment_1_1; }

		//BoolExpr
		public RuleCall getOpsBoolExprParserRuleCall_1_1_0() { return cOpsBoolExprParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class BinaryBoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryBoolExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOprTemporalPredicateParserRuleCall_0_0 = (RuleCall)cOprAssignment_0.eContents().get(0);
		private final Assignment cBinaryopAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBinaryopBinaryBoolOpEnumRuleCall_1_0 = (RuleCall)cBinaryopAssignment_1.eContents().get(0);
		private final Assignment cOprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOprBoolExprParserRuleCall_2_0 = (RuleCall)cOprAssignment_2.eContents().get(0);
		
		//BinaryBoolExpr:
		//	opr+=TemporalPredicate binaryop=BinaryBoolOp opr+=BoolExpr;
		public ParserRule getRule() { return rule; }

		//opr+=TemporalPredicate binaryop=BinaryBoolOp opr+=BoolExpr
		public Group getGroup() { return cGroup; }

		//opr+=TemporalPredicate
		public Assignment getOprAssignment_0() { return cOprAssignment_0; }

		//TemporalPredicate
		public RuleCall getOprTemporalPredicateParserRuleCall_0_0() { return cOprTemporalPredicateParserRuleCall_0_0; }

		//binaryop=BinaryBoolOp
		public Assignment getBinaryopAssignment_1() { return cBinaryopAssignment_1; }

		//BinaryBoolOp
		public RuleCall getBinaryopBinaryBoolOpEnumRuleCall_1_0() { return cBinaryopBinaryBoolOpEnumRuleCall_1_0; }

		//opr+=BoolExpr
		public Assignment getOprAssignment_2() { return cOprAssignment_2; }

		//BoolExpr
		public RuleCall getOprBoolExprParserRuleCall_2_0() { return cOprBoolExprParserRuleCall_2_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFluentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSortParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Entity:
		//	Fluent | Event | Sort;
		public ParserRule getRule() { return rule; }

		//Fluent | Event | Sort
		public Alternatives getAlternatives() { return cAlternatives; }

		//Fluent
		public RuleCall getFluentParserRuleCall_0() { return cFluentParserRuleCall_0; }

		//Event
		public RuleCall getEventParserRuleCall_1() { return cEventParserRuleCall_1; }

		//Sort
		public RuleCall getSortParserRuleCall_2() { return cSortParserRuleCall_2; }
	}

	public class SortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Sort:
		//	"sort" name=ID;
		public ParserRule getRule() { return rule; }

		//"sort" name=ID
		public Group getGroup() { return cGroup; }

		//"sort"
		public Keyword getSortKeyword_0() { return cSortKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathPathParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//Import:
		//	"load" path=Path;
		public ParserRule getRule() { return rule; }

		//"load" path=Path
		public Group getGroup() { return cGroup; }

		//"load"
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }

		//path=Path
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }

		//Path
		public RuleCall getPathPathParserRuleCall_1_0() { return cPathPathParserRuleCall_1_0; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMinAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinINTTerminalRuleCall_2_0 = (RuleCall)cMinAssignment_2.eContents().get(0);
		private final Assignment cMaxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaxINTTerminalRuleCall_3_0 = (RuleCall)cMaxAssignment_3.eContents().get(0);
		
		//Var:
		//	"range" name=ID min=INT max=INT;
		public ParserRule getRule() { return rule; }

		//"range" name=ID min=INT max=INT
		public Group getGroup() { return cGroup; }

		//"range"
		public Keyword getRangeKeyword_0() { return cRangeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//min=INT
		public Assignment getMinAssignment_2() { return cMinAssignment_2; }

		//INT
		public RuleCall getMinINTTerminalRuleCall_2_0() { return cMinINTTerminalRuleCall_2_0; }

		//max=INT
		public Assignment getMaxAssignment_3() { return cMaxAssignment_3; }

		//INT
		public RuleCall getMaxINTTerminalRuleCall_3_0() { return cMaxINTTerminalRuleCall_3_0; }
	}

	public class FluentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fluent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFluentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_0 = (RuleCall)cTermAssignment_1.eContents().get(0);
		
		//Fluent:
		//	"fluent" term=Term;
		public ParserRule getRule() { return rule; }

		//"fluent" term=Term
		public Group getGroup() { return cGroup; }

		//"fluent"
		public Keyword getFluentKeyword_0() { return cFluentKeyword_0; }

		//term=Term
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }

		//Term
		public RuleCall getTermTermParserRuleCall_1_0() { return cTermTermParserRuleCall_1_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_0 = (RuleCall)cTermAssignment_1.eContents().get(0);
		
		//Event:
		//	"event" term=Term;
		public ParserRule getRule() { return rule; }

		//"event" term=Term
		public Group getGroup() { return cGroup; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//term=Term
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }

		//Term
		public RuleCall getTermTermParserRuleCall_1_0() { return cTermTermParserRuleCall_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_1_2_1_0 = (RuleCall)cArgsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Term:
		//	name=ID ("(" args+=ID? ("," args+=ID)* ")")?;
		public ParserRule getRule() { return rule; }

		//name=ID ("(" args+=ID? ("," args+=ID)* ")")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("(" args+=ID? ("," args+=ID)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//args+=ID?
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_1_1_0() { return cArgsIDTerminalRuleCall_1_1_0; }

		//("," args+=ID)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//args+=ID
		public Assignment getArgsAssignment_1_2_1() { return cArgsAssignment_1_2_1; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_1_2_1_0() { return cArgsIDTerminalRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class HoldsAtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HoldsAt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHoldsAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFluentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFluentTermCrossReference_2_0 = (CrossReference)cFluentAssignment_2.eContents().get(0);
		private final RuleCall cFluentTermIDTerminalRuleCall_2_0_1 = (RuleCall)cFluentTermCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_3_2_1_0 = (RuleCall)cArgsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimeIntExprParserRuleCall_5_0 = (RuleCall)cTimeAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//HoldsAt:
		//	"HoldsAt" "(" fluent=[Term] ("(" args+=ID? ("," args+=ID)* ")")? "," time=IntExpr ")";
		public ParserRule getRule() { return rule; }

		//"HoldsAt" "(" fluent=[Term] ("(" args+=ID? ("," args+=ID)* ")")? "," time=IntExpr ")"
		public Group getGroup() { return cGroup; }

		//"HoldsAt"
		public Keyword getHoldsAtKeyword_0() { return cHoldsAtKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//fluent=[Term]
		public Assignment getFluentAssignment_2() { return cFluentAssignment_2; }

		//[Term]
		public CrossReference getFluentTermCrossReference_2_0() { return cFluentTermCrossReference_2_0; }

		//ID
		public RuleCall getFluentTermIDTerminalRuleCall_2_0_1() { return cFluentTermIDTerminalRuleCall_2_0_1; }

		//("(" args+=ID? ("," args+=ID)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//args+=ID?
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_3_1_0() { return cArgsIDTerminalRuleCall_3_1_0; }

		//("," args+=ID)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//args+=ID
		public Assignment getArgsAssignment_3_2_1() { return cArgsAssignment_3_2_1; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_3_2_1_0() { return cArgsIDTerminalRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//time=IntExpr
		public Assignment getTimeAssignment_5() { return cTimeAssignment_5; }

		//IntExpr
		public RuleCall getTimeIntExprParserRuleCall_5_0() { return cTimeIntExprParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class HappensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Happens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHappensKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEventTermCrossReference_2_0 = (CrossReference)cEventAssignment_2.eContents().get(0);
		private final RuleCall cEventTermIDTerminalRuleCall_2_0_1 = (RuleCall)cEventTermCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_3_2_1_0 = (RuleCall)cArgsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimeIntExprParserRuleCall_5_0 = (RuleCall)cTimeAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Happens:
		//	"Happens" "(" event=[Term] ("(" args+=ID? ("," args+=ID)* ")")? "," time=IntExpr ")";
		public ParserRule getRule() { return rule; }

		//"Happens" "(" event=[Term] ("(" args+=ID? ("," args+=ID)* ")")? "," time=IntExpr ")"
		public Group getGroup() { return cGroup; }

		//"Happens"
		public Keyword getHappensKeyword_0() { return cHappensKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//event=[Term]
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }

		//[Term]
		public CrossReference getEventTermCrossReference_2_0() { return cEventTermCrossReference_2_0; }

		//ID
		public RuleCall getEventTermIDTerminalRuleCall_2_0_1() { return cEventTermIDTerminalRuleCall_2_0_1; }

		//("(" args+=ID? ("," args+=ID)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//args+=ID?
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_3_1_0() { return cArgsIDTerminalRuleCall_3_1_0; }

		//("," args+=ID)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//args+=ID
		public Assignment getArgsAssignment_3_2_1() { return cArgsAssignment_3_2_1; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_3_2_1_0() { return cArgsIDTerminalRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//time=IntExpr
		public Assignment getTimeAssignment_5() { return cTimeAssignment_5; }

		//IntExpr
		public RuleCall getTimeIntExprParserRuleCall_5_0() { return cTimeIntExprParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class InitiatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Initiates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitiatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEventTermCrossReference_2_0 = (CrossReference)cEventAssignment_2.eContents().get(0);
		private final RuleCall cEventTermIDTerminalRuleCall_2_0_1 = (RuleCall)cEventTermCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_3_2_1_0 = (RuleCall)cArgsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFluentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cFluentTermCrossReference_5_0 = (CrossReference)cFluentAssignment_5.eContents().get(0);
		private final RuleCall cFluentTermIDTerminalRuleCall_5_0_1 = (RuleCall)cFluentTermCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cArgs2Assignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cArgs2IDTerminalRuleCall_6_1_0 = (RuleCall)cArgs2Assignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cArgs2Assignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cArgs2IDTerminalRuleCall_6_2_1_0 = (RuleCall)cArgs2Assignment_6_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTimeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTimeIntExprParserRuleCall_8_0 = (RuleCall)cTimeAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Initiates:
		//	"Initiates" "(" event=[Term] ("(" args+=ID? ("," args+=ID)* ")")? "," fluent=[Term] ("(" args2+=ID? ("," args2+=ID)*
		//	")")? "," time=IntExpr ")";
		public ParserRule getRule() { return rule; }

		//"Initiates" "(" event=[Term] ("(" args+=ID? ("," args+=ID)* ")")? "," fluent=[Term] ("(" args2+=ID? ("," args2+=ID)*
		//")")? "," time=IntExpr ")"
		public Group getGroup() { return cGroup; }

		//"Initiates"
		public Keyword getInitiatesKeyword_0() { return cInitiatesKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//event=[Term]
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }

		//[Term]
		public CrossReference getEventTermCrossReference_2_0() { return cEventTermCrossReference_2_0; }

		//ID
		public RuleCall getEventTermIDTerminalRuleCall_2_0_1() { return cEventTermIDTerminalRuleCall_2_0_1; }

		//("(" args+=ID? ("," args+=ID)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//args+=ID?
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_3_1_0() { return cArgsIDTerminalRuleCall_3_1_0; }

		//("," args+=ID)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//args+=ID
		public Assignment getArgsAssignment_3_2_1() { return cArgsAssignment_3_2_1; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_3_2_1_0() { return cArgsIDTerminalRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//fluent=[Term]
		public Assignment getFluentAssignment_5() { return cFluentAssignment_5; }

		//[Term]
		public CrossReference getFluentTermCrossReference_5_0() { return cFluentTermCrossReference_5_0; }

		//ID
		public RuleCall getFluentTermIDTerminalRuleCall_5_0_1() { return cFluentTermIDTerminalRuleCall_5_0_1; }

		//("(" args2+=ID? ("," args2+=ID)* ")")?
		public Group getGroup_6() { return cGroup_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//args2+=ID?
		public Assignment getArgs2Assignment_6_1() { return cArgs2Assignment_6_1; }

		//ID
		public RuleCall getArgs2IDTerminalRuleCall_6_1_0() { return cArgs2IDTerminalRuleCall_6_1_0; }

		//("," args2+=ID)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//args2+=ID
		public Assignment getArgs2Assignment_6_2_1() { return cArgs2Assignment_6_2_1; }

		//ID
		public RuleCall getArgs2IDTerminalRuleCall_6_2_1_0() { return cArgs2IDTerminalRuleCall_6_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//time=IntExpr
		public Assignment getTimeAssignment_8() { return cTimeAssignment_8; }

		//IntExpr
		public RuleCall getTimeIntExprParserRuleCall_8_0() { return cTimeIntExprParserRuleCall_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}

	public class TerminatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Terminates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTerminatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEventTermCrossReference_2_0 = (CrossReference)cEventAssignment_2.eContents().get(0);
		private final RuleCall cEventTermIDTerminalRuleCall_2_0_1 = (RuleCall)cEventTermCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_3_2_1_0 = (RuleCall)cArgsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFluentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cFluentTermCrossReference_5_0 = (CrossReference)cFluentAssignment_5.eContents().get(0);
		private final RuleCall cFluentTermIDTerminalRuleCall_5_0_1 = (RuleCall)cFluentTermCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cArgs2Assignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cArgs2IDTerminalRuleCall_6_1_0 = (RuleCall)cArgs2Assignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cArgs2Assignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cArgs2IDTerminalRuleCall_6_2_1_0 = (RuleCall)cArgs2Assignment_6_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTimeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTimeIntExprParserRuleCall_8_0 = (RuleCall)cTimeAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Terminates:
		//	"Terminates" "(" event=[Term] ("(" args+=ID? ("," args+=ID)* ")")? "," fluent=[Term] ("(" args2+=ID? ("," args2+=ID)*
		//	")")? "," time=IntExpr ")";
		public ParserRule getRule() { return rule; }

		//"Terminates" "(" event=[Term] ("(" args+=ID? ("," args+=ID)* ")")? "," fluent=[Term] ("(" args2+=ID? ("," args2+=ID)*
		//")")? "," time=IntExpr ")"
		public Group getGroup() { return cGroup; }

		//"Terminates"
		public Keyword getTerminatesKeyword_0() { return cTerminatesKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//event=[Term]
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }

		//[Term]
		public CrossReference getEventTermCrossReference_2_0() { return cEventTermCrossReference_2_0; }

		//ID
		public RuleCall getEventTermIDTerminalRuleCall_2_0_1() { return cEventTermIDTerminalRuleCall_2_0_1; }

		//("(" args+=ID? ("," args+=ID)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//args+=ID?
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_3_1_0() { return cArgsIDTerminalRuleCall_3_1_0; }

		//("," args+=ID)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//args+=ID
		public Assignment getArgsAssignment_3_2_1() { return cArgsAssignment_3_2_1; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_3_2_1_0() { return cArgsIDTerminalRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//fluent=[Term]
		public Assignment getFluentAssignment_5() { return cFluentAssignment_5; }

		//[Term]
		public CrossReference getFluentTermCrossReference_5_0() { return cFluentTermCrossReference_5_0; }

		//ID
		public RuleCall getFluentTermIDTerminalRuleCall_5_0_1() { return cFluentTermIDTerminalRuleCall_5_0_1; }

		//("(" args2+=ID? ("," args2+=ID)* ")")?
		public Group getGroup_6() { return cGroup_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//args2+=ID?
		public Assignment getArgs2Assignment_6_1() { return cArgs2Assignment_6_1; }

		//ID
		public RuleCall getArgs2IDTerminalRuleCall_6_1_0() { return cArgs2IDTerminalRuleCall_6_1_0; }

		//("," args2+=ID)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//args2+=ID
		public Assignment getArgs2Assignment_6_2_1() { return cArgs2Assignment_6_2_1; }

		//ID
		public RuleCall getArgs2IDTerminalRuleCall_6_2_1_0() { return cArgs2IDTerminalRuleCall_6_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//time=IntExpr
		public Assignment getTimeAssignment_8() { return cTimeAssignment_8; }

		//IntExpr
		public RuleCall getTimeIntExprParserRuleCall_8_0() { return cTimeIntExprParserRuleCall_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}

	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFilesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFilesFileParserRuleCall_0_0 = (RuleCall)cFilesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFilesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFilesFileParserRuleCall_1_1_0 = (RuleCall)cFilesAssignment_1_1.eContents().get(0);
		
		//Path:
		//	files+=File ("/" files+=File)*;
		public ParserRule getRule() { return rule; }

		//files+=File ("/" files+=File)*
		public Group getGroup() { return cGroup; }

		//files+=File
		public Assignment getFilesAssignment_0() { return cFilesAssignment_0; }

		//File
		public RuleCall getFilesFileParserRuleCall_0_0() { return cFilesFileParserRuleCall_0_0; }

		//("/" files+=File)*
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//files+=File
		public Assignment getFilesAssignment_1_1() { return cFilesAssignment_1_1; }

		//File
		public RuleCall getFilesFileParserRuleCall_1_1_0() { return cFilesFileParserRuleCall_1_1_0; }
	}

	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_0_0 = (RuleCall)cNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_1_0 = (RuleCall)cNamesAssignment_1_1.eContents().get(0);
		
		//File:
		//	names+=ID ("." names+=ID)*;
		public ParserRule getRule() { return rule; }

		//names+=ID ("." names+=ID)*
		public Group getGroup() { return cGroup; }

		//names+=ID
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_0() { return cNamesIDTerminalRuleCall_0_0; }

		//("." names+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//names+=ID
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_1_0() { return cNamesIDTerminalRuleCall_1_1_0; }
	}
	
	
	public class BinaryIntOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryIntOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		
		////enum UnaryIntOp: MINUS="-" | LPAREN="(" | RPAREN=")";     
		//enum BinaryIntOp:
		//	PLUS="+" | MINUS="-";
		public EnumRule getRule() { return rule; }

		//PLUS="+" | MINUS="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
	}

	public class UnaryBoolOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryBoolOp");
		private final EnumLiteralDeclaration cNEGATIONEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNEGATIONExclamationMarkKeyword_0 = (Keyword)cNEGATIONEnumLiteralDeclaration.eContents().get(0);
		
		//enum UnaryBoolOp:
		//	NEGATION="!";
		public EnumRule getRule() { return rule; }

		//NEGATION="!"
		public EnumLiteralDeclaration getNEGATIONEnumLiteralDeclaration() { return cNEGATIONEnumLiteralDeclaration; }

		//"!"
		public Keyword getNEGATIONExclamationMarkKeyword_0() { return cNEGATIONExclamationMarkKeyword_0; }
	}

	public class BinaryBoolOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryBoolOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIMPLICATIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIMPLICATIONHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cIMPLICATIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEQUIVALENCEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEQUIVALENCELessThanSignHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cEQUIVALENCEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cANDAmpersandKeyword_2_0 = (Keyword)cANDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cORVerticalLineKeyword_3_0 = (Keyword)cOREnumLiteralDeclaration_3.eContents().get(0);
		
		////BinaryBoolExpr: opr+=BoolExpr binaryop=BinaryBoolOp opr+=BoolExpr;
		//enum BinaryBoolOp:
		//	IMPLICATION="->" | EQUIVALENCE="<->" | AND="&" | OR="|";
		public EnumRule getRule() { return rule; }

		//IMPLICATION="->" | EQUIVALENCE="<->" | AND="&" | OR="|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IMPLICATION="->"
		public EnumLiteralDeclaration getIMPLICATIONEnumLiteralDeclaration_0() { return cIMPLICATIONEnumLiteralDeclaration_0; }

		//"->"
		public Keyword getIMPLICATIONHyphenMinusGreaterThanSignKeyword_0_0() { return cIMPLICATIONHyphenMinusGreaterThanSignKeyword_0_0; }

		//EQUIVALENCE="<->"
		public EnumLiteralDeclaration getEQUIVALENCEEnumLiteralDeclaration_1() { return cEQUIVALENCEEnumLiteralDeclaration_1; }

		//"<->"
		public Keyword getEQUIVALENCELessThanSignHyphenMinusGreaterThanSignKeyword_1_0() { return cEQUIVALENCELessThanSignHyphenMinusGreaterThanSignKeyword_1_0; }

		//AND="&"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_2() { return cANDEnumLiteralDeclaration_2; }

		//"&"
		public Keyword getANDAmpersandKeyword_2_0() { return cANDAmpersandKeyword_2_0; }

		//OR="|"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_3() { return cOREnumLiteralDeclaration_3; }

		//"|"
		public Keyword getORVerticalLineKeyword_3_0() { return cORVerticalLineKeyword_3_0; }
	}
	
	private KnowledgeElements pKnowledge;
	private RuleElements pRule;
	private VarDeclElements pVarDecl;
	private IntTermElements pIntTerm;
	private IntExprElements pIntExpr;
	private BinaryIntExprElements pBinaryIntExpr;
	private BinaryIntOpElements unknownRuleBinaryIntOp;
	private TemporalPredicateElements pTemporalPredicate;
	private BoolExprElements pBoolExpr;
	private UnaryBoolExprElements pUnaryBoolExpr;
	private UnaryBoolOpElements unknownRuleUnaryBoolOp;
	private BinaryBoolExprElements pBinaryBoolExpr;
	private BinaryBoolOpElements unknownRuleBinaryBoolOp;
	private EntityElements pEntity;
	private SortElements pSort;
	private ImportElements pImport;
	private VarElements pVar;
	private FluentElements pFluent;
	private EventElements pEvent;
	private TermElements pTerm;
	private HoldsAtElements pHoldsAt;
	private HappensElements pHappens;
	private InitiatesElements pInitiates;
	private TerminatesElements pTerminates;
	private PathElements pPath;
	private FileElements pFile;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EventCalculusGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Knowledge:
	//	imports+=Import* entities+=Entity* (rules+=Rule ".")* vars+=Var*;
	public KnowledgeElements getKnowledgeAccess() {
		return (pKnowledge != null) ? pKnowledge : (pKnowledge = new KnowledgeElements());
	}
	
	public ParserRule getKnowledgeRule() {
		return getKnowledgeAccess().getRule();
	}

	//Rule:
	//	decl=VarDecl? expr=BoolExpr;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//VarDecl:
	//	"[" vars+=[Var] ("," vars+=[Var])* "]";
	public VarDeclElements getVarDeclAccess() {
		return (pVarDecl != null) ? pVarDecl : (pVarDecl = new VarDeclElements());
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}

	//IntTerm:
	//	const=INT | var=[Var];
	public IntTermElements getIntTermAccess() {
		return (pIntTerm != null) ? pIntTerm : (pIntTerm = new IntTermElements());
	}
	
	public ParserRule getIntTermRule() {
		return getIntTermAccess().getRule();
	}

	////IntExpr: IntTerm;
	//IntExpr:
	//	IntTerm | BinaryIntExpr;
	public IntExprElements getIntExprAccess() {
		return (pIntExpr != null) ? pIntExpr : (pIntExpr = new IntExprElements());
	}
	
	public ParserRule getIntExprRule() {
		return getIntExprAccess().getRule();
	}

	////IntExpr: IntTerm | UnaryIntExpr | BinaryIntExpr;
	////UnaryIntExpr: (unaryop_lhs=UnaryIntOp)? opr+=IntTerm (unaryop_rhs=UnaryIntOp)?;
	////BinaryIntExpr: opr+=IntTerm binaryop=BinaryIntOp opr+=IntExpr;
	//BinaryIntExpr:
	//	opr+=IntTerm binaryop=BinaryIntOp opr+=IntTerm;
	public BinaryIntExprElements getBinaryIntExprAccess() {
		return (pBinaryIntExpr != null) ? pBinaryIntExpr : (pBinaryIntExpr = new BinaryIntExprElements());
	}
	
	public ParserRule getBinaryIntExprRule() {
		return getBinaryIntExprAccess().getRule();
	}

	////enum UnaryIntOp: MINUS="-" | LPAREN="(" | RPAREN=")";     
	//enum BinaryIntOp:
	//	PLUS="+" | MINUS="-";
	public BinaryIntOpElements getBinaryIntOpAccess() {
		return (unknownRuleBinaryIntOp != null) ? unknownRuleBinaryIntOp : (unknownRuleBinaryIntOp = new BinaryIntOpElements());
	}
	
	public EnumRule getBinaryIntOpRule() {
		return getBinaryIntOpAccess().getRule();
	}

	//TemporalPredicate:
	//	HoldsAt | Happens | Initiates | Terminates;
	public TemporalPredicateElements getTemporalPredicateAccess() {
		return (pTemporalPredicate != null) ? pTemporalPredicate : (pTemporalPredicate = new TemporalPredicateElements());
	}
	
	public ParserRule getTemporalPredicateRule() {
		return getTemporalPredicateAccess().getRule();
	}

	//BoolExpr:
	//	TemporalPredicate | UnaryBoolExpr | BinaryBoolExpr;
	public BoolExprElements getBoolExprAccess() {
		return (pBoolExpr != null) ? pBoolExpr : (pBoolExpr = new BoolExprElements());
	}
	
	public ParserRule getBoolExprRule() {
		return getBoolExprAccess().getRule();
	}

	//UnaryBoolExpr:
	//	unaryop_lhs=UnaryBoolOp opr+=BoolExpr | "(" ops+=BoolExpr ")";
	public UnaryBoolExprElements getUnaryBoolExprAccess() {
		return (pUnaryBoolExpr != null) ? pUnaryBoolExpr : (pUnaryBoolExpr = new UnaryBoolExprElements());
	}
	
	public ParserRule getUnaryBoolExprRule() {
		return getUnaryBoolExprAccess().getRule();
	}

	//enum UnaryBoolOp:
	//	NEGATION="!";
	public UnaryBoolOpElements getUnaryBoolOpAccess() {
		return (unknownRuleUnaryBoolOp != null) ? unknownRuleUnaryBoolOp : (unknownRuleUnaryBoolOp = new UnaryBoolOpElements());
	}
	
	public EnumRule getUnaryBoolOpRule() {
		return getUnaryBoolOpAccess().getRule();
	}

	//BinaryBoolExpr:
	//	opr+=TemporalPredicate binaryop=BinaryBoolOp opr+=BoolExpr;
	public BinaryBoolExprElements getBinaryBoolExprAccess() {
		return (pBinaryBoolExpr != null) ? pBinaryBoolExpr : (pBinaryBoolExpr = new BinaryBoolExprElements());
	}
	
	public ParserRule getBinaryBoolExprRule() {
		return getBinaryBoolExprAccess().getRule();
	}

	////BinaryBoolExpr: opr+=BoolExpr binaryop=BinaryBoolOp opr+=BoolExpr;
	//enum BinaryBoolOp:
	//	IMPLICATION="->" | EQUIVALENCE="<->" | AND="&" | OR="|";
	public BinaryBoolOpElements getBinaryBoolOpAccess() {
		return (unknownRuleBinaryBoolOp != null) ? unknownRuleBinaryBoolOp : (unknownRuleBinaryBoolOp = new BinaryBoolOpElements());
	}
	
	public EnumRule getBinaryBoolOpRule() {
		return getBinaryBoolOpAccess().getRule();
	}

	//Entity:
	//	Fluent | Event | Sort;
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Sort:
	//	"sort" name=ID;
	public SortElements getSortAccess() {
		return (pSort != null) ? pSort : (pSort = new SortElements());
	}
	
	public ParserRule getSortRule() {
		return getSortAccess().getRule();
	}

	//Import:
	//	"load" path=Path;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Var:
	//	"range" name=ID min=INT max=INT;
	public VarElements getVarAccess() {
		return (pVar != null) ? pVar : (pVar = new VarElements());
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//Fluent:
	//	"fluent" term=Term;
	public FluentElements getFluentAccess() {
		return (pFluent != null) ? pFluent : (pFluent = new FluentElements());
	}
	
	public ParserRule getFluentRule() {
		return getFluentAccess().getRule();
	}

	//Event:
	//	"event" term=Term;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Term:
	//	name=ID ("(" args+=ID? ("," args+=ID)* ")")?;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//HoldsAt:
	//	"HoldsAt" "(" fluent=[Term] ("(" args+=ID? ("," args+=ID)* ")")? "," time=IntExpr ")";
	public HoldsAtElements getHoldsAtAccess() {
		return (pHoldsAt != null) ? pHoldsAt : (pHoldsAt = new HoldsAtElements());
	}
	
	public ParserRule getHoldsAtRule() {
		return getHoldsAtAccess().getRule();
	}

	//Happens:
	//	"Happens" "(" event=[Term] ("(" args+=ID? ("," args+=ID)* ")")? "," time=IntExpr ")";
	public HappensElements getHappensAccess() {
		return (pHappens != null) ? pHappens : (pHappens = new HappensElements());
	}
	
	public ParserRule getHappensRule() {
		return getHappensAccess().getRule();
	}

	//Initiates:
	//	"Initiates" "(" event=[Term] ("(" args+=ID? ("," args+=ID)* ")")? "," fluent=[Term] ("(" args2+=ID? ("," args2+=ID)*
	//	")")? "," time=IntExpr ")";
	public InitiatesElements getInitiatesAccess() {
		return (pInitiates != null) ? pInitiates : (pInitiates = new InitiatesElements());
	}
	
	public ParserRule getInitiatesRule() {
		return getInitiatesAccess().getRule();
	}

	//Terminates:
	//	"Terminates" "(" event=[Term] ("(" args+=ID? ("," args+=ID)* ")")? "," fluent=[Term] ("(" args2+=ID? ("," args2+=ID)*
	//	")")? "," time=IntExpr ")";
	public TerminatesElements getTerminatesAccess() {
		return (pTerminates != null) ? pTerminates : (pTerminates = new TerminatesElements());
	}
	
	public ParserRule getTerminatesRule() {
		return getTerminatesAccess().getRule();
	}

	//Path:
	//	files+=File ("/" files+=File)*;
	public PathElements getPathAccess() {
		return (pPath != null) ? pPath : (pPath = new PathElements());
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}

	//File:
	//	names+=ID ("." names+=ID)*;
	public FileElements getFileAccess() {
		return (pFile != null) ? pFile : (pFile = new FileElements());
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	";" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ID:
	//	"#" !"#"+ "#" | "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
