/*
* generated by Xtext
*/

package uk.ac.open.event.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EventCalculusGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_1_0_0 = (RuleCall)cDeclarationsAssignment_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		
		//Model:
		//	imports+=Import* (declarations+=Declaration | statements+=Statement)*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* (declarations+=Declaration | statements+=Statement)*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//(declarations+=Declaration | statements+=Statement)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//declarations+=Declaration
		public Assignment getDeclarationsAssignment_1_0() { return cDeclarationsAssignment_1_0; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_1_0_0() { return cDeclarationsDeclarationParserRuleCall_1_0_0; }

		//statements+=Statement
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_1_0() { return cStatementsStatementParserRuleCall_1_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	"load" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"load" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"load"
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefSortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefOptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefCompletionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDefNonInertiaParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Declaration:
		//	DefSort | DefRange | DefOption | DefCompletion | DefNonInertia;
		public ParserRule getRule() { return rule; }

		//DefSort | DefRange | DefOption | DefCompletion | DefNonInertia
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefSort
		public RuleCall getDefSortParserRuleCall_0() { return cDefSortParserRuleCall_0; }

		//DefRange
		public RuleCall getDefRangeParserRuleCall_1() { return cDefRangeParserRuleCall_1; }

		//DefOption
		public RuleCall getDefOptionParserRuleCall_2() { return cDefOptionParserRuleCall_2; }

		//DefCompletion
		public RuleCall getDefCompletionParserRuleCall_3() { return cDefCompletionParserRuleCall_3; }

		//DefNonInertia
		public RuleCall getDefNonInertiaParserRuleCall_4() { return cDefNonInertiaParserRuleCall_4; }
	}

	public class DefSortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefSort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReifiedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cReifiedReifiedKeyword_0_0 = (Keyword)cReifiedAssignment_0.eContents().get(0);
		private final Keyword cSortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		
		//DefSort:
		//	reified="reified"? "sort" name=ID (":" type=ID)?;
		public ParserRule getRule() { return rule; }

		//reified="reified"? "sort" name=ID (":" type=ID)?
		public Group getGroup() { return cGroup; }

		//reified="reified"?
		public Assignment getReifiedAssignment_0() { return cReifiedAssignment_0; }

		//"reified"
		public Keyword getReifiedReifiedKeyword_0_0() { return cReifiedReifiedKeyword_0_0; }

		//"sort"
		public Keyword getSortKeyword_1() { return cSortKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(":" type=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//type=ID
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_1_0() { return cTypeIDTerminalRuleCall_3_1_0; }
	}

	public class DefRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameDefSortCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDefSortIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDefSortCrossReference_1_0.eContents().get(1);
		private final Assignment cMinAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinINTTerminalRuleCall_2_0 = (RuleCall)cMinAssignment_2.eContents().get(0);
		private final Assignment cMaxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaxINTTerminalRuleCall_3_0 = (RuleCall)cMaxAssignment_3.eContents().get(0);
		
		//DefRange:
		//	"range" name=[DefSort] min=INT max=INT;
		public ParserRule getRule() { return rule; }

		//"range" name=[DefSort] min=INT max=INT
		public Group getGroup() { return cGroup; }

		//"range"
		public Keyword getRangeKeyword_0() { return cRangeKeyword_0; }

		//name=[DefSort]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[DefSort]
		public CrossReference getNameDefSortCrossReference_1_0() { return cNameDefSortCrossReference_1_0; }

		//ID
		public RuleCall getNameDefSortIDTerminalRuleCall_1_0_1() { return cNameDefSortIDTerminalRuleCall_1_0_1; }

		//min=INT
		public Assignment getMinAssignment_2() { return cMinAssignment_2; }

		//INT
		public RuleCall getMinINTTerminalRuleCall_2_0() { return cMinINTTerminalRuleCall_2_0; }

		//max=INT
		public Assignment getMaxAssignment_3() { return cMaxAssignment_3; }

		//INT
		public RuleCall getMaxINTTerminalRuleCall_3_0() { return cMaxINTTerminalRuleCall_3_0; }
	}

	public class DefOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DefOption:
		//	"option" name=ID value=INT;
		public ParserRule getRule() { return rule; }

		//"option" name=ID value=INT
		public Group getGroup() { return cGroup; }

		//"option"
		public Keyword getOptionKeyword_0() { return cOptionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}

	public class DefCompletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefCompletion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompletionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameDefinitionCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDefinitionCrossReference_1_0.eContents().get(1);
		
		//DefCompletion:
		//	"completion" name=[Definition];
		public ParserRule getRule() { return rule; }

		//"completion" name=[Definition]
		public Group getGroup() { return cGroup; }

		//"completion"
		public Keyword getCompletionKeyword_0() { return cCompletionKeyword_0; }

		//name=[Definition]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[Definition]
		public CrossReference getNameDefinitionCrossReference_1_0() { return cNameDefinitionCrossReference_1_0; }

		//ID
		public RuleCall getNameDefinitionIDTerminalRuleCall_1_0_1() { return cNameDefinitionIDTerminalRuleCall_1_0_1; }
	}

	public class DefNonInertiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefNonInertia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoninertialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameDefinitionCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDefinitionCrossReference_1_0.eContents().get(1);
		
		//DefNonInertia:
		//	"noninertial" name=[Definition];
		public ParserRule getRule() { return rule; }

		//"noninertial" name=[Definition]
		public Group getGroup() { return cGroup; }

		//"noninertial"
		public Keyword getNoninertialKeyword_0() { return cNoninertialKeyword_0; }

		//name=[Definition]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[Definition]
		public CrossReference getNameDefinitionCrossReference_1_0() { return cNameDefinitionCrossReference_1_0; }

		//ID
		public RuleCall getNameDefinitionIDTerminalRuleCall_1_0_1() { return cNameDefinitionIDTerminalRuleCall_1_0_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSortDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Statement:
		//	SortDefinition | Expression ".";
		public ParserRule getRule() { return rule; }

		//SortDefinition | Expression "."
		public Alternatives getAlternatives() { return cAlternatives; }

		//SortDefinition
		public RuleCall getSortDefinitionParserRuleCall_0() { return cSortDefinitionParserRuleCall_0; }

		//Expression "."
		public Group getGroup_1() { return cGroup_1; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1_0() { return cExpressionParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
	}

	public class SortDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SortDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSortDefSortCrossReference_0_0 = (CrossReference)cSortAssignment_0.eContents().get(0);
		private final RuleCall cSortDefSortIDTerminalRuleCall_0_0_1 = (RuleCall)cSortDefSortCrossReference_0_0.eContents().get(1);
		private final Assignment cDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDefinitionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_2_1_0 = (RuleCall)cDefinitionsAssignment_2_1.eContents().get(0);
		
		//SortDefinition:
		//	sort=[DefSort] definitions+=Definition ("," definitions+=Definition)*;
		public ParserRule getRule() { return rule; }

		//sort=[DefSort] definitions+=Definition ("," definitions+=Definition)*
		public Group getGroup() { return cGroup; }

		//sort=[DefSort]
		public Assignment getSortAssignment_0() { return cSortAssignment_0; }

		//[DefSort]
		public CrossReference getSortDefSortCrossReference_0_0() { return cSortDefSortCrossReference_0_0; }

		//ID
		public RuleCall getSortDefSortIDTerminalRuleCall_0_0_1() { return cSortDefSortIDTerminalRuleCall_0_0_1; }

		//definitions+=Definition
		public Assignment getDefinitionsAssignment_1() { return cDefinitionsAssignment_1; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_1_0() { return cDefinitionsDefinitionParserRuleCall_1_0; }

		//("," definitions+=Definition)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//definitions+=Definition
		public Assignment getDefinitionsAssignment_2_1() { return cDefinitionsAssignment_2_1; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_2_1_0() { return cDefinitionsDefinitionParserRuleCall_2_1_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsDeclaredParameterParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgsDeclaredParameterParserRuleCall_1_2_1_0 = (RuleCall)cArgsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReturnAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReturnDeclaredParameterParserRuleCall_2_1_0 = (RuleCall)cReturnAssignment_2_1.eContents().get(0);
		
		//Definition:
		//	name=ID ("(" args+=DeclaredParameter? ("," args+=DeclaredParameter)* ")")? (":" return+=DeclaredParameter)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("(" args+=DeclaredParameter? ("," args+=DeclaredParameter)* ")")? (":" return+=DeclaredParameter)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("(" args+=DeclaredParameter? ("," args+=DeclaredParameter)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//args+=DeclaredParameter?
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//DeclaredParameter
		public RuleCall getArgsDeclaredParameterParserRuleCall_1_1_0() { return cArgsDeclaredParameterParserRuleCall_1_1_0; }

		//("," args+=DeclaredParameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//args+=DeclaredParameter
		public Assignment getArgsAssignment_1_2_1() { return cArgsAssignment_1_2_1; }

		//DeclaredParameter
		public RuleCall getArgsDeclaredParameterParserRuleCall_1_2_1_0() { return cArgsDeclaredParameterParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//(":" return+=DeclaredParameter)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//return+=DeclaredParameter
		public Assignment getReturnAssignment_2_1() { return cReturnAssignment_2_1; }

		//DeclaredParameter
		public RuleCall getReturnDeclaredParameterParserRuleCall_2_1_0() { return cReturnDeclaredParameterParserRuleCall_2_1_0; }
	}

	public class DeclaredParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaredParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cNameDefSortCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameDefSortIDTerminalRuleCall_0_0_1 = (RuleCall)cNameDefSortCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cNameDefinitionCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDefinitionCrossReference_1_0.eContents().get(1);
		
		//DeclaredParameter:
		//	name=[DefSort] | name=[Definition];
		public ParserRule getRule() { return rule; }

		//name=[DefSort] | name=[Definition]
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=[DefSort]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[DefSort]
		public CrossReference getNameDefSortCrossReference_0_0() { return cNameDefSortCrossReference_0_0; }

		//ID
		public RuleCall getNameDefSortIDTerminalRuleCall_0_0_1() { return cNameDefSortIDTerminalRuleCall_0_0_1; }

		//name=[Definition]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[Definition]
		public CrossReference getNameDefinitionCrossReference_1_0() { return cNameDefinitionCrossReference_1_0; }

		//ID
		public RuleCall getNameDefinitionIDTerminalRuleCall_1_0_1() { return cNameDefinitionIDTerminalRuleCall_1_0_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifiersQualifierParserRuleCall_0_0 = (RuleCall)cQualifiersAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAssignmentOpParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//Expression:
		//	qualifiers+=Qualifier* expr=AssignmentOp;
		public ParserRule getRule() { return rule; }

		//qualifiers+=Qualifier* expr=AssignmentOp
		public Group getGroup() { return cGroup; }

		//qualifiers+=Qualifier*
		public Assignment getQualifiersAssignment_0() { return cQualifiersAssignment_0; }

		//Qualifier
		public RuleCall getQualifiersQualifierParserRuleCall_0_0() { return cQualifiersQualifierParserRuleCall_0_0; }

		//expr=AssignmentOp
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//AssignmentOp
		public RuleCall getExprAssignmentOpParserRuleCall_1_0() { return cExprAssignmentOpParserRuleCall_1_0; }
	}

	public class QualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Qualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExistsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Qualifier:
		//	Exists | Forall;
		public ParserRule getRule() { return rule; }

		//Exists | Forall
		public Alternatives getAlternatives() { return cAlternatives; }

		//Exists
		public RuleCall getExistsParserRuleCall_0() { return cExistsParserRuleCall_0; }

		//Forall
		public RuleCall getForallParserRuleCall_1() { return cForallParserRuleCall_1; }
	}

	public class ExistsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exists");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesDeclaredParameterParserRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamesDeclaredParameterParserRuleCall_2_1_0 = (RuleCall)cNamesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Exists:
		//	"{" names+=DeclaredParameter ("," names+=DeclaredParameter)* "}";
		public ParserRule getRule() { return rule; }

		//"{" names+=DeclaredParameter ("," names+=DeclaredParameter)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//names+=DeclaredParameter
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//DeclaredParameter
		public RuleCall getNamesDeclaredParameterParserRuleCall_1_0() { return cNamesDeclaredParameterParserRuleCall_1_0; }

		//("," names+=DeclaredParameter)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//names+=DeclaredParameter
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }

		//DeclaredParameter
		public RuleCall getNamesDeclaredParameterParserRuleCall_2_1_0() { return cNamesDeclaredParameterParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ForallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Forall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesDeclaredParameterParserRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamesDeclaredParameterParserRuleCall_2_1_0 = (RuleCall)cNamesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Forall:
		//	"[" names+=DeclaredParameter ("," names+=DeclaredParameter)* "]";
		public ParserRule getRule() { return rule; }

		//"[" names+=DeclaredParameter ("," names+=DeclaredParameter)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//names+=DeclaredParameter
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//DeclaredParameter
		public RuleCall getNamesDeclaredParameterParserRuleCall_1_0() { return cNamesDeclaredParameterParserRuleCall_1_0; }

		//("," names+=DeclaredParameter)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//names+=DeclaredParameter
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }

		//DeclaredParameter
		public RuleCall getNamesDeclaredParameterParserRuleCall_2_1_0() { return cNamesDeclaredParameterParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class AssignmentOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAssignPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cAssignMinLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cQualifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQualifiersQualifierParserRuleCall_1_1_0 = (RuleCall)cQualifiersAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AssignmentOp returns Expression:
		//	OrExp (({AssignPlus.left=current} "->" | {AssignMin.left=current} "<->") qualifiers+=Qualifier* right=OrExp)?;
		public ParserRule getRule() { return rule; }

		//OrExp (({AssignPlus.left=current} "->" | {AssignMin.left=current} "<->") qualifiers+=Qualifier* right=OrExp)?
		public Group getGroup() { return cGroup; }

		//OrExp
		public RuleCall getOrExpParserRuleCall_0() { return cOrExpParserRuleCall_0; }

		//(({AssignPlus.left=current} "->" | {AssignMin.left=current} "<->") qualifiers+=Qualifier* right=OrExp)?
		public Group getGroup_1() { return cGroup_1; }

		//{AssignPlus.left=current} "->" | {AssignMin.left=current} "<->"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{AssignPlus.left=current} "->"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{AssignPlus.left=current}
		public Action getAssignPlusLeftAction_1_0_0_0() { return cAssignPlusLeftAction_1_0_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_0_1() { return cHyphenMinusGreaterThanSignKeyword_1_0_0_1; }

		//{AssignMin.left=current} "<->"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{AssignMin.left=current}
		public Action getAssignMinLeftAction_1_0_1_0() { return cAssignMinLeftAction_1_0_1_0; }

		//"<->"
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1; }

		//qualifiers+=Qualifier*
		public Assignment getQualifiersAssignment_1_1() { return cQualifiersAssignment_1_1; }

		//Qualifier
		public RuleCall getQualifiersQualifierParserRuleCall_1_1_0() { return cQualifiersQualifierParserRuleCall_1_1_0; }

		//right=OrExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//OrExp
		public RuleCall getRightOrExpParserRuleCall_1_2_0() { return cRightOrExpParserRuleCall_1_2_0; }
	}

	public class OrExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cQualifiersAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cQualifiersQualifierParserRuleCall_1_2_0 = (RuleCall)cQualifiersAssignment_1_2.eContents().get(0);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightAndExpParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//OrExp returns Expression:
		//	AndExp ({Or.left=current} "|" qualifiers+=Qualifier* right=AndExp)*;
		public ParserRule getRule() { return rule; }

		//AndExp ({Or.left=current} "|" qualifiers+=Qualifier* right=AndExp)*
		public Group getGroup() { return cGroup; }

		//AndExp
		public RuleCall getAndExpParserRuleCall_0() { return cAndExpParserRuleCall_0; }

		//({Or.left=current} "|" qualifiers+=Qualifier* right=AndExp)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//qualifiers+=Qualifier*
		public Assignment getQualifiersAssignment_1_2() { return cQualifiersAssignment_1_2; }

		//Qualifier
		public RuleCall getQualifiersQualifierParserRuleCall_1_2_0() { return cQualifiersQualifierParserRuleCall_1_2_0; }

		//right=AndExp
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }

		//AndExp
		public RuleCall getRightAndExpParserRuleCall_1_3_0() { return cRightAndExpParserRuleCall_1_3_0; }
	}

	public class AndExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cQualifiersAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cQualifiersQualifierParserRuleCall_1_2_0 = (RuleCall)cQualifiersAssignment_1_2.eContents().get(0);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightRelationalParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//AndExp returns Expression:
		//	Relational ({And.left=current} "&" qualifiers+=Qualifier* right=Relational)*;
		public ParserRule getRule() { return rule; }

		//Relational ({And.left=current} "&" qualifiers+=Qualifier* right=Relational)*
		public Group getGroup() { return cGroup; }

		//Relational
		public RuleCall getRelationalParserRuleCall_0() { return cRelationalParserRuleCall_0; }

		//({And.left=current} "&" qualifiers+=Qualifier* right=Relational)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }

		//qualifiers+=Qualifier*
		public Assignment getQualifiersAssignment_1_2() { return cQualifiersAssignment_1_2; }

		//Qualifier
		public RuleCall getQualifiersQualifierParserRuleCall_1_2_0() { return cQualifiersQualifierParserRuleCall_1_2_0; }

		//right=Relational
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }

		//Relational
		public RuleCall getRightRelationalParserRuleCall_1_3_0() { return cRightRelationalParserRuleCall_1_3_0; }
	}

	public class RelationalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relational");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cRelNotEqLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cRelEqEqLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cRelLtEqLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cRelGtEqLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cRelEqLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Action cRelLtLeftAction_1_0_5_0 = (Action)cGroup_1_0_5.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_5_1 = (Keyword)cGroup_1_0_5.eContents().get(1);
		private final Group cGroup_1_0_6 = (Group)cAlternatives_1_0.eContents().get(6);
		private final Action cRelGtLeftAction_1_0_6_0 = (Action)cGroup_1_0_6.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_6_1 = (Keyword)cGroup_1_0_6.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Relational returns Expression:
		//	Addition (({RelNotEq.left=current} "!=" | {RelEqEq.left=current} "==" | {RelLtEq.left=current} ">=" |
		//	{RelGtEq.left=current} "<=" | {RelEq.left=current} "=" | {RelLt.left=current} "<" | {RelGt.left=current} ">")
		//	right=Addition)?;
		public ParserRule getRule() { return rule; }

		//Addition (({RelNotEq.left=current} "!=" | {RelEqEq.left=current} "==" | {RelLtEq.left=current} ">=" |
		//{RelGtEq.left=current} "<=" | {RelEq.left=current} "=" | {RelLt.left=current} "<" | {RelGt.left=current} ">")
		//right=Addition)?
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//(({RelNotEq.left=current} "!=" | {RelEqEq.left=current} "==" | {RelLtEq.left=current} ">=" | {RelGtEq.left=current} "<="
		//| {RelEq.left=current} "=" | {RelLt.left=current} "<" | {RelGt.left=current} ">") right=Addition)?
		public Group getGroup_1() { return cGroup_1; }

		//{RelNotEq.left=current} "!=" | {RelEqEq.left=current} "==" | {RelLtEq.left=current} ">=" | {RelGtEq.left=current} "<=" |
		//{RelEq.left=current} "=" | {RelLt.left=current} "<" | {RelGt.left=current} ">"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{RelNotEq.left=current} "!="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{RelNotEq.left=current}
		public Action getRelNotEqLeftAction_1_0_0_0() { return cRelNotEqLeftAction_1_0_0_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_0_1; }

		//{RelEqEq.left=current} "=="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{RelEqEq.left=current}
		public Action getRelEqEqLeftAction_1_0_1_0() { return cRelEqEqLeftAction_1_0_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_1_1() { return cEqualsSignEqualsSignKeyword_1_0_1_1; }

		//{RelLtEq.left=current} ">="
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{RelLtEq.left=current}
		public Action getRelLtEqLeftAction_1_0_2_0() { return cRelLtEqLeftAction_1_0_2_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_2_1() { return cGreaterThanSignEqualsSignKeyword_1_0_2_1; }

		//{RelGtEq.left=current} "<="
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{RelGtEq.left=current}
		public Action getRelGtEqLeftAction_1_0_3_0() { return cRelGtEqLeftAction_1_0_3_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_3_1() { return cLessThanSignEqualsSignKeyword_1_0_3_1; }

		//{RelEq.left=current} "="
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//{RelEq.left=current}
		public Action getRelEqLeftAction_1_0_4_0() { return cRelEqLeftAction_1_0_4_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_4_1() { return cEqualsSignKeyword_1_0_4_1; }

		//{RelLt.left=current} "<"
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//{RelLt.left=current}
		public Action getRelLtLeftAction_1_0_5_0() { return cRelLtLeftAction_1_0_5_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_5_1() { return cLessThanSignKeyword_1_0_5_1; }

		//{RelGt.left=current} ">"
		public Group getGroup_1_0_6() { return cGroup_1_0_6; }

		//{RelGt.left=current}
		public Action getRelGtLeftAction_1_0_6_0() { return cRelGtLeftAction_1_0_6_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_6_1() { return cGreaterThanSignKeyword_1_0_6_1; }

		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPowerParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//	Power (({Multi.left=current} "*" | {Div.left=current} "/") right=Power)*;
		public ParserRule getRule() { return rule; }

		//Power (({Multi.left=current} "*" | {Div.left=current} "/") right=Power)*
		public Group getGroup() { return cGroup; }

		//Power
		public RuleCall getPowerParserRuleCall_0() { return cPowerParserRuleCall_0; }

		//(({Multi.left=current} "*" | {Div.left=current} "/") right=Power)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current} "*" | {Div.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multi.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Div.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=Power
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Power
		public RuleCall getRightPowerParserRuleCall_1_1_0() { return cRightPowerParserRuleCall_1_1_0; }
	}

	public class PowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Power");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cPowLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Power returns Expression:
		//	UnaryExpr (({Pow.left=current} "^") right=UnaryExpr)*;
		public ParserRule getRule() { return rule; }

		//UnaryExpr (({Pow.left=current} "^") right=UnaryExpr)*
		public Group getGroup() { return cGroup; }

		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }

		//(({Pow.left=current} "^") right=UnaryExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//{Pow.left=current} "^"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Pow.left=current}
		public Action getPowLeftAction_1_0_0() { return cPowLeftAction_1_0_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0_1() { return cCircumflexAccentKeyword_1_0_1; }

		//right=UnaryExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryExpr
		public RuleCall getRightUnaryExprParserRuleCall_1_1_0() { return cRightUnaryExprParserRuleCall_1_1_0; }
	}

	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpUnarOpEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cQualifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiersQualifierParserRuleCall_1_0 = (RuleCall)cQualifiersAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightPrePrimaryExprParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//UnaryExpr returns Expression:
		//	op=UnarOp? qualifiers+=Qualifier* right=PrePrimaryExpr;
		public ParserRule getRule() { return rule; }

		//op=UnarOp? qualifiers+=Qualifier* right=PrePrimaryExpr
		public Group getGroup() { return cGroup; }

		//op=UnarOp?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//UnarOp
		public RuleCall getOpUnarOpEnumRuleCall_0_0() { return cOpUnarOpEnumRuleCall_0_0; }

		//qualifiers+=Qualifier*
		public Assignment getQualifiersAssignment_1() { return cQualifiersAssignment_1; }

		//Qualifier
		public RuleCall getQualifiersQualifierParserRuleCall_1_0() { return cQualifiersQualifierParserRuleCall_1_0; }

		//right=PrePrimaryExpr
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//PrePrimaryExpr
		public RuleCall getRightPrePrimaryExprParserRuleCall_2_0() { return cRightPrePrimaryExprParserRuleCall_2_0; }
	}

	public class PrePrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrePrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PrePrimaryExpr returns Expression:
		//	TerminalExpression | AbstractRef | "(" Expression ")";
		public ParserRule getRule() { return rule; }

		//TerminalExpression | AbstractRef | "(" Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//AbstractRef
		public RuleCall getAbstractRefParserRuleCall_1() { return cAbstractRefParserRuleCall_1; }

		//"(" Expression ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class AbstractRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDeclaredParameterParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFunctionRefFuncAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_1_1_0 = (RuleCall)cArgsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cArgsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_1_2_1_0 = (RuleCall)cArgsAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//AbstractRef returns Expression:
		//	DeclaredParameter ({FunctionRef.func=current} ("(" args+=Expression? ("," args+=Expression)* ")"))?;
		public ParserRule getRule() { return rule; }

		//DeclaredParameter ({FunctionRef.func=current} ("(" args+=Expression? ("," args+=Expression)* ")"))?
		public Group getGroup() { return cGroup; }

		//DeclaredParameter
		public RuleCall getDeclaredParameterParserRuleCall_0() { return cDeclaredParameterParserRuleCall_0; }

		//({FunctionRef.func=current} ("(" args+=Expression? ("," args+=Expression)* ")"))?
		public Group getGroup_1() { return cGroup_1; }

		//{FunctionRef.func=current}
		public Action getFunctionRefFuncAction_1_0() { return cFunctionRefFuncAction_1_0; }

		//"(" args+=Expression? ("," args+=Expression)* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//args+=Expression?
		public Assignment getArgsAssignment_1_1_1() { return cArgsAssignment_1_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_1_1_0() { return cArgsExpressionParserRuleCall_1_1_1_0; }

		//("," args+=Expression)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }

		//args+=Expression
		public Assignment getArgsAssignment_1_1_2_1() { return cArgsAssignment_1_1_2_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_1_2_1_0() { return cArgsExpressionParserRuleCall_1_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3() { return cRightParenthesisKeyword_1_1_3; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//TerminalExpression:
		//	{IntLiteral} value=INT | {StringLiteral} value=STRING | {BooleanLiteral} value=BOOLEAN;
		public ParserRule getRule() { return rule; }

		//{IntLiteral} value=INT | {StringLiteral} value=STRING | {BooleanLiteral} value=BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntLiteral} value=INT
		public Group getGroup_0() { return cGroup_0; }

		//{IntLiteral}
		public Action getIntLiteralAction_0_0() { return cIntLiteralAction_0_0; }

		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }

		//{StringLiteral} value=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{StringLiteral}
		public Action getStringLiteralAction_1_0() { return cStringLiteralAction_1_0; }

		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }

		//{BooleanLiteral} value=BOOLEAN
		public Group getGroup_2() { return cGroup_2; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_2_0() { return cBooleanLiteralAction_2_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_2_1_0() { return cValueBOOLEANTerminalRuleCall_2_1_0; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// -----
		//FQN returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class UnarOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnarOp");
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNOTExclamationMarkKeyword_0 = (Keyword)cNOTEnumLiteralDeclaration.eContents().get(0);
		
		//enum UnarOp:
		//	NOT="!";
		public EnumRule getRule() { return rule; }

		//NOT="!"
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration() { return cNOTEnumLiteralDeclaration; }

		//"!"
		public Keyword getNOTExclamationMarkKeyword_0() { return cNOTExclamationMarkKeyword_0; }
	}
	
	private ModelElements pModel;
	private ImportElements pImport;
	private DeclarationElements pDeclaration;
	private DefSortElements pDefSort;
	private DefRangeElements pDefRange;
	private DefOptionElements pDefOption;
	private DefCompletionElements pDefCompletion;
	private DefNonInertiaElements pDefNonInertia;
	private StatementElements pStatement;
	private SortDefinitionElements pSortDefinition;
	private DefinitionElements pDefinition;
	private DeclaredParameterElements pDeclaredParameter;
	private ExpressionElements pExpression;
	private QualifierElements pQualifier;
	private ExistsElements pExists;
	private ForallElements pForall;
	private AssignmentOpElements pAssignmentOp;
	private OrExpElements pOrExp;
	private AndExpElements pAndExp;
	private RelationalElements pRelational;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private PowerElements pPower;
	private UnaryExprElements pUnaryExpr;
	private UnarOpElements unknownRuleUnarOp;
	private PrePrimaryExprElements pPrePrimaryExpr;
	private AbstractRefElements pAbstractRef;
	private TerminalExpressionElements pTerminalExpression;
	private FQNElements pFQN;
	private TerminalRule tINT;
	private TerminalRule tBOOLEAN;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EventCalculusGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	imports+=Import* (declarations+=Declaration | statements+=Statement)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//	"load" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Declaration:
	//	DefSort | DefRange | DefOption | DefCompletion | DefNonInertia;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//DefSort:
	//	reified="reified"? "sort" name=ID (":" type=ID)?;
	public DefSortElements getDefSortAccess() {
		return (pDefSort != null) ? pDefSort : (pDefSort = new DefSortElements());
	}
	
	public ParserRule getDefSortRule() {
		return getDefSortAccess().getRule();
	}

	//DefRange:
	//	"range" name=[DefSort] min=INT max=INT;
	public DefRangeElements getDefRangeAccess() {
		return (pDefRange != null) ? pDefRange : (pDefRange = new DefRangeElements());
	}
	
	public ParserRule getDefRangeRule() {
		return getDefRangeAccess().getRule();
	}

	//DefOption:
	//	"option" name=ID value=INT;
	public DefOptionElements getDefOptionAccess() {
		return (pDefOption != null) ? pDefOption : (pDefOption = new DefOptionElements());
	}
	
	public ParserRule getDefOptionRule() {
		return getDefOptionAccess().getRule();
	}

	//DefCompletion:
	//	"completion" name=[Definition];
	public DefCompletionElements getDefCompletionAccess() {
		return (pDefCompletion != null) ? pDefCompletion : (pDefCompletion = new DefCompletionElements());
	}
	
	public ParserRule getDefCompletionRule() {
		return getDefCompletionAccess().getRule();
	}

	//DefNonInertia:
	//	"noninertial" name=[Definition];
	public DefNonInertiaElements getDefNonInertiaAccess() {
		return (pDefNonInertia != null) ? pDefNonInertia : (pDefNonInertia = new DefNonInertiaElements());
	}
	
	public ParserRule getDefNonInertiaRule() {
		return getDefNonInertiaAccess().getRule();
	}

	//Statement:
	//	SortDefinition | Expression ".";
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//SortDefinition:
	//	sort=[DefSort] definitions+=Definition ("," definitions+=Definition)*;
	public SortDefinitionElements getSortDefinitionAccess() {
		return (pSortDefinition != null) ? pSortDefinition : (pSortDefinition = new SortDefinitionElements());
	}
	
	public ParserRule getSortDefinitionRule() {
		return getSortDefinitionAccess().getRule();
	}

	//Definition:
	//	name=ID ("(" args+=DeclaredParameter? ("," args+=DeclaredParameter)* ")")? (":" return+=DeclaredParameter)?;
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//DeclaredParameter:
	//	name=[DefSort] | name=[Definition];
	public DeclaredParameterElements getDeclaredParameterAccess() {
		return (pDeclaredParameter != null) ? pDeclaredParameter : (pDeclaredParameter = new DeclaredParameterElements());
	}
	
	public ParserRule getDeclaredParameterRule() {
		return getDeclaredParameterAccess().getRule();
	}

	//Expression:
	//	qualifiers+=Qualifier* expr=AssignmentOp;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Qualifier:
	//	Exists | Forall;
	public QualifierElements getQualifierAccess() {
		return (pQualifier != null) ? pQualifier : (pQualifier = new QualifierElements());
	}
	
	public ParserRule getQualifierRule() {
		return getQualifierAccess().getRule();
	}

	//Exists:
	//	"{" names+=DeclaredParameter ("," names+=DeclaredParameter)* "}";
	public ExistsElements getExistsAccess() {
		return (pExists != null) ? pExists : (pExists = new ExistsElements());
	}
	
	public ParserRule getExistsRule() {
		return getExistsAccess().getRule();
	}

	//Forall:
	//	"[" names+=DeclaredParameter ("," names+=DeclaredParameter)* "]";
	public ForallElements getForallAccess() {
		return (pForall != null) ? pForall : (pForall = new ForallElements());
	}
	
	public ParserRule getForallRule() {
		return getForallAccess().getRule();
	}

	//AssignmentOp returns Expression:
	//	OrExp (({AssignPlus.left=current} "->" | {AssignMin.left=current} "<->") qualifiers+=Qualifier* right=OrExp)?;
	public AssignmentOpElements getAssignmentOpAccess() {
		return (pAssignmentOp != null) ? pAssignmentOp : (pAssignmentOp = new AssignmentOpElements());
	}
	
	public ParserRule getAssignmentOpRule() {
		return getAssignmentOpAccess().getRule();
	}

	//OrExp returns Expression:
	//	AndExp ({Or.left=current} "|" qualifiers+=Qualifier* right=AndExp)*;
	public OrExpElements getOrExpAccess() {
		return (pOrExp != null) ? pOrExp : (pOrExp = new OrExpElements());
	}
	
	public ParserRule getOrExpRule() {
		return getOrExpAccess().getRule();
	}

	//AndExp returns Expression:
	//	Relational ({And.left=current} "&" qualifiers+=Qualifier* right=Relational)*;
	public AndExpElements getAndExpAccess() {
		return (pAndExp != null) ? pAndExp : (pAndExp = new AndExpElements());
	}
	
	public ParserRule getAndExpRule() {
		return getAndExpAccess().getRule();
	}

	//Relational returns Expression:
	//	Addition (({RelNotEq.left=current} "!=" | {RelEqEq.left=current} "==" | {RelLtEq.left=current} ">=" |
	//	{RelGtEq.left=current} "<=" | {RelEq.left=current} "=" | {RelLt.left=current} "<" | {RelGt.left=current} ">")
	//	right=Addition)?;
	public RelationalElements getRelationalAccess() {
		return (pRelational != null) ? pRelational : (pRelational = new RelationalElements());
	}
	
	public ParserRule getRelationalRule() {
		return getRelationalAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	Power (({Multi.left=current} "*" | {Div.left=current} "/") right=Power)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Power returns Expression:
	//	UnaryExpr (({Pow.left=current} "^") right=UnaryExpr)*;
	public PowerElements getPowerAccess() {
		return (pPower != null) ? pPower : (pPower = new PowerElements());
	}
	
	public ParserRule getPowerRule() {
		return getPowerAccess().getRule();
	}

	//UnaryExpr returns Expression:
	//	op=UnarOp? qualifiers+=Qualifier* right=PrePrimaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return (pUnaryExpr != null) ? pUnaryExpr : (pUnaryExpr = new UnaryExprElements());
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}

	//enum UnarOp:
	//	NOT="!";
	public UnarOpElements getUnarOpAccess() {
		return (unknownRuleUnarOp != null) ? unknownRuleUnarOp : (unknownRuleUnarOp = new UnarOpElements());
	}
	
	public EnumRule getUnarOpRule() {
		return getUnarOpAccess().getRule();
	}

	//PrePrimaryExpr returns Expression:
	//	TerminalExpression | AbstractRef | "(" Expression ")";
	public PrePrimaryExprElements getPrePrimaryExprAccess() {
		return (pPrePrimaryExpr != null) ? pPrePrimaryExpr : (pPrePrimaryExpr = new PrePrimaryExprElements());
	}
	
	public ParserRule getPrePrimaryExprRule() {
		return getPrePrimaryExprAccess().getRule();
	}

	//AbstractRef returns Expression:
	//	DeclaredParameter ({FunctionRef.func=current} ("(" args+=Expression? ("," args+=Expression)* ")"))?;
	public AbstractRefElements getAbstractRefAccess() {
		return (pAbstractRef != null) ? pAbstractRef : (pAbstractRef = new AbstractRefElements());
	}
	
	public ParserRule getAbstractRefRule() {
		return getAbstractRefAccess().getRule();
	}

	//TerminalExpression:
	//	{IntLiteral} value=INT | {StringLiteral} value=STRING | {BooleanLiteral} value=BOOLEAN;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//// -----
	//FQN returns ecore::EString:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0" | "1".."9" "0".."9"*;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "u" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	";" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
