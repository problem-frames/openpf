/*
 * generated by Xtext
 */
grammar InternalEventCalculus;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package uk.ac.open.event.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.open.event.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.open.event.services.EventCalculusGrammarAccess;

}

@parser::members {

 	private EventCalculusGrammarAccess grammarAccess;
 	
    public InternalEventCalculusParser(TokenStream input, EventCalculusGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected EventCalculusGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"uk.ac.open.event.EventCalculus.Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_declarations_1_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_1_0, 
        		"uk.ac.open.event.EventCalculus.Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_1_1_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"uk.ac.open.event.EventCalculus.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='load' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getLoadKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"uk.ac.open.event.EventCalculus.STRING");
	    }

)
))
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=';' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getSemicolonKeyword_0());
    }
	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationAccess().getNumberSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getTypeANNOTATION_TYPEEnumRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleANNOTATION_TYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"uk.ac.open.event.EventCalculus.ANNOTATION_TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_value_3_0=RULE_STRING
		{
			newLeafNode(lv_value_3_0, grammarAccess.getAnnotationAccess().getValueSTRINGTerminalRuleCall_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"uk.ac.open.event.EventCalculus.STRING");
	    }

)
)
    |(
(
		lv_value_4_0=	'not' 
    {
        newLeafNode(lv_value_4_0, grammarAccess.getAnnotationAccess().getValueNotKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_4_0, "not");
	    }

)
))?)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getDefSortParserRuleCall_0()); 
    }
    this_DefSort_0=ruleDefSort
    { 
        $current = $this_DefSort_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getDefRangeParserRuleCall_1()); 
    }
    this_DefRange_1=ruleDefRange
    { 
        $current = $this_DefRange_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getDefOptionParserRuleCall_2()); 
    }
    this_DefOption_2=ruleDefOption
    { 
        $current = $this_DefOption_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getDefCompletionParserRuleCall_3()); 
    }
    this_DefCompletion_3=ruleDefCompletion
    { 
        $current = $this_DefCompletion_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getDefNonInertiaParserRuleCall_4()); 
    }
    this_DefNonInertia_4=ruleDefNonInertia
    { 
        $current = $this_DefNonInertia_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getDefXorParserRuleCall_5()); 
    }
    this_DefXor_5=ruleDefXor
    { 
        $current = $this_DefXor_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getDefMutexParserRuleCall_6()); 
    }
    this_DefMutex_6=ruleDefMutex
    { 
        $current = $this_DefMutex_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleDefSort
entryRuleDefSort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefSortRule()); }
	 iv_ruleDefSort=ruleDefSort 
	 { $current=$iv_ruleDefSort.current; } 
	 EOF 
;

// Rule DefSort
ruleDefSort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefSortAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefSortRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"uk.ac.open.event.EventCalculus.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_reified_1_0=	'reified' 
    {
        newLeafNode(lv_reified_1_0, grammarAccess.getDefSortAccess().getReifiedReifiedKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefSortRule());
	        }
       		setWithLastConsumed($current, "reified", lv_reified_1_0, "reified");
	    }

)
)?	otherlv_2='sort' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefSortAccess().getSortKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getDefSortAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefSortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"uk.ac.open.event.EventCalculus.ID");
	    }

)
)(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefSortAccess().getColonKeyword_4_0());
    }
(
(
		lv_type_5_0=RULE_ID
		{
			newLeafNode(lv_type_5_0, grammarAccess.getDefSortAccess().getTypeIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefSortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"uk.ac.open.event.EventCalculus.ID");
	    }

)
))?)
;





// Entry rule entryRuleDefRange
entryRuleDefRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefRangeRule()); }
	 iv_ruleDefRange=ruleDefRange 
	 { $current=$iv_ruleDefRange.current; } 
	 EOF 
;

// Rule DefRange
ruleDefRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefRangeAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefRangeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"uk.ac.open.event.EventCalculus.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='range' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefRangeAccess().getRangeKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefRangeRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getDefRangeAccess().getNameDefSortCrossReference_2_0()); 
	}

)
)(
(
		lv_min_3_0=RULE_INT
		{
			newLeafNode(lv_min_3_0, grammarAccess.getDefRangeAccess().getMinINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefRangeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"min",
        		lv_min_3_0, 
        		"uk.ac.open.event.EventCalculus.INT");
	    }

)
)(
(
		lv_max_4_0=RULE_INT
		{
			newLeafNode(lv_max_4_0, grammarAccess.getDefRangeAccess().getMaxINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefRangeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"max",
        		lv_max_4_0, 
        		"uk.ac.open.event.EventCalculus.INT");
	    }

)
))
;





// Entry rule entryRuleDefOption
entryRuleDefOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefOptionRule()); }
	 iv_ruleDefOption=ruleDefOption 
	 { $current=$iv_ruleDefOption.current; } 
	 EOF 
;

// Rule DefOption
ruleDefOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefOptionAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefOptionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"uk.ac.open.event.EventCalculus.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((	otherlv_1='option' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefOptionAccess().getOptionKeyword_1_0_0());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getDefOptionAccess().getNameIDTerminalRuleCall_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefOptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"uk.ac.open.event.EventCalculus.ID");
	    }

)
)(
(
		lv_value_3_0=RULE_INT
		{
			newLeafNode(lv_value_3_0, grammarAccess.getDefOptionAccess().getValueINTTerminalRuleCall_1_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefOptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"uk.ac.open.event.EventCalculus.INT");
	    }

)
))
    |(	otherlv_4='option' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefOptionAccess().getOptionKeyword_1_1_0());
    }
(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getDefOptionAccess().getNameIDTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefOptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"uk.ac.open.event.EventCalculus.ID");
	    }

)
)(
(
		lv_value2_6_0=RULE_ID
		{
			newLeafNode(lv_value2_6_0, grammarAccess.getDefOptionAccess().getValue2IDTerminalRuleCall_1_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefOptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value2",
        		lv_value2_6_0, 
        		"uk.ac.open.event.EventCalculus.ID");
	    }

)
))))
;





// Entry rule entryRuleDefCompletion
entryRuleDefCompletion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefCompletionRule()); }
	 iv_ruleDefCompletion=ruleDefCompletion 
	 { $current=$iv_ruleDefCompletion.current; } 
	 EOF 
;

// Rule DefCompletion
ruleDefCompletion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefCompletionAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefCompletionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"uk.ac.open.event.EventCalculus.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='completion' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefCompletionAccess().getCompletionKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefCompletionAccess().getTypeLabelTypeEnumRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleLabelType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefCompletionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"uk.ac.open.event.EventCalculus.LabelType");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefCompletionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getDefCompletionAccess().getLabelDefinitionCrossReference_3_0()); 
	}

)
))
;





// Entry rule entryRuleDefNonInertia
entryRuleDefNonInertia returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefNonInertiaRule()); }
	 iv_ruleDefNonInertia=ruleDefNonInertia 
	 { $current=$iv_ruleDefNonInertia.current; } 
	 EOF 
;

// Rule DefNonInertia
ruleDefNonInertia returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefNonInertiaAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefNonInertiaRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"uk.ac.open.event.EventCalculus.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='noninertial' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefNonInertiaAccess().getNoninertialKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefNonInertiaRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getDefNonInertiaAccess().getNamesDefinitionCrossReference_2_0()); 
	}

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefNonInertiaAccess().getCommaKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefNonInertiaRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getDefNonInertiaAccess().getNamesDefinitionCrossReference_3_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleDefXor
entryRuleDefXor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefXorRule()); }
	 iv_ruleDefXor=ruleDefXor 
	 { $current=$iv_ruleDefXor.current; } 
	 EOF 
;

// Rule DefXor
ruleDefXor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefXorAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefXorRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"uk.ac.open.event.EventCalculus.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='xor' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefXorAccess().getXorKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefXorRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getDefXorAccess().getNamesDefinitionCrossReference_2_0()); 
	}

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefXorAccess().getCommaKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefXorRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getDefXorAccess().getNamesDefinitionCrossReference_3_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleDefMutex
entryRuleDefMutex returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefMutexRule()); }
	 iv_ruleDefMutex=ruleDefMutex 
	 { $current=$iv_ruleDefMutex.current; } 
	 EOF 
;

// Rule DefMutex
ruleDefMutex returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefMutexAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefMutexRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"uk.ac.open.event.EventCalculus.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='mutex' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefMutexAccess().getMutexKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefMutexRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getDefMutexAccess().getNamesDefinitionCrossReference_2_0()); 
	}

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefMutexAccess().getCommaKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefMutexRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getDefMutexAccess().getNamesDefinitionCrossReference_3_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSortDefinitionParserRuleCall_0()); 
    }
    this_SortDefinition_0=ruleSortDefinition
    { 
        $current = $this_SortDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLabeledExpressionParserRuleCall_1()); 
    }
    this_LabeledExpression_1=ruleLabeledExpression
    { 
        $current = $this_LabeledExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLabeledExpression
entryRuleLabeledExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabeledExpressionRule()); }
	 iv_ruleLabeledExpression=ruleLabeledExpression 
	 { $current=$iv_ruleLabeledExpression.current; } 
	 EOF 
;

// Rule LabeledExpression
ruleLabeledExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLabeledExpressionAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLabeledExpressionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"uk.ac.open.event.EventCalculus.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getLabeledExpressionAccess().getNameLabelTypeEnumRuleCall_1_0_0()); 
	    }
		lv_name_1_0=ruleLabelType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLabeledExpressionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"uk.ac.open.event.EventCalculus.LabelType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLabeledExpressionAccess().getColonKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLabeledExpressionAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLabeledExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"uk.ac.open.event.EventCalculus.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLabeledExpressionAccess().getFullStopKeyword_3());
    }
)
;





// Entry rule entryRuleSortDefinition
entryRuleSortDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSortDefinitionRule()); }
	 iv_ruleSortDefinition=ruleSortDefinition 
	 { $current=$iv_ruleSortDefinition.current; } 
	 EOF 
;

// Rule SortDefinition
ruleSortDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSortDefinitionAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSortDefinitionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"uk.ac.open.event.EventCalculus.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSortDefinitionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSortDefinitionAccess().getSortDefSortCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSortDefinitionAccess().getDefinitionsDefinitionParserRuleCall_2_0()); 
	    }
		lv_definitions_2_0=ruleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSortDefinitionRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_2_0, 
        		"uk.ac.open.event.EventCalculus.Definition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSortDefinitionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSortDefinitionAccess().getDefinitionsDefinitionParserRuleCall_3_1_0()); 
	    }
		lv_definitions_4_0=ruleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSortDefinitionRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_4_0, 
        		"uk.ac.open.event.EventCalculus.Definition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"uk.ac.open.event.EventCalculus.ID");
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getDefinitionAccess().getArgsDefinesCrossReference_1_1_0()); 
	}

)
)?(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefinitionAccess().getCommaKeyword_1_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getDefinitionAccess().getArgsDefinesCrossReference_1_2_1_0()); 
	}

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_1_3());
    }
)?(	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefinitionAccess().getColonKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getDefinitionAccess().getReturnDefinesCrossReference_2_1_0()); 
	}

)
))?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExprAssignmentOpParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleAssignmentOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"uk.ac.open.event.EventCalculus.AssignmentOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getQualifiersQualifierParserRuleCall_1_0_0()); 
	    }
		lv_qualifiers_1_0=ruleQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"qualifiers",
        		lv_qualifiers_1_0, 
        		"uk.ac.open.event.EventCalculus.Qualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"uk.ac.open.event.EventCalculus.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleQualifier
entryRuleQualifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifierRule()); }
	 iv_ruleQualifier=ruleQualifier 
	 { $current=$iv_ruleQualifier.current; } 
	 EOF 
;

// Rule Qualifier
ruleQualifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifierAccess().getExistsParserRuleCall_0()); 
    }
    this_Exists_0=ruleExists
    { 
        $current = $this_Exists_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQualifierAccess().getForallParserRuleCall_1()); 
    }
    this_Forall_1=ruleForall
    { 
        $current = $this_Forall_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParameters
entryRuleParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	 iv_ruleParameters=ruleParameters 
	 { $current=$iv_ruleParameters.current; } 
	 EOF 
;

// Rule Parameters
ruleParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParametersRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getParametersAccess().getNamesDefinesCrossReference_0_0()); 
	}

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParametersAccess().getCommaKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParametersRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getParametersAccess().getNamesDefinesCrossReference_1_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleExists
entryRuleExists returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExistsRule()); }
	 iv_ruleExists=ruleExists 
	 { $current=$iv_ruleExists.current; } 
	 EOF 
;

// Rule Exists
ruleExists returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExistsAccess().getOpUnaryOpEnumRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleUnaryOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistsRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"uk.ac.open.event.EventCalculus.UnaryOp");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExistsAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExistsAccess().getParametersParametersParserRuleCall_2_0()); 
	    }
		lv_parameters_2_0=ruleParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistsRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"uk.ac.open.event.EventCalculus.Parameters");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExistsAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleForall
entryRuleForall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForallRule()); }
	 iv_ruleForall=ruleForall 
	 { $current=$iv_ruleForall.current; } 
	 EOF 
;

// Rule Forall
ruleForall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getForallAccess().getOpUnaryOpEnumRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleUnaryOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForallRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"uk.ac.open.event.EventCalculus.UnaryOp");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForallAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForallAccess().getParametersParametersParserRuleCall_2_0()); 
	    }
		lv_parameters_2_0=ruleParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForallRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"uk.ac.open.event.EventCalculus.Parameters");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForallAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleAssignmentOp
entryRuleAssignmentOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentOpRule()); }
	 iv_ruleAssignmentOp=ruleAssignmentOp 
	 { $current=$iv_ruleAssignmentOp.current; } 
	 EOF 
;

// Rule AssignmentOp
ruleAssignmentOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignmentOpAccess().getOrExpParserRuleCall_0()); 
    }
    this_OrExp_0=ruleOrExp
    { 
        $current = $this_OrExp_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentOpAccess().getAssignPlusLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignmentOpAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentOpAccess().getAssignMinLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='<->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssignmentOpAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentOpAccess().getQQualifierParserRuleCall_1_1_0()); 
	    }
		lv_q_5_0=ruleQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentOpRule());
	        }
       		set(
       			$current, 
       			"q",
        		lv_q_5_0, 
        		"uk.ac.open.event.EventCalculus.Qualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentOpAccess().getRightOrExpParserRuleCall_1_2_0()); 
	    }
		lv_right_6_0=ruleOrExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentOpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"uk.ac.open.event.EventCalculus.OrExp");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExp
entryRuleOrExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpRule()); }
	 iv_ruleOrExp=ruleOrExp 
	 { $current=$iv_ruleOrExp.current; } 
	 EOF 
;

// Rule OrExp
ruleOrExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpAccess().getAndExpParserRuleCall_0()); 
    }
    this_AndExp_0=ruleAndExp
    { 
        $current = $this_AndExp_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpAccess().getOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExpAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpAccess().getQQualifierParserRuleCall_1_2_0()); 
	    }
		lv_q_3_0=ruleQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpRule());
	        }
       		set(
       			$current, 
       			"q",
        		lv_q_3_0, 
        		"uk.ac.open.event.EventCalculus.Qualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpAccess().getRightAndExpParserRuleCall_1_3_0()); 
	    }
		lv_right_4_0=ruleAndExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"uk.ac.open.event.EventCalculus.AndExp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExp
entryRuleAndExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpRule()); }
	 iv_ruleAndExp=ruleAndExp 
	 { $current=$iv_ruleAndExp.current; } 
	 EOF 
;

// Rule AndExp
ruleAndExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpAccess().getRelationalParserRuleCall_0()); 
    }
    this_Relational_0=ruleRelational
    { 
        $current = $this_Relational_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpAccess().getAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExpAccess().getAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpAccess().getQQualifierParserRuleCall_1_2_0()); 
	    }
		lv_q_3_0=ruleQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpRule());
	        }
       		set(
       			$current, 
       			"q",
        		lv_q_3_0, 
        		"uk.ac.open.event.EventCalculus.Qualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpAccess().getRightRelationalParserRuleCall_1_3_0()); 
	    }
		lv_right_4_0=ruleRelational		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"uk.ac.open.event.EventCalculus.Relational");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelational
entryRuleRelational returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalRule()); }
	 iv_ruleRelational=ruleRelational 
	 { $current=$iv_ruleRelational.current; } 
	 EOF 
;

// Rule Relational
ruleRelational returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalAccess().getAdditionParserRuleCall_0()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelNotEqLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='!=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRelationalAccess().getExclamationMarkEqualsSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelEqEqLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='==' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRelationalAccess().getEqualsSignEqualsSignKeyword_1_0_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelLtEqLeftAction_1_0_2_0(),
            $current);
    }
)	otherlv_6='>=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRelationalAccess().getGreaterThanSignEqualsSignKeyword_1_0_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelGtEqLeftAction_1_0_3_0(),
            $current);
    }
)	otherlv_8='<=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRelationalAccess().getLessThanSignEqualsSignKeyword_1_0_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelEqLeftAction_1_0_4_0(),
            $current);
    }
)	otherlv_10='=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRelationalAccess().getEqualsSignKeyword_1_0_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelLtLeftAction_1_0_5_0(),
            $current);
    }
)	otherlv_12='<' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRelationalAccess().getLessThanSignKeyword_1_0_5_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelGtLeftAction_1_0_6_0(),
            $current);
    }
)	otherlv_14='>' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRelationalAccess().getGreaterThanSignKeyword_1_0_6_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalAccess().getRightAdditionParserRuleCall_1_1_0()); 
	    }
		lv_right_15_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_15_0, 
        		"uk.ac.open.event.EventCalculus.Addition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"uk.ac.open.event.EventCalculus.Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getPowerParserRuleCall_0()); 
    }
    this_Power_0=rulePower
    { 
        $current = $this_Power_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPowerParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=rulePower		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"uk.ac.open.event.EventCalculus.Power");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePower
entryRulePower returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowerRule()); }
	 iv_rulePower=rulePower 
	 { $current=$iv_rulePower.current; } 
	 EOF 
;

// Rule Power
rulePower returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPowerAccess().getUnaryExprParserRuleCall_0()); 
    }
    this_UnaryExpr_0=ruleUnaryExpr
    { 
        $current = $this_UnaryExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPowerAccess().getPowLeftAction_1_0_0(),
            $current);
    }
)	otherlv_2='^' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPowerAccess().getCircumflexAccentKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getRightUnaryExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleUnaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"uk.ac.open.event.EventCalculus.UnaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	 iv_ruleUnaryExpr=ruleUnaryExpr 
	 { $current=$iv_ruleUnaryExpr.current; } 
	 EOF 
;

// Rule UnaryExpr
ruleUnaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprAccess().getOpUnaryOpEnumRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleUnaryOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"uk.ac.open.event.EventCalculus.UnaryOp");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprAccess().getRightPrePrimaryExprParserRuleCall_1_0()); 
	    }
		lv_right_1_0=rulePrePrimaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"uk.ac.open.event.EventCalculus.PrePrimaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrePrimaryExpr
entryRulePrePrimaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrePrimaryExprRule()); }
	 iv_rulePrePrimaryExpr=rulePrePrimaryExpr 
	 { $current=$iv_rulePrePrimaryExpr.current; } 
	 EOF 
;

// Rule PrePrimaryExpr
rulePrePrimaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrePrimaryExprAccess().getTerminalExpressionParserRuleCall_0()); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrePrimaryExprAccess().getAbstractRefParserRuleCall_1()); 
    }
    this_AbstractRef_1=ruleAbstractRef
    { 
        $current = $this_AbstractRef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrePrimaryExprAccess().getLeftParenthesisKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrePrimaryExprAccess().getExpressionParserRuleCall_2_1()); 
    }
    this_Expression_3=ruleExpression
    { 
        $current = $this_Expression_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrePrimaryExprAccess().getRightParenthesisKeyword_2_2());
    }
)
    |(	otherlv_5='-' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrePrimaryExprAccess().getHyphenMinusKeyword_3_0());
    }
(
(
		lv_n_6_0=RULE_INT
		{
			newLeafNode(lv_n_6_0, grammarAccess.getPrePrimaryExprAccess().getNINTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrePrimaryExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"n",
        		lv_n_6_0, 
        		"uk.ac.open.event.EventCalculus.INT");
	    }

)
)))
;





// Entry rule entryRuleAbstractRef
entryRuleAbstractRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractRefRule()); }
	 iv_ruleAbstractRef=ruleAbstractRef 
	 { $current=$iv_ruleAbstractRef.current; } 
	 EOF 
;

// Rule AbstractRef
ruleAbstractRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAbstractRefAccess().getDefineDefinesCrossReference_0_0()); 
	}

)
)((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAbstractRefAccess().getFunctionRefFuncAction_1_0(),
            $current);
    }
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbstractRefAccess().getLeftParenthesisKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractRefAccess().getArgsExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_args_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractRefRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"uk.ac.open.event.EventCalculus.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAbstractRefAccess().getCommaKeyword_1_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractRefAccess().getArgsExpressionParserRuleCall_1_1_2_1_0()); 
	    }
		lv_args_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractRefRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"uk.ac.open.event.EventCalculus.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAbstractRefAccess().getRightParenthesisKeyword_1_1_3());
    }
))?)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getIntLiteralAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"uk.ac.open.event.EventCalculus.INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getStringLiteralAction_1_0(),
            $current);
    }
)(
(
		lv_value_3_0=RULE_STRING
		{
			newLeafNode(lv_value_3_0, grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"uk.ac.open.event.EventCalculus.STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getBooleanLiteralAction_2_0(),
            $current);
    }
)(
(
		lv_value_5_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_5_0, grammarAccess.getTerminalExpressionAccess().getValueBOOLEANTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"uk.ac.open.event.EventCalculus.BOOLEAN");
	    }

)
)))
;







// Rule ANNOTATION_TYPE
ruleANNOTATION_TYPE returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='generated' 
	{
        $current = grammarAccess.getANNOTATION_TYPEAccess().getGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getANNOTATION_TYPEAccess().getGEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='author' 
	{
        $current = grammarAccess.getANNOTATION_TYPEAccess().getAEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getANNOTATION_TYPEAccess().getAEnumLiteralDeclaration_1()); 
    }
));



// Rule LabelType
ruleLabelType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Theta' 
	{
        $current = grammarAccess.getLabelTypeAccess().getTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLabelTypeAccess().getTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Delta' 
	{
        $current = grammarAccess.getLabelTypeAccess().getDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLabelTypeAccess().getDEnumLiteralDeclaration_1()); 
    }
));



// Rule UnaryOp
ruleUnaryOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='!' 
	{
        $current = grammarAccess.getUnaryOpAccess().getNOTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOpAccess().getNOTEnumLiteralDeclaration()); 
    }
);



RULE_INT : ('0'|'1'..'9' ('0'..'9')*);

RULE_BOOLEAN : ('true'|'false');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : ';' ~(('\n'|'\r'|'#'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


