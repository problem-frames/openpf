/*
* generated by Xtext
*/
grammar InternalEventCalculus;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package uk.ac.open.event.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.open.event.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import uk.ac.open.event.services.EventCalculusGrammarAccess;

}

@parser::members {
 
 	private EventCalculusGrammarAccess grammarAccess;
 	
    public InternalEventCalculusParser(TokenStream input, IAstFactory factory, EventCalculusGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("uk/ac/open/event/parser/antlr/internal/InternalEventCalculus.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Knowledge";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleKnowledge
entryRuleKnowledge returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getKnowledgeRule(), currentNode); }
	 iv_ruleKnowledge=ruleKnowledge 
	 { $current=$iv_ruleKnowledge.current; } 
	 EOF 
;

// Rule Knowledge
ruleKnowledge returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getKnowledgeAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
	    lv_imports_0=ruleImport 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKnowledgeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "imports", lv_imports_0, "Import", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getKnowledgeAccess().getEntitiesEntityParserRuleCall_1_0(), currentNode); 
	    }
	    lv_entities_1=ruleEntity 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKnowledgeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "entities", lv_entities_1, "Entity", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getKnowledgeAccess().getRulesRuleParserRuleCall_2_0_0(), currentNode); 
	    }
	    lv_rules_2=ruleRule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKnowledgeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "rules", lv_rules_2, "Rule", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'.' 
    {
        createLeafNode(grammarAccess.getKnowledgeAccess().getFullStopKeyword_2_1(), null); 
    }
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getKnowledgeAccess().getVarsVarParserRuleCall_3_0(), currentNode); 
	    }
	    lv_vars_4=ruleVar 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getKnowledgeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "vars", lv_vars_4, "Var", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRuleRule(), currentNode); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRuleAccess().getDeclVarDeclParserRuleCall_0_0(), currentNode); 
	    }
	    lv_decl_0=ruleVarDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "decl", lv_decl_0, "VarDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRuleAccess().getExprBoolExprParserRuleCall_1_0(), currentNode); 
	    }
	    lv_expr_1=ruleBoolExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_1, "BoolExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVarDeclRule(), currentNode); }
	 iv_ruleVarDecl=ruleVarDecl 
	 { $current=$iv_ruleVarDecl.current; } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('[' 
    {
        createLeafNode(grammarAccess.getVarDeclAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getVarDeclAccess().getVarsVarCrossReference_1_0(), "vars"); 
	}

		// TODO assign feature to currentNode
	
)(',' 
    {
        createLeafNode(grammarAccess.getVarDeclAccess().getCommaKeyword_2_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getVarDeclAccess().getVarsVarCrossReference_2_1_0(), "vars"); 
	}

		// TODO assign feature to currentNode
	
))*']' 
    {
        createLeafNode(grammarAccess.getVarDeclAccess().getRightSquareBracketKeyword_3(), null); 
    }
);





// Entry rule entryRuleIntTerm
entryRuleIntTerm returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntTermRule(), currentNode); }
	 iv_ruleIntTerm=ruleIntTerm 
	 { $current=$iv_ruleIntTerm.current; } 
	 EOF 
;

// Rule IntTerm
ruleIntTerm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_const_0=	RULE_INT
	{
		createLeafNode(grammarAccess.getIntTermAccess().getConstINTTerminalRuleCall_0_0(), "const"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "const", lv_const_0, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getIntTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getIntTermAccess().getVarVarCrossReference_1_0(), "var"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleIntExpr
entryRuleIntExpr returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntExprRule(), currentNode); }
	 iv_ruleIntExpr=ruleIntExpr 
	 { $current=$iv_ruleIntExpr.current; } 
	 EOF 
;

// Rule IntExpr
ruleIntExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getIntExprAccess().getIntTermParserRuleCall_0(), currentNode); 
    }
    this_IntTerm_0=ruleIntTerm
    { 
        $current = $this_IntTerm_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIntExprAccess().getBinaryIntExprParserRuleCall_1(), currentNode); 
    }
    this_BinaryIntExpr_1=ruleBinaryIntExpr
    { 
        $current = $this_BinaryIntExpr_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleBinaryIntExpr
entryRuleBinaryIntExpr returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBinaryIntExprRule(), currentNode); }
	 iv_ruleBinaryIntExpr=ruleBinaryIntExpr 
	 { $current=$iv_ruleBinaryIntExpr.current; } 
	 EOF 
;

// Rule BinaryIntExpr
ruleBinaryIntExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBinaryIntExprAccess().getOprIntTermParserRuleCall_0_0(), currentNode); 
	    }
	    lv_opr_0=ruleIntTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBinaryIntExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "opr", lv_opr_0, "IntTerm", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBinaryIntExprAccess().getBinaryopBinaryIntOpEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_binaryop_1=ruleBinaryIntOp 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBinaryIntExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "binaryop", lv_binaryop_1, "BinaryIntOp", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBinaryIntExprAccess().getOprIntTermParserRuleCall_2_0(), currentNode); 
	    }
	    lv_opr_2=ruleIntTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBinaryIntExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "opr", lv_opr_2, "IntTerm", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleTemporalPredicate
entryRuleTemporalPredicate returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTemporalPredicateRule(), currentNode); }
	 iv_ruleTemporalPredicate=ruleTemporalPredicate 
	 { $current=$iv_ruleTemporalPredicate.current; } 
	 EOF 
;

// Rule TemporalPredicate
ruleTemporalPredicate returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTemporalPredicateAccess().getHoldsAtParserRuleCall_0(), currentNode); 
    }
    this_HoldsAt_0=ruleHoldsAt
    { 
        $current = $this_HoldsAt_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTemporalPredicateAccess().getHappensParserRuleCall_1(), currentNode); 
    }
    this_Happens_1=ruleHappens
    { 
        $current = $this_Happens_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTemporalPredicateAccess().getInitiatesParserRuleCall_2(), currentNode); 
    }
    this_Initiates_2=ruleInitiates
    { 
        $current = $this_Initiates_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTemporalPredicateAccess().getTerminatesParserRuleCall_3(), currentNode); 
    }
    this_Terminates_3=ruleTerminates
    { 
        $current = $this_Terminates_3.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleBoolExpr
entryRuleBoolExpr returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBoolExprRule(), currentNode); }
	 iv_ruleBoolExpr=ruleBoolExpr 
	 { $current=$iv_ruleBoolExpr.current; } 
	 EOF 
;

// Rule BoolExpr
ruleBoolExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBoolExprAccess().getTemporalPredicateParserRuleCall_0(), currentNode); 
    }
    this_TemporalPredicate_0=ruleTemporalPredicate
    { 
        $current = $this_TemporalPredicate_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBoolExprAccess().getUnaryBoolExprParserRuleCall_1(), currentNode); 
    }
    this_UnaryBoolExpr_1=ruleUnaryBoolExpr
    { 
        $current = $this_UnaryBoolExpr_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBoolExprAccess().getBinaryBoolExprParserRuleCall_2(), currentNode); 
    }
    this_BinaryBoolExpr_2=ruleBinaryBoolExpr
    { 
        $current = $this_BinaryBoolExpr_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleUnaryBoolExpr
entryRuleUnaryBoolExpr returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnaryBoolExprRule(), currentNode); }
	 iv_ruleUnaryBoolExpr=ruleUnaryBoolExpr 
	 { $current=$iv_ruleUnaryBoolExpr.current; } 
	 EOF 
;

// Rule UnaryBoolExpr
ruleUnaryBoolExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnaryBoolExprAccess().getUnaryop_lhsUnaryBoolOpEnumRuleCall_0_0_0(), currentNode); 
	    }
	    lv_unaryop_lhs_0=ruleUnaryBoolOp 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryBoolExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "unaryop_lhs", lv_unaryop_lhs_0, "UnaryBoolOp", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnaryBoolExprAccess().getOprBoolExprParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_opr_1=ruleBoolExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryBoolExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "opr", lv_opr_1, "BoolExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |('(' 
    {
        createLeafNode(grammarAccess.getUnaryBoolExprAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnaryBoolExprAccess().getOpsBoolExprParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_ops_3=ruleBoolExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryBoolExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "ops", lv_ops_3, "BoolExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getUnaryBoolExprAccess().getRightParenthesisKeyword_1_2(), null); 
    }
));





// Entry rule entryRuleBinaryBoolExpr
entryRuleBinaryBoolExpr returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBinaryBoolExprRule(), currentNode); }
	 iv_ruleBinaryBoolExpr=ruleBinaryBoolExpr 
	 { $current=$iv_ruleBinaryBoolExpr.current; } 
	 EOF 
;

// Rule BinaryBoolExpr
ruleBinaryBoolExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBinaryBoolExprAccess().getOprTemporalPredicateParserRuleCall_0_0(), currentNode); 
	    }
	    lv_opr_0=ruleTemporalPredicate 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBinaryBoolExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "opr", lv_opr_0, "TemporalPredicate", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBinaryBoolExprAccess().getBinaryopBinaryBoolOpEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_binaryop_1=ruleBinaryBoolOp 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBinaryBoolExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "binaryop", lv_binaryop_1, "BinaryBoolOp", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBinaryBoolExprAccess().getOprBoolExprParserRuleCall_2_0(), currentNode); 
	    }
	    lv_opr_2=ruleBoolExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBinaryBoolExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "opr", lv_opr_2, "BoolExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEntityRule(), currentNode); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getFluentParserRuleCall_0(), currentNode); 
    }
    this_Fluent_0=ruleFluent
    { 
        $current = $this_Fluent_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getEventParserRuleCall_1(), currentNode); 
    }
    this_Event_1=ruleEvent
    { 
        $current = $this_Event_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getSortParserRuleCall_2(), currentNode); 
    }
    this_Sort_2=ruleSort
    { 
        $current = $this_Sort_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleSort
entryRuleSort returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSortRule(), currentNode); }
	 iv_ruleSort=ruleSort 
	 { $current=$iv_ruleSort.current; } 
	 EOF 
;

// Rule Sort
ruleSort returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('sort' 
    {
        createLeafNode(grammarAccess.getSortAccess().getSortKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getSortAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('load' 
    {
        createLeafNode(grammarAccess.getImportAccess().getLoadKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getImportAccess().getPathPathParserRuleCall_1_0(), currentNode); 
	    }
	    lv_path_1=rulePath 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "path", lv_path_1, "Path", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVarRule(), currentNode); }
	 iv_ruleVar=ruleVar 
	 { $current=$iv_ruleVar.current; } 
	 EOF 
;

// Rule Var
ruleVar returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('range' 
    {
        createLeafNode(grammarAccess.getVarAccess().getRangeKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getVarAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_min_2=	RULE_INT
	{
		createLeafNode(grammarAccess.getVarAccess().getMinINTTerminalRuleCall_2_0(), "min"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "min", lv_min_2, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_max_3=	RULE_INT
	{
		createLeafNode(grammarAccess.getVarAccess().getMaxINTTerminalRuleCall_3_0(), "max"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "max", lv_max_3, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleFluent
entryRuleFluent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFluentRule(), currentNode); }
	 iv_ruleFluent=ruleFluent 
	 { $current=$iv_ruleFluent.current; } 
	 EOF 
;

// Rule Fluent
ruleFluent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('fluent' 
    {
        createLeafNode(grammarAccess.getFluentAccess().getFluentKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFluentAccess().getTermTermParserRuleCall_1_0(), currentNode); 
	    }
	    lv_term_1=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFluentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "term", lv_term_1, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEventRule(), currentNode); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('event' 
    {
        createLeafNode(grammarAccess.getEventAccess().getEventKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEventAccess().getTermTermParserRuleCall_1_0(), currentNode); 
	    }
	    lv_term_1=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "term", lv_term_1, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTermRule(), currentNode); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getTermAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('(' 
    {
        createLeafNode(grammarAccess.getTermAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(	
	
	    lv_args_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getTermAccess().getArgsIDTerminalRuleCall_1_1_0(), "args"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "args", lv_args_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(',' 
    {
        createLeafNode(grammarAccess.getTermAccess().getCommaKeyword_1_2_0(), null); 
    }
(	
	
	    lv_args_4=	RULE_ID
	{
		createLeafNode(grammarAccess.getTermAccess().getArgsIDTerminalRuleCall_1_2_1_0(), "args"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "args", lv_args_4, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))*')' 
    {
        createLeafNode(grammarAccess.getTermAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)?);





// Entry rule entryRuleHoldsAt
entryRuleHoldsAt returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getHoldsAtRule(), currentNode); }
	 iv_ruleHoldsAt=ruleHoldsAt 
	 { $current=$iv_ruleHoldsAt.current; } 
	 EOF 
;

// Rule HoldsAt
ruleHoldsAt returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('HoldsAt' 
    {
        createLeafNode(grammarAccess.getHoldsAtAccess().getHoldsAtKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getHoldsAtAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getHoldsAtAccess().getFluentTermParserRuleCall_2_0(), currentNode); 
	    }
	    lv_fluent_2=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHoldsAtRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "fluent", lv_fluent_2, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getHoldsAtAccess().getCommaKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getHoldsAtAccess().getTimeIntExprParserRuleCall_4_0(), currentNode); 
	    }
	    lv_time_4=ruleIntExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHoldsAtRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "time", lv_time_4, "IntExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getHoldsAtAccess().getRightParenthesisKeyword_5(), null); 
    }
);





// Entry rule entryRuleHappens
entryRuleHappens returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getHappensRule(), currentNode); }
	 iv_ruleHappens=ruleHappens 
	 { $current=$iv_ruleHappens.current; } 
	 EOF 
;

// Rule Happens
ruleHappens returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('Happens' 
    {
        createLeafNode(grammarAccess.getHappensAccess().getHappensKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getHappensAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getHappensAccess().getEventTermParserRuleCall_2_0(), currentNode); 
	    }
	    lv_event_2=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHappensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "event", lv_event_2, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getHappensAccess().getCommaKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getHappensAccess().getTimeIntExprParserRuleCall_4_0(), currentNode); 
	    }
	    lv_time_4=ruleIntExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHappensRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "time", lv_time_4, "IntExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getHappensAccess().getRightParenthesisKeyword_5(), null); 
    }
);





// Entry rule entryRuleInitiates
entryRuleInitiates returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInitiatesRule(), currentNode); }
	 iv_ruleInitiates=ruleInitiates 
	 { $current=$iv_ruleInitiates.current; } 
	 EOF 
;

// Rule Initiates
ruleInitiates returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('Initiates' 
    {
        createLeafNode(grammarAccess.getInitiatesAccess().getInitiatesKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getInitiatesAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInitiatesAccess().getEventTermParserRuleCall_2_0(), currentNode); 
	    }
	    lv_event_2=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitiatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "event", lv_event_2, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getInitiatesAccess().getCommaKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInitiatesAccess().getFluentTermParserRuleCall_4_0(), currentNode); 
	    }
	    lv_fluent_4=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitiatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "fluent", lv_fluent_4, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getInitiatesAccess().getCommaKeyword_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInitiatesAccess().getTimeIntExprParserRuleCall_6_0(), currentNode); 
	    }
	    lv_time_6=ruleIntExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitiatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "time", lv_time_6, "IntExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getInitiatesAccess().getRightParenthesisKeyword_7(), null); 
    }
);





// Entry rule entryRuleTerminates
entryRuleTerminates returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTerminatesRule(), currentNode); }
	 iv_ruleTerminates=ruleTerminates 
	 { $current=$iv_ruleTerminates.current; } 
	 EOF 
;

// Rule Terminates
ruleTerminates returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('Terminates' 
    {
        createLeafNode(grammarAccess.getTerminatesAccess().getTerminatesKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getTerminatesAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTerminatesAccess().getEventTermParserRuleCall_2_0(), currentNode); 
	    }
	    lv_event_2=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "event", lv_event_2, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getTerminatesAccess().getCommaKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTerminatesAccess().getFluentTermParserRuleCall_4_0(), currentNode); 
	    }
	    lv_fluent_4=ruleTerm 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "fluent", lv_fluent_4, "Term", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getTerminatesAccess().getCommaKeyword_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTerminatesAccess().getTimeIntExprParserRuleCall_6_0(), currentNode); 
	    }
	    lv_time_6=ruleIntExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "time", lv_time_6, "IntExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getTerminatesAccess().getRightParenthesisKeyword_7(), null); 
    }
);





// Entry rule entryRulePath
entryRulePath returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPathRule(), currentNode); }
	 iv_rulePath=rulePath 
	 { $current=$iv_rulePath.current; } 
	 EOF 
;

// Rule Path
rulePath returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathAccess().getFileFileParserRuleCall_0_0(), currentNode); 
	    }
	    lv_file_0=ruleFile 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "file", lv_file_0, "File", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('/' 
    {
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPathAccess().getFileFileParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_file_2=ruleFile 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "file", lv_file_2, "File", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFileRule(), currentNode); }
	 iv_ruleFile=ruleFile 
	 { $current=$iv_ruleFile.current; } 
	 EOF 
;

// Rule File
ruleFile returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getFileAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('.' 
    {
        createLeafNode(grammarAccess.getFileAccess().getFullStopKeyword_1_0(), null); 
    }
(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getFileAccess().getNameIDTerminalRuleCall_1_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))*);







// Entry rule entryRuleContainer
entryRuleContainer returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getContainerRule(), currentNode); }
	 iv_ruleContainer=ruleContainer 
	 { $current=$iv_ruleContainer.current; } 
	 EOF 
;

// Rule Container
ruleContainer returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getContainerAccess().getActorParserRuleCall_0(), currentNode); 
    }
    this_Actor_0=ruleActor
    { 
        $current = $this_Actor_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContainerAccess().getAgentParserRuleCall_1(), currentNode); 
    }
    this_Agent_1=ruleAgent
    { 
        $current = $this_Agent_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContainerAccess().getRoleParserRuleCall_2(), currentNode); 
    }
    this_Role_2=ruleRole
    { 
        $current = $this_Role_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContainerAccess().getPositionParserRuleCall_3(), currentNode); 
    }
    this_Position_3=rulePosition
    { 
        $current = $this_Position_3.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getActorRule(), currentNode); }
	 iv_ruleActor=ruleActor 
	 { $current=$iv_ruleActor.current; } 
	 EOF 
;

// Rule Actor
ruleActor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('actor' 
    {
        createLeafNode(grammarAccess.getActorAccess().getActorKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getActorAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getActorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getActorAccess().getIs_aActorCrossReference_2_0_0(), "is_a"); 
	}

		// TODO assign feature to currentNode
	
)
    |(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getActorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getActorAccess().getIs_part_ofActorCrossReference_2_1_0(), "is_part_of"); 
	}

		// TODO assign feature to currentNode
	
))*('{' 
    {
        createLeafNode(grammarAccess.getActorAccess().getLeftCurlyBracketKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActorAccess().getIntentionsIntentionParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_intentions_5=ruleIntention 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intentions", lv_intentions_5, "Intention", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getActorAccess().getRightCurlyBracketKeyword_3_2(), null); 
    }
)?);





// Entry rule entryRuleAgent
entryRuleAgent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAgentRule(), currentNode); }
	 iv_ruleAgent=ruleAgent 
	 { $current=$iv_ruleAgent.current; } 
	 EOF 
;

// Rule Agent
ruleAgent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('agent' 
    {
        createLeafNode(grammarAccess.getAgentAccess().getAgentKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getAgentAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAgentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('{' 
    {
        createLeafNode(grammarAccess.getAgentAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAgentAccess().getIntentionsIntentionParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_intentions_3=ruleIntention 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAgentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intentions", lv_intentions_3, "Intention", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getAgentAccess().getRightCurlyBracketKeyword_2_2(), null); 
    }
)?);





// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRoleRule(), currentNode); }
	 iv_ruleRole=ruleRole 
	 { $current=$iv_ruleRole.current; } 
	 EOF 
;

// Rule Role
ruleRole returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('role' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getRoleKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getRoleAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('{' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRoleAccess().getIntentionsIntentionParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_intentions_3=ruleIntention 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intentions", lv_intentions_3, "Intention", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getRightCurlyBracketKeyword_2_2(), null); 
    }
)?);





// Entry rule entryRulePosition
entryRulePosition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPositionRule(), currentNode); }
	 iv_rulePosition=rulePosition 
	 { $current=$iv_rulePosition.current; } 
	 EOF 
;

// Rule Position
rulePosition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('position' 
    {
        createLeafNode(grammarAccess.getPositionAccess().getPositionKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getPositionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('{' 
    {
        createLeafNode(grammarAccess.getPositionAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPositionAccess().getIntentionsIntentionParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_intentions_3=ruleIntention 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intentions", lv_intentions_3, "Intention", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getPositionAccess().getRightCurlyBracketKeyword_2_2(), null); 
    }
)?);





// Entry rule entryRuleIntention
entryRuleIntention returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntentionRule(), currentNode); }
	 iv_ruleIntention=ruleIntention 
	 { $current=$iv_ruleIntention.current; } 
	 EOF 
;

// Rule Intention
ruleIntention returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getIntentionAccess().getGoalParserRuleCall_0(), currentNode); 
    }
    this_Goal_0=ruleGoal
    { 
        $current = $this_Goal_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIntentionAccess().getSoftgoalParserRuleCall_1(), currentNode); 
    }
    this_Softgoal_1=ruleSoftgoal
    { 
        $current = $this_Softgoal_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIntentionAccess().getTaskParserRuleCall_2(), currentNode); 
    }
    this_Task_2=ruleTask
    { 
        $current = $this_Task_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIntentionAccess().getResourceParserRuleCall_3(), currentNode); 
    }
    this_Resource_3=ruleResource
    { 
        $current = $this_Resource_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIntentionAccess().getBeliefParserRuleCall_4(), currentNode); 
    }
    this_Belief_4=ruleBelief
    { 
        $current = $this_Belief_4.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleGoal
entryRuleGoal returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getGoalRule(), currentNode); }
	 iv_ruleGoal=ruleGoal 
	 { $current=$iv_ruleGoal.current; } 
	 EOF 
;

// Rule Goal
ruleGoal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('goal' 
    {
        createLeafNode(grammarAccess.getGoalAccess().getGoalKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getGoalAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGoalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('{' 
    {
        createLeafNode(grammarAccess.getGoalAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getGoalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getGoalAccess().getDecompositionsDecompositionCrossReference_2_1_0(), "decompositions"); 
	}

		// TODO assign feature to currentNode
	
)*'}' 
    {
        createLeafNode(grammarAccess.getGoalAccess().getRightCurlyBracketKeyword_2_2(), null); 
    }
)?);





// Entry rule entryRuleSoftgoal
entryRuleSoftgoal returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSoftgoalRule(), currentNode); }
	 iv_ruleSoftgoal=ruleSoftgoal 
	 { $current=$iv_ruleSoftgoal.current; } 
	 EOF 
;

// Rule Softgoal
ruleSoftgoal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('soft' 
    {
        createLeafNode(grammarAccess.getSoftgoalAccess().getSoftKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getSoftgoalAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSoftgoalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTaskRule(), currentNode); }
	 iv_ruleTask=ruleTask 
	 { $current=$iv_ruleTask.current; } 
	 EOF 
;

// Rule Task
ruleTask returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('task' 
    {
        createLeafNode(grammarAccess.getTaskAccess().getTaskKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTaskRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getResourceRule(), currentNode); }
	 iv_ruleResource=ruleResource 
	 { $current=$iv_ruleResource.current; } 
	 EOF 
;

// Rule Resource
ruleResource returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('resource' 
    {
        createLeafNode(grammarAccess.getResourceAccess().getResourceKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getResourceAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResourceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleBelief
entryRuleBelief returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBeliefRule(), currentNode); }
	 iv_ruleBelief=ruleBelief 
	 { $current=$iv_ruleBelief.current; } 
	 EOF 
;

// Rule Belief
ruleBelief returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('belief' 
    {
        createLeafNode(grammarAccess.getBeliefAccess().getBeliefKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getBeliefAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeliefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));









// Entry rule entryRuleAssociation
entryRuleAssociation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssociationRule(), currentNode); }
	 iv_ruleAssociation=ruleAssociation 
	 { $current=$iv_ruleAssociation.current; } 
	 EOF 
;

// Rule Association
ruleAssociation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getSourceContainerCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'~~>' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getTildeTildeGreaterThanSignKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getTargetContainerCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDependencyRule(), currentNode); }
	 iv_ruleDependency=ruleDependency 
	 { $current=$iv_ruleDependency.current; } 
	 EOF 
;

// Rule Dependency
ruleDependency returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDependencyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDependencyAccess().getDependencyFromDependableCrossReference_0_0(), "dependencyFrom"); 
	}

		// TODO assign feature to currentNode
	
)'~>' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getTildeGreaterThanSignKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDependencyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDependencyAccess().getDependencyToDependableCrossReference_2_0(), "dependencyTo"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleDecomposition
entryRuleDecomposition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDecompositionRule(), currentNode); }
	 iv_ruleDecomposition=ruleDecomposition 
	 { $current=$iv_ruleDecomposition.current; } 
	 EOF 
;

// Rule Decomposition
ruleDecomposition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDecompositionAccess().getAndDecompositionParserRuleCall_0(), currentNode); 
    }
    this_AndDecomposition_0=ruleAndDecomposition
    { 
        $current = $this_AndDecomposition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDecompositionAccess().getOrDecompositionParserRuleCall_1(), currentNode); 
    }
    this_OrDecomposition_1=ruleOrDecomposition
    { 
        $current = $this_OrDecomposition_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleAndDecomposition
entryRuleAndDecomposition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAndDecompositionRule(), currentNode); }
	 iv_ruleAndDecomposition=ruleAndDecomposition 
	 { $current=$iv_ruleAndDecomposition.current; } 
	 EOF 
;

// Rule AndDecomposition
ruleAndDecomposition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAndDecompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAndDecompositionAccess().getTargetIntentionCrossReference_0_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
)'<-(and)-' 
    {
        createLeafNode(grammarAccess.getAndDecompositionAccess().getAndKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAndDecompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAndDecompositionAccess().getSourceIntentionCrossReference_2_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleOrDecomposition
entryRuleOrDecomposition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOrDecompositionRule(), currentNode); }
	 iv_ruleOrDecomposition=ruleOrDecomposition 
	 { $current=$iv_ruleOrDecomposition.current; } 
	 EOF 
;

// Rule OrDecomposition
ruleOrDecomposition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOrDecompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOrDecompositionAccess().getTargetIntentionCrossReference_0_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
)'<-(or)-' 
    {
        createLeafNode(grammarAccess.getOrDecompositionAccess().getOrKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOrDecompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOrDecompositionAccess().getSourceIntentionCrossReference_2_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleContribution
entryRuleContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getContributionRule(), currentNode); }
	 iv_ruleContribution=ruleContribution 
	 { $current=$iv_ruleContribution.current; } 
	 EOF 
;

// Rule Contribution
ruleContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getContributionAccess().getAndContributionParserRuleCall_0(), currentNode); 
    }
    this_AndContribution_0=ruleAndContribution
    { 
        $current = $this_AndContribution_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContributionAccess().getOrContributionParserRuleCall_1(), currentNode); 
    }
    this_OrContribution_1=ruleOrContribution
    { 
        $current = $this_OrContribution_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContributionAccess().getHelpContributionParserRuleCall_2(), currentNode); 
    }
    this_HelpContribution_2=ruleHelpContribution
    { 
        $current = $this_HelpContribution_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContributionAccess().getHurtContributionParserRuleCall_3(), currentNode); 
    }
    this_HurtContribution_3=ruleHurtContribution
    { 
        $current = $this_HurtContribution_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContributionAccess().getMakeContributionParserRuleCall_4(), currentNode); 
    }
    this_MakeContribution_4=ruleMakeContribution
    { 
        $current = $this_MakeContribution_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContributionAccess().getBreakContributionParserRuleCall_5(), currentNode); 
    }
    this_BreakContribution_5=ruleBreakContribution
    { 
        $current = $this_BreakContribution_5.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleAndContribution
entryRuleAndContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAndContributionRule(), currentNode); }
	 iv_ruleAndContribution=ruleAndContribution 
	 { $current=$iv_ruleAndContribution.current; } 
	 EOF 
;

// Rule AndContribution
ruleAndContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAndContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAndContributionAccess().getSourceIntentionCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'-(and)->' 
    {
        createLeafNode(grammarAccess.getAndContributionAccess().getAndKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAndContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAndContributionAccess().getTargetIntentionCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleOrContribution
entryRuleOrContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOrContributionRule(), currentNode); }
	 iv_ruleOrContribution=ruleOrContribution 
	 { $current=$iv_ruleOrContribution.current; } 
	 EOF 
;

// Rule OrContribution
ruleOrContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOrContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOrContributionAccess().getSourceIntentionCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'-(or)->' 
    {
        createLeafNode(grammarAccess.getOrContributionAccess().getOrKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOrContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOrContributionAccess().getTargetIntentionCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleHelpContribution
entryRuleHelpContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getHelpContributionRule(), currentNode); }
	 iv_ruleHelpContribution=ruleHelpContribution 
	 { $current=$iv_ruleHelpContribution.current; } 
	 EOF 
;

// Rule HelpContribution
ruleHelpContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getHelpContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getHelpContributionAccess().getSourceIntentionCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'-(+)->' 
    {
        createLeafNode(grammarAccess.getHelpContributionAccess().getHyphenMinusLeftParenthesisPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getHelpContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getHelpContributionAccess().getTargetIntentionCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleMakeContribution
entryRuleMakeContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMakeContributionRule(), currentNode); }
	 iv_ruleMakeContribution=ruleMakeContribution 
	 { $current=$iv_ruleMakeContribution.current; } 
	 EOF 
;

// Rule MakeContribution
ruleMakeContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getMakeContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getMakeContributionAccess().getSourceIntentionCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'-(++)->' 
    {
        createLeafNode(grammarAccess.getMakeContributionAccess().getHyphenMinusLeftParenthesisPlusSignPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getMakeContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getMakeContributionAccess().getTargetIntentionCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleHurtContribution
entryRuleHurtContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getHurtContributionRule(), currentNode); }
	 iv_ruleHurtContribution=ruleHurtContribution 
	 { $current=$iv_ruleHurtContribution.current; } 
	 EOF 
;

// Rule HurtContribution
ruleHurtContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getHurtContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getHurtContributionAccess().getSourceIntentionCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'-(-)->' 
    {
        createLeafNode(grammarAccess.getHurtContributionAccess().getHyphenMinusLeftParenthesisHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getHurtContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getHurtContributionAccess().getTargetIntentionCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleBreakContribution
entryRuleBreakContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBreakContributionRule(), currentNode); }
	 iv_ruleBreakContribution=ruleBreakContribution 
	 { $current=$iv_ruleBreakContribution.current; } 
	 EOF 
;

// Rule BreakContribution
ruleBreakContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getBreakContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getBreakContributionAccess().getSourceIntentionCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'-(--)->' 
    {
        createLeafNode(grammarAccess.getBreakContributionAccess().getHyphenMinusLeftParenthesisHyphenMinusHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getBreakContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getBreakContributionAccess().getTargetIntentionCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Rule BinaryIntOp
ruleBinaryIntOp returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'+' 
	{
        $current = grammarAccess.getBinaryIntOpAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBinaryIntOpAccess().getPLUSEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'-' 
	{
        $current = grammarAccess.getBinaryIntOpAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBinaryIntOpAccess().getMINUSEnumLiteralDeclaration_1(), null); 
    }
));



// Rule UnaryBoolOp
ruleUnaryBoolOp returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'!' 
	{
        $current = grammarAccess.getUnaryBoolOpAccess().getNEGATIONEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnaryBoolOpAccess().getNEGATIONEnumLiteralDeclaration(), null); 
    }
);



// Rule BinaryBoolOp
ruleBinaryBoolOp returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'->' 
	{
        $current = grammarAccess.getBinaryBoolOpAccess().getIMPLICATIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBinaryBoolOpAccess().getIMPLICATIONEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'<->' 
	{
        $current = grammarAccess.getBinaryBoolOpAccess().getEQUIVALENCEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBinaryBoolOpAccess().getEQUIVALENCEEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'&' 
	{
        $current = grammarAccess.getBinaryBoolOpAccess().getANDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBinaryBoolOpAccess().getANDEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'|' 
	{
        $current = grammarAccess.getBinaryBoolOpAccess().getOREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBinaryBoolOpAccess().getOREnumLiteralDeclaration_3(), null); 
    }
));



RULE_SL_COMMENT : ';' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : ('#' ~('#')+ '#'|'^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*);

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


