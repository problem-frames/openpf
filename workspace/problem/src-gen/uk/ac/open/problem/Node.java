/**
 * generated by Xtext 2.12.0
 */
package uk.ac.open.problem;

import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Node</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.open.problem.Node#getType <em>Type</em>}</li>
 *   <li>{@link uk.ac.open.problem.Node#getHiddenPhenomena <em>Hidden Phenomena</em>}</li>
 *   <li>{@link uk.ac.open.problem.Node#getTimingConstraint <em>Timing Constraint</em>}</li>
 *   <li>{@link uk.ac.open.problem.Node#getSubproblem <em>Subproblem</em>}</li>
 *   <li>{@link uk.ac.open.problem.Node#getProblemNodeRef <em>Problem Node Ref</em>}</li>
 *   <li>{@link uk.ac.open.problem.Node#getProblemRef <em>Problem Ref</em>}</li>
 *   <li>{@link uk.ac.open.problem.Node#getHref <em>Href</em>}</li>
 * </ul>
 *
 * @see uk.ac.open.problem.ProblemPackage#getNode()
 * @model
 * @generated
 */
public interface Node extends Clock
{
  /**
   * Returns the value of the '<em><b>Type</b></em>' attribute.
   * The literals are from the enumeration {@link uk.ac.open.problem.NodeType}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Type</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Type</em>' attribute.
   * @see uk.ac.open.problem.NodeType
   * @see #setType(NodeType)
   * @see uk.ac.open.problem.ProblemPackage#getNode_Type()
   * @model
   * @generated
   */
  NodeType getType();

  /**
   * Sets the value of the '{@link uk.ac.open.problem.Node#getType <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Type</em>' attribute.
   * @see uk.ac.open.problem.NodeType
   * @see #getType()
   * @generated
   */
  void setType(NodeType value);

  /**
   * Returns the value of the '<em><b>Hidden Phenomena</b></em>' containment reference list.
   * The list contents are of type {@link uk.ac.open.problem.Phenomenon}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Hidden Phenomena</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Hidden Phenomena</em>' containment reference list.
   * @see uk.ac.open.problem.ProblemPackage#getNode_HiddenPhenomena()
   * @model containment="true"
   * @generated
   */
  EList<Phenomenon> getHiddenPhenomena();

  /**
   * Returns the value of the '<em><b>Timing Constraint</b></em>' containment reference list.
   * The list contents are of type {@link uk.ac.open.problem.Constraint}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Timing Constraint</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Timing Constraint</em>' containment reference list.
   * @see uk.ac.open.problem.ProblemPackage#getNode_TimingConstraint()
   * @model containment="true"
   * @generated
   */
  EList<Constraint> getTimingConstraint();

  /**
   * Returns the value of the '<em><b>Subproblem</b></em>' containment reference list.
   * The list contents are of type {@link uk.ac.open.problem.ProblemDiagram}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Subproblem</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Subproblem</em>' containment reference list.
   * @see uk.ac.open.problem.ProblemPackage#getNode_Subproblem()
   * @model containment="true"
   * @generated
   */
  EList<ProblemDiagram> getSubproblem();

  /**
   * Returns the value of the '<em><b>Problem Node Ref</b></em>' reference list.
   * The list contents are of type {@link uk.ac.open.problem.Node}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Problem Node Ref</em>' reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Problem Node Ref</em>' reference list.
   * @see uk.ac.open.problem.ProblemPackage#getNode_ProblemNodeRef()
   * @model
   * @generated
   */
  EList<Node> getProblemNodeRef();

  /**
   * Returns the value of the '<em><b>Problem Ref</b></em>' reference list.
   * The list contents are of type {@link uk.ac.open.problem.ProblemDiagram}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Problem Ref</em>' reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Problem Ref</em>' reference list.
   * @see uk.ac.open.problem.ProblemPackage#getNode_ProblemRef()
   * @model
   * @generated
   */
  EList<ProblemDiagram> getProblemRef();

  /**
   * Returns the value of the '<em><b>Href</b></em>' attribute list.
   * The list contents are of type {@link java.lang.String}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Href</em>' attribute list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Href</em>' attribute list.
   * @see uk.ac.open.problem.ProblemPackage#getNode_Href()
   * @model unique="false"
   * @generated
   */
  EList<String> getHref();

} // Node
