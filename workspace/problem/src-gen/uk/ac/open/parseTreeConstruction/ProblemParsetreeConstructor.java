/*
* generated by Xtext
*/
package uk.ac.open.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import uk.ac.open.services.ProblemGrammarAccess;

import com.google.inject.Inject;

public class ProblemParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ProblemGrammarAccess grammarAccess;
		
	public ProblemGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProblemDiagram_Group(this, this, 0, inst);
			case 1: return new Node_Group(this, this, 1, inst);
			case 2: return new Phenomenon_Group(this, this, 2, inst);
			case 3: return new Link_Group(this, this, 3, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule ProblemDiagram ****************
 *
 * ProblemDiagram:
 *   ("problem" ":" description=STRING)? (nodes+=Node|links+=Link)*; 
 * // import 'platform:/resource/problem/src/problem/Problem.ecore'
 *
 **/

// ("problem" ":" description=STRING)? (nodes+=Node|links+=Link)*
protected class ProblemDiagram_Group extends GroupToken {
	
	public ProblemDiagram_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProblemDiagramAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProblemDiagram_Alternatives_1(parent, this, 0, inst);
			case 1: return new ProblemDiagram_Group_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProblemDiagramRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ("problem" ":" description=STRING)?
protected class ProblemDiagram_Group_0 extends GroupToken {
	
	public ProblemDiagram_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProblemDiagramAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProblemDiagram_DescriptionAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "problem"
protected class ProblemDiagram_ProblemKeyword_0_0 extends KeywordToken  {
	
	public ProblemDiagram_ProblemKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProblemDiagramAccess().getProblemKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ":"
protected class ProblemDiagram_ColonKeyword_0_1 extends KeywordToken  {
	
	public ProblemDiagram_ColonKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProblemDiagramAccess().getColonKeyword_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProblemDiagram_ProblemKeyword_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// description=STRING
protected class ProblemDiagram_DescriptionAssignment_0_2 extends AssignmentToken  {
	
	public ProblemDiagram_DescriptionAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProblemDiagramAccess().getDescriptionAssignment_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProblemDiagram_ColonKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProblemDiagramAccess().getDescriptionSTRINGTerminalRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}


// (nodes+=Node|links+=Link)*
protected class ProblemDiagram_Alternatives_1 extends AlternativesToken {

	public ProblemDiagram_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getProblemDiagramAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ProblemDiagram_NodesAssignment_1_0(parent, this, 0, inst);
			case 1: return new ProblemDiagram_LinksAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// nodes+=Node
protected class ProblemDiagram_NodesAssignment_1_0 extends AssignmentToken  {
	
	public ProblemDiagram_NodesAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProblemDiagramAccess().getNodesAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Node_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nodes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nodes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNodeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProblemDiagramAccess().getNodesNodeParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProblemDiagram_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new ProblemDiagram_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// links+=Link
protected class ProblemDiagram_LinksAssignment_1_1 extends AssignmentToken  {
	
	public ProblemDiagram_LinksAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProblemDiagramAccess().getLinksAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("links",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("links");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLinkRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getProblemDiagramAccess().getLinksLinkParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProblemDiagram_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new ProblemDiagram_Group_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}



/************ end Rule ProblemDiagram ****************/


/************ begin Rule Node ****************
 *
 * Node:
 *   name=ID type=NodeType? (":" description=STRING)?;
 *
 **/

// name=ID type=NodeType? (":" description=STRING)?
protected class Node_Group extends GroupToken {
	
	public Node_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNodeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Node_Group_2(parent, this, 0, inst);
			case 1: return new Node_TypeAssignment_1(parent, this, 1, inst);
			case 2: return new Node_NameAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNodeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class Node_NameAssignment_0 extends AssignmentToken  {
	
	public Node_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNodeAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// type=NodeType?
protected class Node_TypeAssignment_1 extends AssignmentToken  {
	
	public Node_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNodeAccess().getTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Node_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getNodeAccess().getTypeNodeTypeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (":" description=STRING)?
protected class Node_Group_2 extends GroupToken {
	
	public Node_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNodeAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Node_DescriptionAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class Node_ColonKeyword_2_0 extends KeywordToken  {
	
	public Node_ColonKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNodeAccess().getColonKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Node_TypeAssignment_1(parent, this, 0, inst);
			case 1: return new Node_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// description=STRING
protected class Node_DescriptionAssignment_2_1 extends AssignmentToken  {
	
	public Node_DescriptionAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNodeAccess().getDescriptionAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Node_ColonKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNodeAccess().getDescriptionSTRINGTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Node ****************/


/************ begin Rule Phenomenon ****************
 *
 * Phenomenon:
 *   type=PhenomenonType? name=( ID | STRING ) (":" description=STRING)?;
 *
 **/

// type=PhenomenonType? name=( ID | STRING ) (":" description=STRING)?
protected class Phenomenon_Group extends GroupToken {
	
	public Phenomenon_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPhenomenonAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Phenomenon_Group_2(parent, this, 0, inst);
			case 1: return new Phenomenon_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPhenomenonRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// type=PhenomenonType?
protected class Phenomenon_TypeAssignment_0 extends AssignmentToken  {
	
	public Phenomenon_TypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPhenomenonAccess().getTypeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getPhenomenonAccess().getTypePhenomenonTypeEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name=( ID | STRING )
protected class Phenomenon_NameAssignment_1 extends AssignmentToken  {
	
	public Phenomenon_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPhenomenonAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Phenomenon_TypeAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPhenomenonAccess().getNameIDTerminalRuleCall_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPhenomenonAccess().getNameSTRINGTerminalRuleCall_1_0_1();
			return obj;
		}
		return null;
	}

}

// (":" description=STRING)?
protected class Phenomenon_Group_2 extends GroupToken {
	
	public Phenomenon_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPhenomenonAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Phenomenon_DescriptionAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class Phenomenon_ColonKeyword_2_0 extends KeywordToken  {
	
	public Phenomenon_ColonKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPhenomenonAccess().getColonKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Phenomenon_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// description=STRING
protected class Phenomenon_DescriptionAssignment_2_1 extends AssignmentToken  {
	
	public Phenomenon_DescriptionAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPhenomenonAccess().getDescriptionAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Phenomenon_ColonKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPhenomenonAccess().getDescriptionSTRINGTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Phenomenon ****************/


/************ begin Rule Link ****************
 *
 * Link:
 *   from=[Node] type=LinkType to=[Node] ("{" phenomena+=Phenomenon ("," phenomena+=
 *   Phenomenon)* "}")? (":" description=STRING)?;
 *
 **/

// from=[Node] type=LinkType to=[Node] ("{" phenomena+=Phenomenon ("," phenomena+=
// Phenomenon)* "}")? (":" description=STRING)?
protected class Link_Group extends GroupToken {
	
	public Link_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLinkAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_Group_4(parent, this, 0, inst);
			case 1: return new Link_Group_3(parent, this, 1, inst);
			case 2: return new Link_ToAssignment_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLinkRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// from=[Node]
protected class Link_FromAssignment_0 extends AssignmentToken  {
	
	public Link_FromAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkAccess().getFromAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("from",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("from");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLinkAccess().getFromNodeCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getLinkAccess().getFromNodeCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// type=LinkType
protected class Link_TypeAssignment_1 extends AssignmentToken  {
	
	public Link_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkAccess().getTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_FromAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getLinkAccess().getTypeLinkTypeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// to=[Node]
protected class Link_ToAssignment_2 extends AssignmentToken  {
	
	public Link_ToAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkAccess().getToAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("to",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("to");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLinkAccess().getToNodeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getLinkAccess().getToNodeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("{" phenomena+=Phenomenon ("," phenomena+=Phenomenon)* "}")?
protected class Link_Group_3 extends GroupToken {
	
	public Link_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLinkAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_RightCurlyBracketKeyword_3_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Link_LeftCurlyBracketKeyword_3_0 extends KeywordToken  {
	
	public Link_LeftCurlyBracketKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLinkAccess().getLeftCurlyBracketKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_ToAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// phenomena+=Phenomenon
protected class Link_PhenomenaAssignment_3_1 extends AssignmentToken  {
	
	public Link_PhenomenaAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkAccess().getPhenomenaAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Phenomenon_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("phenomena",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("phenomena");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPhenomenonRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLinkAccess().getPhenomenaPhenomenonParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Link_LeftCurlyBracketKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," phenomena+=Phenomenon)*
protected class Link_Group_3_2 extends GroupToken {
	
	public Link_Group_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLinkAccess().getGroup_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_PhenomenaAssignment_3_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Link_CommaKeyword_3_2_0 extends KeywordToken  {
	
	public Link_CommaKeyword_3_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLinkAccess().getCommaKeyword_3_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_Group_3_2(parent, this, 0, inst);
			case 1: return new Link_PhenomenaAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// phenomena+=Phenomenon
protected class Link_PhenomenaAssignment_3_2_1 extends AssignmentToken  {
	
	public Link_PhenomenaAssignment_3_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkAccess().getPhenomenaAssignment_3_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Phenomenon_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("phenomena",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("phenomena");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPhenomenonRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getLinkAccess().getPhenomenaPhenomenonParserRuleCall_3_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Link_CommaKeyword_3_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Link_RightCurlyBracketKeyword_3_3 extends KeywordToken  {
	
	public Link_RightCurlyBracketKeyword_3_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLinkAccess().getRightCurlyBracketKeyword_3_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_Group_3_2(parent, this, 0, inst);
			case 1: return new Link_PhenomenaAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// (":" description=STRING)?
protected class Link_Group_4 extends GroupToken {
	
	public Link_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLinkAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_DescriptionAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class Link_ColonKeyword_4_0 extends KeywordToken  {
	
	public Link_ColonKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLinkAccess().getColonKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_Group_3(parent, this, 0, inst);
			case 1: return new Link_ToAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// description=STRING
protected class Link_DescriptionAssignment_4_1 extends AssignmentToken  {
	
	public Link_DescriptionAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkAccess().getDescriptionAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Link_ColonKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLinkAccess().getDescriptionSTRINGTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Link ****************/

}
