/*
 * generated by Xtext 2.12.0
 */
package uk.ac.open.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ProblemGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProblemDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.Problem.ProblemDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProblemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cHighlightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cHighlightNodeCrossReference_2_1_0 = (CrossReference)cHighlightAssignment_2_1.eContents().get(0);
		private final RuleCall cHighlightNodeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cHighlightNodeCrossReference_2_1_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNodesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cNodesNodeParserRuleCall_3_0_0 = (RuleCall)cNodesAssignment_3_0.eContents().get(0);
		private final Assignment cLinksAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cLinksLinkParserRuleCall_3_1_0 = (RuleCall)cLinksAssignment_3_1.eContents().get(0);
		
		//ProblemDiagram:
		//	"problem:" name=ID ("for" highlight=[Node])? (nodes+=Node | links+=Link)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"problem:" name=ID ("for" highlight=[Node])? (nodes+=Node | links+=Link)*
		public Group getGroup() { return cGroup; }
		
		//"problem:"
		public Keyword getProblemKeyword_0() { return cProblemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("for" highlight=[Node])?
		public Group getGroup_2() { return cGroup_2; }
		
		//"for"
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }
		
		//highlight=[Node]
		public Assignment getHighlightAssignment_2_1() { return cHighlightAssignment_2_1; }
		
		//[Node]
		public CrossReference getHighlightNodeCrossReference_2_1_0() { return cHighlightNodeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getHighlightNodeIDTerminalRuleCall_2_1_0_1() { return cHighlightNodeIDTerminalRuleCall_2_1_0_1; }
		
		//(nodes+=Node | links+=Link)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//nodes+=Node
		public Assignment getNodesAssignment_3_0() { return cNodesAssignment_3_0; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_3_0_0() { return cNodesNodeParserRuleCall_3_0_0; }
		
		//links+=Link
		public Assignment getLinksAssignment_3_1() { return cLinksAssignment_3_1; }
		
		//Link
		public RuleCall getLinksLinkParserRuleCall_3_1_0() { return cLinksLinkParserRuleCall_3_1_0; }
	}
	public class ClockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.Problem.Clock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPhenomenonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Clock:
		//	Node | Phenomenon;
		@Override public ParserRule getRule() { return rule; }
		
		//Node | Phenomenon
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//Phenomenon
		public RuleCall getPhenomenonParserRuleCall_1() { return cPhenomenonParserRuleCall_1; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.Problem.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeNodeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cHiddenPhenomenaAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cHiddenPhenomenaPhenomenonParserRuleCall_3_1_0_0 = (RuleCall)cHiddenPhenomenaAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cHiddenPhenomenaAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cHiddenPhenomenaPhenomenonParserRuleCall_3_1_1_1_0 = (RuleCall)cHiddenPhenomenaAssignment_3_1_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cTimingConstraintAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cTimingConstraintConstraintParserRuleCall_3_2_0_0 = (RuleCall)cTimingConstraintAssignment_3_2_0.eContents().get(0);
		private final Group cGroup_3_2_1 = (Group)cGroup_3_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_2_1_0 = (Keyword)cGroup_3_2_1.eContents().get(0);
		private final Assignment cTimingConstraintAssignment_3_2_1_1 = (Assignment)cGroup_3_2_1.eContents().get(1);
		private final RuleCall cTimingConstraintConstraintParserRuleCall_3_2_1_1_0 = (RuleCall)cTimingConstraintAssignment_3_2_1_1.eContents().get(0);
		private final Alternatives cAlternatives_3_3 = (Alternatives)cGroup_3.eContents().get(3);
		private final Assignment cSubproblemAssignment_3_3_0 = (Assignment)cAlternatives_3_3.eContents().get(0);
		private final RuleCall cSubproblemProblemDiagramParserRuleCall_3_3_0_0 = (RuleCall)cSubproblemAssignment_3_3_0.eContents().get(0);
		private final Group cGroup_3_3_1 = (Group)cAlternatives_3_3.eContents().get(1);
		private final Keyword cSeeKeyword_3_3_1_0 = (Keyword)cGroup_3_3_1.eContents().get(0);
		private final Keyword cDomainKeyword_3_3_1_1 = (Keyword)cGroup_3_3_1.eContents().get(1);
		private final Assignment cProblemNodeRefAssignment_3_3_1_2 = (Assignment)cGroup_3_3_1.eContents().get(2);
		private final CrossReference cProblemNodeRefNodeCrossReference_3_3_1_2_0 = (CrossReference)cProblemNodeRefAssignment_3_3_1_2.eContents().get(0);
		private final RuleCall cProblemNodeRefNodeIDTerminalRuleCall_3_3_1_2_0_1 = (RuleCall)cProblemNodeRefNodeCrossReference_3_3_1_2_0.eContents().get(1);
		private final Group cGroup_3_3_2 = (Group)cAlternatives_3_3.eContents().get(2);
		private final Keyword cSeeKeyword_3_3_2_0 = (Keyword)cGroup_3_3_2.eContents().get(0);
		private final Keyword cProblemKeyword_3_3_2_1 = (Keyword)cGroup_3_3_2.eContents().get(1);
		private final Assignment cProblemRefAssignment_3_3_2_2 = (Assignment)cGroup_3_3_2.eContents().get(2);
		private final CrossReference cProblemRefProblemDiagramCrossReference_3_3_2_2_0 = (CrossReference)cProblemRefAssignment_3_3_2_2.eContents().get(0);
		private final RuleCall cProblemRefProblemDiagramIDTerminalRuleCall_3_3_2_2_0_1 = (RuleCall)cProblemRefProblemDiagramCrossReference_3_3_2_2_0.eContents().get(1);
		private final Group cGroup_3_3_3 = (Group)cAlternatives_3_3.eContents().get(3);
		private final Keyword cSeeKeyword_3_3_3_0 = (Keyword)cGroup_3_3_3.eContents().get(0);
		private final Assignment cHrefAssignment_3_3_3_1 = (Assignment)cGroup_3_3_3.eContents().get(1);
		private final RuleCall cHrefSTRINGTerminalRuleCall_3_3_3_1_0 = (RuleCall)cHrefAssignment_3_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//Node:
		//	name=ID type=NodeType? (":"? description=STRING)? ("{" (hiddenPhenomena+=Phenomenon (','
		//	hiddenPhenomena+=Phenomenon)*)? (timingConstraint+=Constraint (';' timingConstraint+=Constraint)*)?
		//	(subproblem+=ProblemDiagram
		//	| "see" "domain" problemNodeRef+=[Node] | "see" "problem" problemRef+=[ProblemDiagram] | "see" href+=STRING)*
		//	"}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID type=NodeType? (":"? description=STRING)? ("{" (hiddenPhenomena+=Phenomenon (',' hiddenPhenomena+=Phenomenon)*)?
		//(timingConstraint+=Constraint (';' timingConstraint+=Constraint)*)? (subproblem+=ProblemDiagram | "see" "domain"
		//problemNodeRef+=[Node] | "see" "problem" problemRef+=[ProblemDiagram] | "see" href+=STRING)* "}")?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//type=NodeType?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//NodeType
		public RuleCall getTypeNodeTypeEnumRuleCall_1_0() { return cTypeNodeTypeEnumRuleCall_1_0; }
		
		//(":"? description=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//":"?
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }
		
		//("{" (hiddenPhenomena+=Phenomenon (',' hiddenPhenomena+=Phenomenon)*)? (timingConstraint+=Constraint (';'
		//timingConstraint+=Constraint)*)? (subproblem+=ProblemDiagram | "see" "domain" problemNodeRef+=[Node] | "see" "problem"
		//problemRef+=[ProblemDiagram] | "see" href+=STRING)* "}")?
		public Group getGroup_3() { return cGroup_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(hiddenPhenomena+=Phenomenon (',' hiddenPhenomena+=Phenomenon)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//hiddenPhenomena+=Phenomenon
		public Assignment getHiddenPhenomenaAssignment_3_1_0() { return cHiddenPhenomenaAssignment_3_1_0; }
		
		//Phenomenon
		public RuleCall getHiddenPhenomenaPhenomenonParserRuleCall_3_1_0_0() { return cHiddenPhenomenaPhenomenonParserRuleCall_3_1_0_0; }
		
		//(',' hiddenPhenomena+=Phenomenon)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//hiddenPhenomena+=Phenomenon
		public Assignment getHiddenPhenomenaAssignment_3_1_1_1() { return cHiddenPhenomenaAssignment_3_1_1_1; }
		
		//Phenomenon
		public RuleCall getHiddenPhenomenaPhenomenonParserRuleCall_3_1_1_1_0() { return cHiddenPhenomenaPhenomenonParserRuleCall_3_1_1_1_0; }
		
		//(timingConstraint+=Constraint (';' timingConstraint+=Constraint)*)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//timingConstraint+=Constraint
		public Assignment getTimingConstraintAssignment_3_2_0() { return cTimingConstraintAssignment_3_2_0; }
		
		//Constraint
		public RuleCall getTimingConstraintConstraintParserRuleCall_3_2_0_0() { return cTimingConstraintConstraintParserRuleCall_3_2_0_0; }
		
		//(';' timingConstraint+=Constraint)*
		public Group getGroup_3_2_1() { return cGroup_3_2_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2_1_0() { return cSemicolonKeyword_3_2_1_0; }
		
		//timingConstraint+=Constraint
		public Assignment getTimingConstraintAssignment_3_2_1_1() { return cTimingConstraintAssignment_3_2_1_1; }
		
		//Constraint
		public RuleCall getTimingConstraintConstraintParserRuleCall_3_2_1_1_0() { return cTimingConstraintConstraintParserRuleCall_3_2_1_1_0; }
		
		//(subproblem+=ProblemDiagram | "see" "domain" problemNodeRef+=[Node] | "see" "problem" problemRef+=[ProblemDiagram] |
		//"see" href+=STRING)*
		public Alternatives getAlternatives_3_3() { return cAlternatives_3_3; }
		
		//subproblem+=ProblemDiagram
		public Assignment getSubproblemAssignment_3_3_0() { return cSubproblemAssignment_3_3_0; }
		
		//ProblemDiagram
		public RuleCall getSubproblemProblemDiagramParserRuleCall_3_3_0_0() { return cSubproblemProblemDiagramParserRuleCall_3_3_0_0; }
		
		//"see" "domain" problemNodeRef+=[Node]
		public Group getGroup_3_3_1() { return cGroup_3_3_1; }
		
		//"see"
		public Keyword getSeeKeyword_3_3_1_0() { return cSeeKeyword_3_3_1_0; }
		
		//"domain"
		public Keyword getDomainKeyword_3_3_1_1() { return cDomainKeyword_3_3_1_1; }
		
		//problemNodeRef+=[Node]
		public Assignment getProblemNodeRefAssignment_3_3_1_2() { return cProblemNodeRefAssignment_3_3_1_2; }
		
		//[Node]
		public CrossReference getProblemNodeRefNodeCrossReference_3_3_1_2_0() { return cProblemNodeRefNodeCrossReference_3_3_1_2_0; }
		
		//ID
		public RuleCall getProblemNodeRefNodeIDTerminalRuleCall_3_3_1_2_0_1() { return cProblemNodeRefNodeIDTerminalRuleCall_3_3_1_2_0_1; }
		
		//"see" "problem" problemRef+=[ProblemDiagram]
		public Group getGroup_3_3_2() { return cGroup_3_3_2; }
		
		//"see"
		public Keyword getSeeKeyword_3_3_2_0() { return cSeeKeyword_3_3_2_0; }
		
		//"problem"
		public Keyword getProblemKeyword_3_3_2_1() { return cProblemKeyword_3_3_2_1; }
		
		//problemRef+=[ProblemDiagram]
		public Assignment getProblemRefAssignment_3_3_2_2() { return cProblemRefAssignment_3_3_2_2; }
		
		//[ProblemDiagram]
		public CrossReference getProblemRefProblemDiagramCrossReference_3_3_2_2_0() { return cProblemRefProblemDiagramCrossReference_3_3_2_2_0; }
		
		//ID
		public RuleCall getProblemRefProblemDiagramIDTerminalRuleCall_3_3_2_2_0_1() { return cProblemRefProblemDiagramIDTerminalRuleCall_3_3_2_2_0_1; }
		
		//"see" href+=STRING
		public Group getGroup_3_3_3() { return cGroup_3_3_3; }
		
		//"see"
		public Keyword getSeeKeyword_3_3_3_0() { return cSeeKeyword_3_3_3_0; }
		
		//href+=STRING
		public Assignment getHrefAssignment_3_3_3_1() { return cHrefAssignment_3_3_3_1; }
		
		//STRING
		public RuleCall getHrefSTRINGTerminalRuleCall_3_3_3_1_0() { return cHrefSTRINGTerminalRuleCall_3_3_3_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
	}
	public class PhenomenonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.Problem.Phenomenon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePhenomenonTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIsControlledAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsControlledExclamationMarkKeyword_1_0 = (Keyword)cIsControlledAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		
		//Phenomenon:
		//	type=PhenomenonType? isControlled?="!"? name=ID (":"? description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=PhenomenonType? isControlled?="!"? name=ID (":"? description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//type=PhenomenonType?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//PhenomenonType
		public RuleCall getTypePhenomenonTypeEnumRuleCall_0_0() { return cTypePhenomenonTypeEnumRuleCall_0_0; }
		
		//isControlled?="!"?
		public Assignment getIsControlledAssignment_1() { return cIsControlledAssignment_1; }
		
		//"!"
		public Keyword getIsControlledExclamationMarkKeyword_1_0() { return cIsControlledExclamationMarkKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(":"? description=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//":"?
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.Problem.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeConstraintTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOperandClockCrossReference_2_0 = (CrossReference)cOperandAssignment_2.eContents().get(0);
		private final RuleCall cOperandClockIDTerminalRuleCall_2_0_1 = (RuleCall)cOperandClockCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperandAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cOperandClockCrossReference_3_1_0 = (CrossReference)cOperandAssignment_3_1.eContents().get(0);
		private final RuleCall cOperandClockIDTerminalRuleCall_3_1_0_1 = (RuleCall)cOperandClockCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constraint:
		//	type=ConstraintType '(' operand+=[Clock] (',' operand+=[Clock])* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=ConstraintType '(' operand+=[Clock] (',' operand+=[Clock])* ')'
		public Group getGroup() { return cGroup; }
		
		//type=ConstraintType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ConstraintType
		public RuleCall getTypeConstraintTypeEnumRuleCall_0_0() { return cTypeConstraintTypeEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operand+=[Clock]
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//[Clock]
		public CrossReference getOperandClockCrossReference_2_0() { return cOperandClockCrossReference_2_0; }
		
		//ID
		public RuleCall getOperandClockIDTerminalRuleCall_2_0_1() { return cOperandClockIDTerminalRuleCall_2_0_1; }
		
		//(',' operand+=[Clock])*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//operand+=[Clock]
		public Assignment getOperandAssignment_3_1() { return cOperandAssignment_3_1; }
		
		//[Clock]
		public CrossReference getOperandClockCrossReference_3_1_0() { return cOperandClockCrossReference_3_1_0; }
		
		//ID
		public RuleCall getOperandClockIDTerminalRuleCall_3_1_0_1() { return cOperandClockIDTerminalRuleCall_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.Problem.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromNodeCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromNodeIDTerminalRuleCall_0_0_1 = (RuleCall)cFromNodeCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeLinkTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToNodeCrossReference_2_0 = (CrossReference)cToAssignment_2.eContents().get(0);
		private final RuleCall cToNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cToNodeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPhenomenaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPhenomenaPhenomenonParserRuleCall_3_1_0 = (RuleCall)cPhenomenaAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cPhenomenaAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cPhenomenaPhenomenonParserRuleCall_3_2_1_0 = (RuleCall)cPhenomenaAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Assignment cTimingAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cTimingConstraintParserRuleCall_3_3_0_0 = (RuleCall)cTimingAssignment_3_3_0.eContents().get(0);
		private final Group cGroup_3_3_1 = (Group)cGroup_3_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_3_1_0 = (Keyword)cGroup_3_3_1.eContents().get(0);
		private final Assignment cTimingAssignment_3_3_1_1 = (Assignment)cGroup_3_3_1.eContents().get(1);
		private final RuleCall cTimingConstraintParserRuleCall_3_3_1_1_0 = (RuleCall)cTimingAssignment_3_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cDescriptionAssignment_4_1.eContents().get(0);
		
		//Link:
		//	from=[Node] type=LinkType to=[Node] ('{' phenomena+=Phenomenon (',' phenomena+=Phenomenon)* (timing+=Constraint (';'
		//	timing+=Constraint)*)?
		//	'}')? (":"? description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//from=[Node] type=LinkType to=[Node] ('{' phenomena+=Phenomenon (',' phenomena+=Phenomenon)* (timing+=Constraint (';'
		//timing+=Constraint)*)? '}')? (":"? description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//from=[Node]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//[Node]
		public CrossReference getFromNodeCrossReference_0_0() { return cFromNodeCrossReference_0_0; }
		
		//ID
		public RuleCall getFromNodeIDTerminalRuleCall_0_0_1() { return cFromNodeIDTerminalRuleCall_0_0_1; }
		
		//type=LinkType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//LinkType
		public RuleCall getTypeLinkTypeEnumRuleCall_1_0() { return cTypeLinkTypeEnumRuleCall_1_0; }
		
		//to=[Node]
		public Assignment getToAssignment_2() { return cToAssignment_2; }
		
		//[Node]
		public CrossReference getToNodeCrossReference_2_0() { return cToNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getToNodeIDTerminalRuleCall_2_0_1() { return cToNodeIDTerminalRuleCall_2_0_1; }
		
		//('{' phenomena+=Phenomenon (',' phenomena+=Phenomenon)* (timing+=Constraint (';' timing+=Constraint)*)? '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//phenomena+=Phenomenon
		public Assignment getPhenomenaAssignment_3_1() { return cPhenomenaAssignment_3_1; }
		
		//Phenomenon
		public RuleCall getPhenomenaPhenomenonParserRuleCall_3_1_0() { return cPhenomenaPhenomenonParserRuleCall_3_1_0; }
		
		//(',' phenomena+=Phenomenon)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//phenomena+=Phenomenon
		public Assignment getPhenomenaAssignment_3_2_1() { return cPhenomenaAssignment_3_2_1; }
		
		//Phenomenon
		public RuleCall getPhenomenaPhenomenonParserRuleCall_3_2_1_0() { return cPhenomenaPhenomenonParserRuleCall_3_2_1_0; }
		
		//(timing+=Constraint (';' timing+=Constraint)*)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//timing+=Constraint
		public Assignment getTimingAssignment_3_3_0() { return cTimingAssignment_3_3_0; }
		
		//Constraint
		public RuleCall getTimingConstraintParserRuleCall_3_3_0_0() { return cTimingConstraintParserRuleCall_3_3_0_0; }
		
		//(';' timing+=Constraint)*
		public Group getGroup_3_3_1() { return cGroup_3_3_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_3_1_0() { return cSemicolonKeyword_3_3_1_0; }
		
		//timing+=Constraint
		public Assignment getTimingAssignment_3_3_1_1() { return cTimingAssignment_3_3_1_1; }
		
		//Constraint
		public RuleCall getTimingConstraintParserRuleCall_3_3_1_1_0() { return cTimingConstraintParserRuleCall_3_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//(":"? description=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//":"?
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_4_1() { return cDescriptionAssignment_4_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_1_0() { return cDescriptionSTRINGTerminalRuleCall_4_1_0; }
	}
	
	public class NodeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.Problem.NodeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREQUIREMENTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREQUIREMENTRKeyword_0_0 = (Keyword)cREQUIREMENTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMACHINEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMACHINEMKeyword_1_0 = (Keyword)cMACHINEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBIDDABLEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBIDDABLEBKeyword_2_0 = (Keyword)cBIDDABLEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLEXICALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLEXICALXKeyword_3_0 = (Keyword)cLEXICALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCAUSALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCAUSALCKeyword_4_0 = (Keyword)cCAUSALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDESIGNEDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDESIGNEDDKeyword_5_0 = (Keyword)cDESIGNEDEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPHYSICALEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPHYSICALPKeyword_6_0 = (Keyword)cPHYSICALEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCONCERNEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCONCERNQuestionMarkKeyword_7_0 = (Keyword)cCONCERNEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum NodeType:
		//	REQUIREMENT="R" | MACHINE="M" | BIDDABLE="B" | LEXICAL="X" | CAUSAL="C" | DESIGNED="D" | PHYSICAL="P" | CONCERN="?";
		public EnumRule getRule() { return rule; }
		
		//REQUIREMENT="R" | MACHINE="M" | BIDDABLE="B" | LEXICAL="X" | CAUSAL="C" | DESIGNED="D" | PHYSICAL="P" | CONCERN="?"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//REQUIREMENT="R"
		public EnumLiteralDeclaration getREQUIREMENTEnumLiteralDeclaration_0() { return cREQUIREMENTEnumLiteralDeclaration_0; }
		
		//"R"
		public Keyword getREQUIREMENTRKeyword_0_0() { return cREQUIREMENTRKeyword_0_0; }
		
		//MACHINE="M"
		public EnumLiteralDeclaration getMACHINEEnumLiteralDeclaration_1() { return cMACHINEEnumLiteralDeclaration_1; }
		
		//"M"
		public Keyword getMACHINEMKeyword_1_0() { return cMACHINEMKeyword_1_0; }
		
		//BIDDABLE="B"
		public EnumLiteralDeclaration getBIDDABLEEnumLiteralDeclaration_2() { return cBIDDABLEEnumLiteralDeclaration_2; }
		
		//"B"
		public Keyword getBIDDABLEBKeyword_2_0() { return cBIDDABLEBKeyword_2_0; }
		
		//LEXICAL="X"
		public EnumLiteralDeclaration getLEXICALEnumLiteralDeclaration_3() { return cLEXICALEnumLiteralDeclaration_3; }
		
		//"X"
		public Keyword getLEXICALXKeyword_3_0() { return cLEXICALXKeyword_3_0; }
		
		//CAUSAL="C"
		public EnumLiteralDeclaration getCAUSALEnumLiteralDeclaration_4() { return cCAUSALEnumLiteralDeclaration_4; }
		
		//"C"
		public Keyword getCAUSALCKeyword_4_0() { return cCAUSALCKeyword_4_0; }
		
		//DESIGNED="D"
		public EnumLiteralDeclaration getDESIGNEDEnumLiteralDeclaration_5() { return cDESIGNEDEnumLiteralDeclaration_5; }
		
		//"D"
		public Keyword getDESIGNEDDKeyword_5_0() { return cDESIGNEDDKeyword_5_0; }
		
		//PHYSICAL="P"
		public EnumLiteralDeclaration getPHYSICALEnumLiteralDeclaration_6() { return cPHYSICALEnumLiteralDeclaration_6; }
		
		//"P"
		public Keyword getPHYSICALPKeyword_6_0() { return cPHYSICALPKeyword_6_0; }
		
		//CONCERN="?"
		public EnumLiteralDeclaration getCONCERNEnumLiteralDeclaration_7() { return cCONCERNEnumLiteralDeclaration_7; }
		
		//"?"
		public Keyword getCONCERNQuestionMarkKeyword_7_0() { return cCONCERNQuestionMarkKeyword_7_0; }
	}
	public class PhenomenonTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.Problem.PhenomenonType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNSPECIFIEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNSPECIFIEDPhenomenonKeyword_0_0 = (Keyword)cUNSPECIFIEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEVENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEVENTEventKeyword_1_0 = (Keyword)cEVENTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTATEStateKeyword_2_0 = (Keyword)cSTATEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PhenomenonType:
		//	UNSPECIFIED="phenomenon" | EVENT="event" | STATE="state";
		public EnumRule getRule() { return rule; }
		
		//UNSPECIFIED="phenomenon" | EVENT="event" | STATE="state"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNSPECIFIED="phenomenon"
		public EnumLiteralDeclaration getUNSPECIFIEDEnumLiteralDeclaration_0() { return cUNSPECIFIEDEnumLiteralDeclaration_0; }
		
		//"phenomenon"
		public Keyword getUNSPECIFIEDPhenomenonKeyword_0_0() { return cUNSPECIFIEDPhenomenonKeyword_0_0; }
		
		//EVENT="event"
		public EnumLiteralDeclaration getEVENTEnumLiteralDeclaration_1() { return cEVENTEnumLiteralDeclaration_1; }
		
		//"event"
		public Keyword getEVENTEventKeyword_1_0() { return cEVENTEventKeyword_1_0; }
		
		//STATE="state"
		public EnumLiteralDeclaration getSTATEEnumLiteralDeclaration_2() { return cSTATEEnumLiteralDeclaration_2; }
		
		//"state"
		public Keyword getSTATEStateKeyword_2_0() { return cSTATEStateKeyword_2_0; }
	}
	public class ConstraintTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.Problem.ConstraintType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStrictPreEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStrictPreLessThanSignKeyword_0_0 = (Keyword)cStrictPreEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCauseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCauseLessThanSignEqualsSignKeyword_1_0 = (Keyword)cCauseEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAlternateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAlternateTildeKeyword_2_0 = (Keyword)cAlternateEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ConstraintType:
		//	StrictPre="<" | cause="<=" | alternate="~";
		public EnumRule getRule() { return rule; }
		
		//StrictPre="<" | cause="<=" | alternate="~"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StrictPre="<"
		public EnumLiteralDeclaration getStrictPreEnumLiteralDeclaration_0() { return cStrictPreEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getStrictPreLessThanSignKeyword_0_0() { return cStrictPreLessThanSignKeyword_0_0; }
		
		//cause="<="
		public EnumLiteralDeclaration getCauseEnumLiteralDeclaration_1() { return cCauseEnumLiteralDeclaration_1; }
		
		//"<="
		public Keyword getCauseLessThanSignEqualsSignKeyword_1_0() { return cCauseLessThanSignEqualsSignKeyword_1_0; }
		
		//alternate="~"
		public EnumLiteralDeclaration getAlternateEnumLiteralDeclaration_2() { return cAlternateEnumLiteralDeclaration_2; }
		
		//"~"
		public Keyword getAlternateTildeKeyword_2_0() { return cAlternateTildeKeyword_2_0; }
	}
	public class LinkTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.Problem.LinkType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTERFACEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTERFACEHyphenMinusHyphenMinusKeyword_0_0 = (Keyword)cINTERFACEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREFERENCETildeTildeKeyword_1_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTRAINTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONSTRAINTLessThanSignTildeKeyword_2_0 = (Keyword)cCONSTRAINTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCONCERNEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCONCERNHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cCONCERNEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINV_CONSTRAINTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINV_CONSTRAINTTildeGreaterThanSignKeyword_4_0 = (Keyword)cINV_CONSTRAINTEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum LinkType:
		//	INTERFACE="--" | REFERENCE="~~" | CONSTRAINT="<~" | CONCERN="->" | INV_CONSTRAINT="~>";
		public EnumRule getRule() { return rule; }
		
		//INTERFACE="--" | REFERENCE="~~" | CONSTRAINT="<~" | CONCERN="->" | INV_CONSTRAINT="~>"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTERFACE="--"
		public EnumLiteralDeclaration getINTERFACEEnumLiteralDeclaration_0() { return cINTERFACEEnumLiteralDeclaration_0; }
		
		//"--"
		public Keyword getINTERFACEHyphenMinusHyphenMinusKeyword_0_0() { return cINTERFACEHyphenMinusHyphenMinusKeyword_0_0; }
		
		//REFERENCE="~~"
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_1() { return cREFERENCEEnumLiteralDeclaration_1; }
		
		//"~~"
		public Keyword getREFERENCETildeTildeKeyword_1_0() { return cREFERENCETildeTildeKeyword_1_0; }
		
		//CONSTRAINT="<~"
		public EnumLiteralDeclaration getCONSTRAINTEnumLiteralDeclaration_2() { return cCONSTRAINTEnumLiteralDeclaration_2; }
		
		//"<~"
		public Keyword getCONSTRAINTLessThanSignTildeKeyword_2_0() { return cCONSTRAINTLessThanSignTildeKeyword_2_0; }
		
		//CONCERN="->"
		public EnumLiteralDeclaration getCONCERNEnumLiteralDeclaration_3() { return cCONCERNEnumLiteralDeclaration_3; }
		
		//"->"
		public Keyword getCONCERNHyphenMinusGreaterThanSignKeyword_3_0() { return cCONCERNHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//INV_CONSTRAINT="~>"
		public EnumLiteralDeclaration getINV_CONSTRAINTEnumLiteralDeclaration_4() { return cINV_CONSTRAINTEnumLiteralDeclaration_4; }
		
		//"~>"
		public Keyword getINV_CONSTRAINTTildeGreaterThanSignKeyword_4_0() { return cINV_CONSTRAINTTildeGreaterThanSignKeyword_4_0; }
	}
	
	private final ProblemDiagramElements pProblemDiagram;
	private final ClockElements pClock;
	private final NodeElements pNode;
	private final NodeTypeElements eNodeType;
	private final PhenomenonElements pPhenomenon;
	private final PhenomenonTypeElements ePhenomenonType;
	private final ConstraintTypeElements eConstraintType;
	private final ConstraintElements pConstraint;
	private final LinkElements pLink;
	private final LinkTypeElements eLinkType;
	private final TerminalRule tID;
	private final TerminalRule tQUALIFIED_NAME;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProblemGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProblemDiagram = new ProblemDiagramElements();
		this.pClock = new ClockElements();
		this.pNode = new NodeElements();
		this.eNodeType = new NodeTypeElements();
		this.pPhenomenon = new PhenomenonElements();
		this.ePhenomenonType = new PhenomenonTypeElements();
		this.eConstraintType = new ConstraintTypeElements();
		this.pConstraint = new ConstraintElements();
		this.pLink = new LinkElements();
		this.eLinkType = new LinkTypeElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.Problem.ID");
		this.tQUALIFIED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.open.Problem.QUALIFIED_NAME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.open.Problem".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ProblemDiagram:
	//	"problem:" name=ID ("for" highlight=[Node])? (nodes+=Node | links+=Link)*;
	public ProblemDiagramElements getProblemDiagramAccess() {
		return pProblemDiagram;
	}
	
	public ParserRule getProblemDiagramRule() {
		return getProblemDiagramAccess().getRule();
	}
	
	//Clock:
	//	Node | Phenomenon;
	public ClockElements getClockAccess() {
		return pClock;
	}
	
	public ParserRule getClockRule() {
		return getClockAccess().getRule();
	}
	
	//Node:
	//	name=ID type=NodeType? (":"? description=STRING)? ("{" (hiddenPhenomena+=Phenomenon (','
	//	hiddenPhenomena+=Phenomenon)*)? (timingConstraint+=Constraint (';' timingConstraint+=Constraint)*)?
	//	(subproblem+=ProblemDiagram
	//	| "see" "domain" problemNodeRef+=[Node] | "see" "problem" problemRef+=[ProblemDiagram] | "see" href+=STRING)*
	//	"}")?;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//enum NodeType:
	//	REQUIREMENT="R" | MACHINE="M" | BIDDABLE="B" | LEXICAL="X" | CAUSAL="C" | DESIGNED="D" | PHYSICAL="P" | CONCERN="?";
	public NodeTypeElements getNodeTypeAccess() {
		return eNodeType;
	}
	
	public EnumRule getNodeTypeRule() {
		return getNodeTypeAccess().getRule();
	}
	
	//Phenomenon:
	//	type=PhenomenonType? isControlled?="!"? name=ID (":"? description=STRING)?;
	public PhenomenonElements getPhenomenonAccess() {
		return pPhenomenon;
	}
	
	public ParserRule getPhenomenonRule() {
		return getPhenomenonAccess().getRule();
	}
	
	//enum PhenomenonType:
	//	UNSPECIFIED="phenomenon" | EVENT="event" | STATE="state";
	public PhenomenonTypeElements getPhenomenonTypeAccess() {
		return ePhenomenonType;
	}
	
	public EnumRule getPhenomenonTypeRule() {
		return getPhenomenonTypeAccess().getRule();
	}
	
	//enum ConstraintType:
	//	StrictPre="<" | cause="<=" | alternate="~";
	public ConstraintTypeElements getConstraintTypeAccess() {
		return eConstraintType;
	}
	
	public EnumRule getConstraintTypeRule() {
		return getConstraintTypeAccess().getRule();
	}
	
	//Constraint:
	//	type=ConstraintType '(' operand+=[Clock] (',' operand+=[Clock])* ')';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Link:
	//	from=[Node] type=LinkType to=[Node] ('{' phenomena+=Phenomenon (',' phenomena+=Phenomenon)* (timing+=Constraint (';'
	//	timing+=Constraint)*)?
	//	'}')? (":"? description=STRING)?;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//enum LinkType:
	//	INTERFACE="--" | REFERENCE="~~" | CONSTRAINT="<~" | CONCERN="->" | INV_CONSTRAINT="~>";
	public LinkTypeElements getLinkTypeAccess() {
		return eLinkType;
	}
	
	public EnumRule getLinkTypeRule() {
		return getLinkTypeAccess().getRule();
	}
	
	//@ Override terminal ID:
	//	'#' !'#'+ '#' | '^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal QUALIFIED_NAME:
	//	ID ('.' ID)*;
	public TerminalRule getQUALIFIED_NAMERule() {
		return tQUALIFIED_NAME;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
