problem: "OpenPF: A Problem Frames modeling problem"
User B: "who uses the modeling tool"
Developer B: "who develops the modeling tool"
Researcher B: "who defines the modeling language"
Editor M: "The modeling tool"
Model X: "A Problem Frames model"
User -- Model {#.pf#, #.problem#, #.problem_diagram# } : "a"
Model -- Editor {#.pf#, #.problem#, #.problem_diagram# } : "b"
Language X: "The Problem Frames language"
Researcher -- Language {Grammar} : "c"
Language -- Developer {Grammar} : "d"
MDSD D: "Model-driven software development tools"
Developer -- MDSD {#.xtext#, #.gmfgraph#, #.gmfmap#, #.gmftool#} : "e"
MDSD -- Editor {plugins} : "f"
OpenPF R: "The model shall be compliant to the language"
OpenPF ~> Editor: "g"
OpenPF ~~ Language: "i"
OpenPF ~> Model: "j"


/* 
1. Consider pattern matching problem diagrams into problem frames

2. Consider warning/error as ways to implement concerns

3. Handle Interface/Shared Phenomena differently

4. Link semantics of the nodes to any other description languages

5. Round trip: when a graph is saved, also save its concrete syntax notations

6. GUI of the node should be able to attach a project file to it 
*/