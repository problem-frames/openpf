/*
* generated by Xtext
*/
grammar InternalProblem;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package uk.ac.open.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.open.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import uk.ac.open.services.ProblemGrammarAccess;

}

@parser::members {
 
 	private ProblemGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ProblemGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProblemDiagram
entryRuleProblemDiagram :
{ before(grammarAccess.getProblemDiagramRule()); }
	 ruleProblemDiagram
{ after(grammarAccess.getProblemDiagramRule()); } 
	 EOF 
;

// Rule ProblemDiagram
ruleProblemDiagram 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getProblemDiagramAccess().getGroup()); }
(rule__ProblemDiagram__Group__0)
{ after(grammarAccess.getProblemDiagramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNode
entryRuleNode :
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getNodeAccess().getGroup()); }
(rule__Node__Group__0)
{ after(grammarAccess.getNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePhenomenon
entryRulePhenomenon :
{ before(grammarAccess.getPhenomenonRule()); }
	 rulePhenomenon
{ after(grammarAccess.getPhenomenonRule()); } 
	 EOF 
;

// Rule Phenomenon
rulePhenomenon 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getPhenomenonAccess().getGroup()); }
(rule__Phenomenon__Group__0)
{ after(grammarAccess.getPhenomenonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLink
entryRuleLink :
{ before(grammarAccess.getLinkRule()); }
	 ruleLink
{ after(grammarAccess.getLinkRule()); } 
	 EOF 
;

// Rule Link
ruleLink 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getLinkAccess().getGroup()); }
(rule__Link__Group__0)
{ after(grammarAccess.getLinkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule NodeType
ruleNodeType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getAlternatives()); }
(rule__NodeType__Alternatives)
{ after(grammarAccess.getNodeTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PhenomenonType
rulePhenomenonType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhenomenonTypeAccess().getAlternatives()); }
(rule__PhenomenonType__Alternatives)
{ after(grammarAccess.getPhenomenonTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LinkType
ruleLinkType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkTypeAccess().getAlternatives()); }
(rule__LinkType__Alternatives)
{ after(grammarAccess.getLinkTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ProblemDiagram__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemDiagramAccess().getNodesAssignment_3_0()); }
(rule__ProblemDiagram__NodesAssignment_3_0)
{ after(grammarAccess.getProblemDiagramAccess().getNodesAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getProblemDiagramAccess().getLinksAssignment_3_1()); }
(rule__ProblemDiagram__LinksAssignment_3_1)
{ after(grammarAccess.getProblemDiagramAccess().getLinksAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Alternatives_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getSubproblemAssignment_3_2_0()); }
(rule__Node__SubproblemAssignment_3_2_0)
{ after(grammarAccess.getNodeAccess().getSubproblemAssignment_3_2_0()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getGroup_3_2_1()); }
(rule__Node__Group_3_2_1__0)
{ after(grammarAccess.getNodeAccess().getGroup_3_2_1()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getGroup_3_2_2()); }
(rule__Node__Group_3_2_2__0)
{ after(grammarAccess.getNodeAccess().getGroup_3_2_2()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getGroup_3_2_3()); }
(rule__Node__Group_3_2_3__0)
{ after(grammarAccess.getNodeAccess().getGroup_3_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getREQUIREMENTEnumLiteralDeclaration_0()); }
(	'R' 
)
{ after(grammarAccess.getNodeTypeAccess().getREQUIREMENTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getNodeTypeAccess().getMACHINEEnumLiteralDeclaration_1()); }
(	'M' 
)
{ after(grammarAccess.getNodeTypeAccess().getMACHINEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getNodeTypeAccess().getBIDDABLEEnumLiteralDeclaration_2()); }
(	'B' 
)
{ after(grammarAccess.getNodeTypeAccess().getBIDDABLEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getNodeTypeAccess().getLEXICALEnumLiteralDeclaration_3()); }
(	'X' 
)
{ after(grammarAccess.getNodeTypeAccess().getLEXICALEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getNodeTypeAccess().getCAUSALEnumLiteralDeclaration_4()); }
(	'C' 
)
{ after(grammarAccess.getNodeTypeAccess().getCAUSALEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getNodeTypeAccess().getDESIGNEDEnumLiteralDeclaration_5()); }
(	'D' 
)
{ after(grammarAccess.getNodeTypeAccess().getDESIGNEDEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getNodeTypeAccess().getPHYSICALEnumLiteralDeclaration_6()); }
(	'P' 
)
{ after(grammarAccess.getNodeTypeAccess().getPHYSICALEnumLiteralDeclaration_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PhenomenonType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhenomenonTypeAccess().getUNSPECIFIEDEnumLiteralDeclaration_0()); }
(	'phenomenon' 
)
{ after(grammarAccess.getPhenomenonTypeAccess().getUNSPECIFIEDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPhenomenonTypeAccess().getEVENTEnumLiteralDeclaration_1()); }
(	'event' 
)
{ after(grammarAccess.getPhenomenonTypeAccess().getEVENTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getPhenomenonTypeAccess().getSTATEEnumLiteralDeclaration_2()); }
(	'state' 
)
{ after(grammarAccess.getPhenomenonTypeAccess().getSTATEEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LinkType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkTypeAccess().getINTERFACEEnumLiteralDeclaration_0()); }
(	'--' 
)
{ after(grammarAccess.getLinkTypeAccess().getINTERFACEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getLinkTypeAccess().getREFERENCEEnumLiteralDeclaration_1()); }
(	'~~' 
)
{ after(grammarAccess.getLinkTypeAccess().getREFERENCEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getLinkTypeAccess().getCONSTRAINTEnumLiteralDeclaration_2()); }
(	'~>' 
)
{ after(grammarAccess.getLinkTypeAccess().getCONSTRAINTEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ProblemDiagram__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemDiagramAccess().getProblemKeyword_0()); }

	'problem' 

{ after(grammarAccess.getProblemDiagramAccess().getProblemKeyword_0()); }
)

	rule__ProblemDiagram__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ProblemDiagram__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemDiagramAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getProblemDiagramAccess().getColonKeyword_1()); }
)

	rule__ProblemDiagram__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__ProblemDiagram__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemDiagramAccess().getNameAssignment_2()); }
(rule__ProblemDiagram__NameAssignment_2)
{ after(grammarAccess.getProblemDiagramAccess().getNameAssignment_2()); }
)

	rule__ProblemDiagram__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__ProblemDiagram__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemDiagramAccess().getAlternatives_3()); }
(rule__ProblemDiagram__Alternatives_3)*
{ after(grammarAccess.getProblemDiagramAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Node__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getNameAssignment_0()); }
(rule__Node__NameAssignment_0)
{ after(grammarAccess.getNodeAccess().getNameAssignment_0()); }
)

	rule__Node__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getTypeAssignment_1()); }
(rule__Node__TypeAssignment_1)?
{ after(grammarAccess.getNodeAccess().getTypeAssignment_1()); }
)

	rule__Node__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getGroup_2()); }
(rule__Node__Group_2__0)?
{ after(grammarAccess.getNodeAccess().getGroup_2()); }
)

	rule__Node__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getGroup_3()); }
(rule__Node__Group_3__0)?
{ after(grammarAccess.getNodeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Node__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getColonKeyword_2_0()); }

	':' 

{ after(grammarAccess.getNodeAccess().getColonKeyword_2_0()); }
)

	rule__Node__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getDescriptionAssignment_2_1()); }
(rule__Node__DescriptionAssignment_2_1)
{ after(grammarAccess.getNodeAccess().getDescriptionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Node__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_3_0()); }

	'{' 

{ after(grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_3_0()); }
)

	rule__Node__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getGroup_3_1()); }
(rule__Node__Group_3_1__0)?
{ after(grammarAccess.getNodeAccess().getGroup_3_1()); }
)

	rule__Node__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getAlternatives_3_2()); }
(rule__Node__Alternatives_3_2)*
{ after(grammarAccess.getNodeAccess().getAlternatives_3_2()); }
)

	rule__Node__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getRightCurlyBracketKeyword_3_3()); }

	'}' 

{ after(grammarAccess.getNodeAccess().getRightCurlyBracketKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Node__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getHiddenPhenomenaAssignment_3_1_0()); }
(rule__Node__HiddenPhenomenaAssignment_3_1_0)
{ after(grammarAccess.getNodeAccess().getHiddenPhenomenaAssignment_3_1_0()); }
)

	rule__Node__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getGroup_3_1_1()); }
(rule__Node__Group_3_1_1__0)*
{ after(grammarAccess.getNodeAccess().getGroup_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Node__Group_3_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getCommaKeyword_3_1_1_0()); }

	',' 

{ after(grammarAccess.getNodeAccess().getCommaKeyword_3_1_1_0()); }
)

	rule__Node__Group_3_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_3_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getHiddenPhenomenaAssignment_3_1_1_1()); }
(rule__Node__HiddenPhenomenaAssignment_3_1_1_1)
{ after(grammarAccess.getNodeAccess().getHiddenPhenomenaAssignment_3_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Node__Group_3_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getSeeKeyword_3_2_1_0()); }

	'see' 

{ after(grammarAccess.getNodeAccess().getSeeKeyword_3_2_1_0()); }
)

	rule__Node__Group_3_2_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_3_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getDomainKeyword_3_2_1_1()); }

	'domain' 

{ after(grammarAccess.getNodeAccess().getDomainKeyword_3_2_1_1()); }
)

	rule__Node__Group_3_2_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_3_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getProblemNodeRefAssignment_3_2_1_2()); }
(rule__Node__ProblemNodeRefAssignment_3_2_1_2)
{ after(grammarAccess.getNodeAccess().getProblemNodeRefAssignment_3_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Node__Group_3_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getSeeKeyword_3_2_2_0()); }

	'see' 

{ after(grammarAccess.getNodeAccess().getSeeKeyword_3_2_2_0()); }
)

	rule__Node__Group_3_2_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_3_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getProblemKeyword_3_2_2_1()); }

	'problem' 

{ after(grammarAccess.getNodeAccess().getProblemKeyword_3_2_2_1()); }
)

	rule__Node__Group_3_2_2__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_3_2_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getProblemRefAssignment_3_2_2_2()); }
(rule__Node__ProblemRefAssignment_3_2_2_2)
{ after(grammarAccess.getNodeAccess().getProblemRefAssignment_3_2_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Node__Group_3_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getSeeKeyword_3_2_3_0()); }

	'see' 

{ after(grammarAccess.getNodeAccess().getSeeKeyword_3_2_3_0()); }
)

	rule__Node__Group_3_2_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_3_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getHrefAssignment_3_2_3_1()); }
(rule__Node__HrefAssignment_3_2_3_1)
{ after(grammarAccess.getNodeAccess().getHrefAssignment_3_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Phenomenon__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhenomenonAccess().getTypeAssignment_0()); }
(rule__Phenomenon__TypeAssignment_0)?
{ after(grammarAccess.getPhenomenonAccess().getTypeAssignment_0()); }
)

	rule__Phenomenon__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Phenomenon__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhenomenonAccess().getIsControlledAssignment_1()); }
(rule__Phenomenon__IsControlledAssignment_1)?
{ after(grammarAccess.getPhenomenonAccess().getIsControlledAssignment_1()); }
)

	rule__Phenomenon__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Phenomenon__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhenomenonAccess().getNameAssignment_2()); }
(rule__Phenomenon__NameAssignment_2)
{ after(grammarAccess.getPhenomenonAccess().getNameAssignment_2()); }
)

	rule__Phenomenon__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Phenomenon__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhenomenonAccess().getGroup_3()); }
(rule__Phenomenon__Group_3__0)?
{ after(grammarAccess.getPhenomenonAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Phenomenon__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhenomenonAccess().getColonKeyword_3_0()); }

	':' 

{ after(grammarAccess.getPhenomenonAccess().getColonKeyword_3_0()); }
)

	rule__Phenomenon__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Phenomenon__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhenomenonAccess().getDescriptionAssignment_3_1()); }
(rule__Phenomenon__DescriptionAssignment_3_1)
{ after(grammarAccess.getPhenomenonAccess().getDescriptionAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Link__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getFromAssignment_0()); }
(rule__Link__FromAssignment_0)
{ after(grammarAccess.getLinkAccess().getFromAssignment_0()); }
)

	rule__Link__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getTypeAssignment_1()); }
(rule__Link__TypeAssignment_1)
{ after(grammarAccess.getLinkAccess().getTypeAssignment_1()); }
)

	rule__Link__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getToAssignment_2()); }
(rule__Link__ToAssignment_2)
{ after(grammarAccess.getLinkAccess().getToAssignment_2()); }
)

	rule__Link__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getGroup_3()); }
(rule__Link__Group_3__0)?
{ after(grammarAccess.getLinkAccess().getGroup_3()); }
)

	rule__Link__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getGroup_4()); }
(rule__Link__Group_4__0)?
{ after(grammarAccess.getLinkAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Link__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getLeftCurlyBracketKeyword_3_0()); }

	'{' 

{ after(grammarAccess.getLinkAccess().getLeftCurlyBracketKeyword_3_0()); }
)

	rule__Link__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getPhenomenaAssignment_3_1()); }
(rule__Link__PhenomenaAssignment_3_1)
{ after(grammarAccess.getLinkAccess().getPhenomenaAssignment_3_1()); }
)

	rule__Link__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getGroup_3_2()); }
(rule__Link__Group_3_2__0)*
{ after(grammarAccess.getLinkAccess().getGroup_3_2()); }
)

	rule__Link__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getRightCurlyBracketKeyword_3_3()); }

	'}' 

{ after(grammarAccess.getLinkAccess().getRightCurlyBracketKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Link__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getCommaKeyword_3_2_0()); }

	',' 

{ after(grammarAccess.getLinkAccess().getCommaKeyword_3_2_0()); }
)

	rule__Link__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getPhenomenaAssignment_3_2_1()); }
(rule__Link__PhenomenaAssignment_3_2_1)
{ after(grammarAccess.getLinkAccess().getPhenomenaAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Link__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getColonKeyword_4_0()); }

	':' 

{ after(grammarAccess.getLinkAccess().getColonKeyword_4_0()); }
)

	rule__Link__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getDescriptionAssignment_4_1()); }
(rule__Link__DescriptionAssignment_4_1)
{ after(grammarAccess.getLinkAccess().getDescriptionAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProblemDiagram__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemDiagramAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getProblemDiagramAccess().getNameSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemDiagram__NodesAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemDiagramAccess().getNodesNodeParserRuleCall_3_0_0()); }
	ruleNode{ after(grammarAccess.getProblemDiagramAccess().getNodesNodeParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProblemDiagram__LinksAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProblemDiagramAccess().getLinksLinkParserRuleCall_3_1_0()); }
	ruleLink{ after(grammarAccess.getProblemDiagramAccess().getLinksLinkParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getTypeNodeTypeEnumRuleCall_1_0()); }
	ruleNodeType{ after(grammarAccess.getNodeAccess().getTypeNodeTypeEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__DescriptionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getDescriptionSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getNodeAccess().getDescriptionSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__HiddenPhenomenaAssignment_3_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getHiddenPhenomenaPhenomenonParserRuleCall_3_1_0_0()); }
	rulePhenomenon{ after(grammarAccess.getNodeAccess().getHiddenPhenomenaPhenomenonParserRuleCall_3_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__HiddenPhenomenaAssignment_3_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getHiddenPhenomenaPhenomenonParserRuleCall_3_1_1_1_0()); }
	rulePhenomenon{ after(grammarAccess.getNodeAccess().getHiddenPhenomenaPhenomenonParserRuleCall_3_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__SubproblemAssignment_3_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getSubproblemProblemDiagramParserRuleCall_3_2_0_0()); }
	ruleProblemDiagram{ after(grammarAccess.getNodeAccess().getSubproblemProblemDiagramParserRuleCall_3_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__ProblemNodeRefAssignment_3_2_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getProblemNodeRefNodeCrossReference_3_2_1_2_0()); }
(
{ before(grammarAccess.getNodeAccess().getProblemNodeRefNodeIDTerminalRuleCall_3_2_1_2_0_1()); }
	RULE_ID{ after(grammarAccess.getNodeAccess().getProblemNodeRefNodeIDTerminalRuleCall_3_2_1_2_0_1()); }
)
{ after(grammarAccess.getNodeAccess().getProblemNodeRefNodeCrossReference_3_2_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__ProblemRefAssignment_3_2_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getProblemRefProblemDiagramCrossReference_3_2_2_2_0()); }
(
{ before(grammarAccess.getNodeAccess().getProblemRefProblemDiagramIDTerminalRuleCall_3_2_2_2_0_1()); }
	RULE_ID{ after(grammarAccess.getNodeAccess().getProblemRefProblemDiagramIDTerminalRuleCall_3_2_2_2_0_1()); }
)
{ after(grammarAccess.getNodeAccess().getProblemRefProblemDiagramCrossReference_3_2_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__HrefAssignment_3_2_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getHrefSTRINGTerminalRuleCall_3_2_3_1_0()); }
	RULE_STRING{ after(grammarAccess.getNodeAccess().getHrefSTRINGTerminalRuleCall_3_2_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Phenomenon__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhenomenonAccess().getTypePhenomenonTypeEnumRuleCall_0_0()); }
	rulePhenomenonType{ after(grammarAccess.getPhenomenonAccess().getTypePhenomenonTypeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Phenomenon__IsControlledAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhenomenonAccess().getIsControlledExclamationMarkKeyword_1_0()); }
(
{ before(grammarAccess.getPhenomenonAccess().getIsControlledExclamationMarkKeyword_1_0()); }

	'!' 

{ after(grammarAccess.getPhenomenonAccess().getIsControlledExclamationMarkKeyword_1_0()); }
)

{ after(grammarAccess.getPhenomenonAccess().getIsControlledExclamationMarkKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Phenomenon__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhenomenonAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getPhenomenonAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Phenomenon__DescriptionAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhenomenonAccess().getDescriptionSTRINGTerminalRuleCall_3_1_0()); }
	RULE_STRING{ after(grammarAccess.getPhenomenonAccess().getDescriptionSTRINGTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__FromAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getFromNodeCrossReference_0_0()); }
(
{ before(grammarAccess.getLinkAccess().getFromNodeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getLinkAccess().getFromNodeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getLinkAccess().getFromNodeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getTypeLinkTypeEnumRuleCall_1_0()); }
	ruleLinkType{ after(grammarAccess.getLinkAccess().getTypeLinkTypeEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__ToAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getToNodeCrossReference_2_0()); }
(
{ before(grammarAccess.getLinkAccess().getToNodeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getLinkAccess().getToNodeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getLinkAccess().getToNodeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__PhenomenaAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getPhenomenaPhenomenonParserRuleCall_3_1_0()); }
	rulePhenomenon{ after(grammarAccess.getLinkAccess().getPhenomenaPhenomenonParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__PhenomenaAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getPhenomenaPhenomenonParserRuleCall_3_2_1_0()); }
	rulePhenomenon{ after(grammarAccess.getLinkAccess().getPhenomenaPhenomenonParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__DescriptionAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getDescriptionSTRINGTerminalRuleCall_4_1_0()); }
	RULE_STRING{ after(grammarAccess.getLinkAccess().getDescriptionSTRINGTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : ('#' ~('#')+ '#'|'^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*);

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


