/*
* generated by Xtext
*/
package uk.ac.open.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import uk.ac.open.services.ProblemGrammarAccess;

public class ProblemParser extends AbstractContentAssistParser {
	
	@Inject
	private ProblemGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected uk.ac.open.contentassist.antlr.internal.InternalProblemLexer createLexer(CharStream stream) {
		return new uk.ac.open.contentassist.antlr.internal.InternalProblemLexer(stream);
	}
	
	@Override
	protected uk.ac.open.contentassist.antlr.internal.InternalProblemParser createParser() {
		uk.ac.open.contentassist.antlr.internal.InternalProblemParser result = new uk.ac.open.contentassist.antlr.internal.InternalProblemParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getProblemDiagramAccess().getAlternatives_3(), "rule__ProblemDiagram__Alternatives_3");
					put(grammarAccess.getNodeAccess().getAlternatives_3_2(), "rule__Node__Alternatives_3_2");
					put(grammarAccess.getNodeTypeAccess().getAlternatives(), "rule__NodeType__Alternatives");
					put(grammarAccess.getPhenomenonTypeAccess().getAlternatives(), "rule__PhenomenonType__Alternatives");
					put(grammarAccess.getLinkTypeAccess().getAlternatives(), "rule__LinkType__Alternatives");
					put(grammarAccess.getProblemDiagramAccess().getGroup(), "rule__ProblemDiagram__Group__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getNodeAccess().getGroup_2(), "rule__Node__Group_2__0");
					put(grammarAccess.getNodeAccess().getGroup_3(), "rule__Node__Group_3__0");
					put(grammarAccess.getNodeAccess().getGroup_3_1(), "rule__Node__Group_3_1__0");
					put(grammarAccess.getNodeAccess().getGroup_3_1_1(), "rule__Node__Group_3_1_1__0");
					put(grammarAccess.getNodeAccess().getGroup_3_2_1(), "rule__Node__Group_3_2_1__0");
					put(grammarAccess.getNodeAccess().getGroup_3_2_2(), "rule__Node__Group_3_2_2__0");
					put(grammarAccess.getNodeAccess().getGroup_3_2_3(), "rule__Node__Group_3_2_3__0");
					put(grammarAccess.getPhenomenonAccess().getGroup(), "rule__Phenomenon__Group__0");
					put(grammarAccess.getPhenomenonAccess().getGroup_3(), "rule__Phenomenon__Group_3__0");
					put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
					put(grammarAccess.getLinkAccess().getGroup_3(), "rule__Link__Group_3__0");
					put(grammarAccess.getLinkAccess().getGroup_3_2(), "rule__Link__Group_3_2__0");
					put(grammarAccess.getLinkAccess().getGroup_4(), "rule__Link__Group_4__0");
					put(grammarAccess.getProblemDiagramAccess().getNameAssignment_2(), "rule__ProblemDiagram__NameAssignment_2");
					put(grammarAccess.getProblemDiagramAccess().getNodesAssignment_3_0(), "rule__ProblemDiagram__NodesAssignment_3_0");
					put(grammarAccess.getProblemDiagramAccess().getLinksAssignment_3_1(), "rule__ProblemDiagram__LinksAssignment_3_1");
					put(grammarAccess.getNodeAccess().getNameAssignment_0(), "rule__Node__NameAssignment_0");
					put(grammarAccess.getNodeAccess().getTypeAssignment_1(), "rule__Node__TypeAssignment_1");
					put(grammarAccess.getNodeAccess().getDescriptionAssignment_2_1(), "rule__Node__DescriptionAssignment_2_1");
					put(grammarAccess.getNodeAccess().getHiddenPhenomenaAssignment_3_1_0(), "rule__Node__HiddenPhenomenaAssignment_3_1_0");
					put(grammarAccess.getNodeAccess().getHiddenPhenomenaAssignment_3_1_1_1(), "rule__Node__HiddenPhenomenaAssignment_3_1_1_1");
					put(grammarAccess.getNodeAccess().getSubproblemAssignment_3_2_0(), "rule__Node__SubproblemAssignment_3_2_0");
					put(grammarAccess.getNodeAccess().getProblemNodeRefAssignment_3_2_1_2(), "rule__Node__ProblemNodeRefAssignment_3_2_1_2");
					put(grammarAccess.getNodeAccess().getProblemRefAssignment_3_2_2_2(), "rule__Node__ProblemRefAssignment_3_2_2_2");
					put(grammarAccess.getNodeAccess().getHrefAssignment_3_2_3_1(), "rule__Node__HrefAssignment_3_2_3_1");
					put(grammarAccess.getPhenomenonAccess().getTypeAssignment_0(), "rule__Phenomenon__TypeAssignment_0");
					put(grammarAccess.getPhenomenonAccess().getIsControlledAssignment_1(), "rule__Phenomenon__IsControlledAssignment_1");
					put(grammarAccess.getPhenomenonAccess().getNameAssignment_2(), "rule__Phenomenon__NameAssignment_2");
					put(grammarAccess.getPhenomenonAccess().getDescriptionAssignment_3_1(), "rule__Phenomenon__DescriptionAssignment_3_1");
					put(grammarAccess.getLinkAccess().getFromAssignment_0(), "rule__Link__FromAssignment_0");
					put(grammarAccess.getLinkAccess().getTypeAssignment_1(), "rule__Link__TypeAssignment_1");
					put(grammarAccess.getLinkAccess().getToAssignment_2(), "rule__Link__ToAssignment_2");
					put(grammarAccess.getLinkAccess().getPhenomenaAssignment_3_1(), "rule__Link__PhenomenaAssignment_3_1");
					put(grammarAccess.getLinkAccess().getPhenomenaAssignment_3_2_1(), "rule__Link__PhenomenaAssignment_3_2_1");
					put(grammarAccess.getLinkAccess().getDescriptionAssignment_4_1(), "rule__Link__DescriptionAssignment_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			uk.ac.open.contentassist.antlr.internal.InternalProblemParser typedParser = (uk.ac.open.contentassist.antlr.internal.InternalProblemParser) parser;
			typedParser.entryRuleProblemDiagram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ProblemGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ProblemGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
