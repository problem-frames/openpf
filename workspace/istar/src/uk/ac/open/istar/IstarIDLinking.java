/*
 * generated by Xtext
 */

package uk.ac.open.istar;

import java.util.Collections;
import java.util.List;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.linking.impl.DefaultLinkingService;
import org.eclipse.xtext.linking.impl.IllegalNodeException;
import org.eclipse.xtext.parsetree.AbstractNode;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;

import com.google.inject.Singleton;

@Singleton
public class IstarIDLinking extends DefaultLinkingService {
	@Override
	public List<EObject> getLinkedObjects(EObject context, EReference ref,
			AbstractNode node) throws IllegalNodeException {		
		final EClass requiredType = ref.getEReferenceType();
		if (requiredType == null)
			return Collections.<EObject> emptyList();
		final IScope scope = getScope(context, ref);
		final String s = getCrossRefNodeAsString(node);		
		if (s != null) {
			IEObjectDescription eObjectDescription = null;
			for (IEObjectDescription c: scope.getContents()) {
				String n = c.getName();
				String id = n;
				if (id.equals(s)) {
					eObjectDescription = c;
				}
			}
			if (eObjectDescription != null) {
				EObject obj = eObjectDescription.getEObjectOrProxy();
				return Collections.singletonList(obj);
			} else {
				System.out.println("??? " + s);
			}
		} else {
			System.out.println("??? " + context + ref + node);			
		}
		return Collections.emptyList();
	}

}
