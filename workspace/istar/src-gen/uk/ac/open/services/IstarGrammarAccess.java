/*
* generated by Xtext
*/

package uk.ac.open.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IstarGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIstarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cContainersAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cContainersContainerParserRuleCall_3_0_0 = (RuleCall)cContainersAssignment_3_0.eContents().get(0);
		private final Assignment cIntentionsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cIntentionsIntentionParserRuleCall_3_1_0 = (RuleCall)cIntentionsAssignment_3_1.eContents().get(0);
		private final Assignment cDecompositionsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cDecompositionsDecompositionParserRuleCall_3_2_0 = (RuleCall)cDecompositionsAssignment_3_2.eContents().get(0);
		private final Assignment cDependenciesAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cDependenciesDependencyParserRuleCall_3_3_0 = (RuleCall)cDependenciesAssignment_3_3.eContents().get(0);
		private final Assignment cContributionsAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cContributionsContributionParserRuleCall_3_4_0 = (RuleCall)cContributionsAssignment_3_4.eContents().get(0);
		private final Assignment cAssociationsAssignment_3_5 = (Assignment)cAlternatives_3.eContents().get(5);
		private final RuleCall cAssociationsAssociationParserRuleCall_3_5_0 = (RuleCall)cAssociationsAssignment_3_5.eContents().get(0);
		
		//Model:
		//  "istar" name=ID? ":" (containers+=Container|intentions+=Intention|decompositions+=
		//  Decomposition|dependencies+=Dependency|contributions+=Contribution|associations
		//  +=Association)*;
		public ParserRule getRule() { return rule; }

		//"istar" name=ID? ":" (containers+=Container|intentions+=Intention|decompositions+=
		//Decomposition|dependencies+=Dependency|contributions+=Contribution|associations
		//+=Association)*
		public Group getGroup() { return cGroup; }

		//"istar"
		public Keyword getIstarKeyword_0() { return cIstarKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//(containers+=Container|intentions+=Intention|decompositions+=Decomposition|
		//dependencies+=Dependency|contributions+=Contribution|associations+=Association)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//containers+=Container
		public Assignment getContainersAssignment_3_0() { return cContainersAssignment_3_0; }

		//Container
		public RuleCall getContainersContainerParserRuleCall_3_0_0() { return cContainersContainerParserRuleCall_3_0_0; }

		//intentions+=Intention
		public Assignment getIntentionsAssignment_3_1() { return cIntentionsAssignment_3_1; }

		//Intention
		public RuleCall getIntentionsIntentionParserRuleCall_3_1_0() { return cIntentionsIntentionParserRuleCall_3_1_0; }

		//decompositions+=Decomposition
		public Assignment getDecompositionsAssignment_3_2() { return cDecompositionsAssignment_3_2; }

		//Decomposition
		public RuleCall getDecompositionsDecompositionParserRuleCall_3_2_0() { return cDecompositionsDecompositionParserRuleCall_3_2_0; }

		//dependencies+=Dependency
		public Assignment getDependenciesAssignment_3_3() { return cDependenciesAssignment_3_3; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_3_3_0() { return cDependenciesDependencyParserRuleCall_3_3_0; }

		//contributions+=Contribution
		public Assignment getContributionsAssignment_3_4() { return cContributionsAssignment_3_4; }

		//Contribution
		public RuleCall getContributionsContributionParserRuleCall_3_4_0() { return cContributionsContributionParserRuleCall_3_4_0; }

		//associations+=Association
		public Assignment getAssociationsAssignment_3_5() { return cAssociationsAssignment_3_5; }

		//Association
		public RuleCall getAssociationsAssociationParserRuleCall_3_5_0() { return cAssociationsAssociationParserRuleCall_3_5_0; }
	}

	public class ContainerElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Container");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAgentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRoleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPositionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Container:
		//  Actor|Agent|Role|Position;
		public ParserRule getRule() { return rule; }

		//Actor|Agent|Role|Position
		public Alternatives getAlternatives() { return cAlternatives; }

		//Actor
		public RuleCall getActorParserRuleCall_0() { return cActorParserRuleCall_0; }

		//Agent
		public RuleCall getAgentParserRuleCall_1() { return cAgentParserRuleCall_1; }

		//Role
		public RuleCall getRoleParserRuleCall_2() { return cRoleParserRuleCall_2; }

		//Position
		public RuleCall getPositionParserRuleCall_3() { return cPositionParserRuleCall_3; }
	}

	public class ActorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIs_aAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cIs_aActorCrossReference_2_0_0 = (CrossReference)cIs_aAssignment_2_0.eContents().get(0);
		private final RuleCall cIs_aActorIDTerminalRuleCall_2_0_0_1 = (RuleCall)cIs_aActorCrossReference_2_0_0.eContents().get(1);
		private final Assignment cIs_part_ofAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cIs_part_ofActorCrossReference_2_1_0 = (CrossReference)cIs_part_ofAssignment_2_1.eContents().get(0);
		private final RuleCall cIs_part_ofActorIDTerminalRuleCall_2_1_0_1 = (RuleCall)cIs_part_ofActorCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIntentionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIntentionsIntentionParserRuleCall_3_1_0 = (RuleCall)cIntentionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Actor:
		//  "actor" name=ID (is_a+=[Actor]|is_part_of+=[Actor])* ("{" intentions+=Intention* "}")
		//  ?;
		public ParserRule getRule() { return rule; }

		//"actor" name=ID (is_a+=[Actor]|is_part_of+=[Actor])* ("{" intentions+=Intention* "}")
		//?
		public Group getGroup() { return cGroup; }

		//"actor"
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(is_a+=[Actor]|is_part_of+=[Actor])*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//is_a+=[Actor]
		public Assignment getIs_aAssignment_2_0() { return cIs_aAssignment_2_0; }

		//[Actor]
		public CrossReference getIs_aActorCrossReference_2_0_0() { return cIs_aActorCrossReference_2_0_0; }

		//ID
		public RuleCall getIs_aActorIDTerminalRuleCall_2_0_0_1() { return cIs_aActorIDTerminalRuleCall_2_0_0_1; }

		//is_part_of+=[Actor]
		public Assignment getIs_part_ofAssignment_2_1() { return cIs_part_ofAssignment_2_1; }

		//[Actor]
		public CrossReference getIs_part_ofActorCrossReference_2_1_0() { return cIs_part_ofActorCrossReference_2_1_0; }

		//ID
		public RuleCall getIs_part_ofActorIDTerminalRuleCall_2_1_0_1() { return cIs_part_ofActorIDTerminalRuleCall_2_1_0_1; }

		//("{" intentions+=Intention* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//intentions+=Intention*
		public Assignment getIntentionsAssignment_3_1() { return cIntentionsAssignment_3_1; }

		//Intention
		public RuleCall getIntentionsIntentionParserRuleCall_3_1_0() { return cIntentionsIntentionParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class AgentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIntentionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIntentionsIntentionParserRuleCall_2_1_0 = (RuleCall)cIntentionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Agent:
		//  "agent" name=ID ("{" intentions+=Intention* "}")?;
		public ParserRule getRule() { return rule; }

		//"agent" name=ID ("{" intentions+=Intention* "}")?
		public Group getGroup() { return cGroup; }

		//"agent"
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" intentions+=Intention* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//intentions+=Intention*
		public Assignment getIntentionsAssignment_2_1() { return cIntentionsAssignment_2_1; }

		//Intention
		public RuleCall getIntentionsIntentionParserRuleCall_2_1_0() { return cIntentionsIntentionParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class RoleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIntentionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIntentionsIntentionParserRuleCall_2_1_0 = (RuleCall)cIntentionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Role:
		//  "role" name=ID ("{" intentions+=Intention* "}")?;
		public ParserRule getRule() { return rule; }

		//"role" name=ID ("{" intentions+=Intention* "}")?
		public Group getGroup() { return cGroup; }

		//"role"
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" intentions+=Intention* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//intentions+=Intention*
		public Assignment getIntentionsAssignment_2_1() { return cIntentionsAssignment_2_1; }

		//Intention
		public RuleCall getIntentionsIntentionParserRuleCall_2_1_0() { return cIntentionsIntentionParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class PositionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Position");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIntentionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIntentionsIntentionParserRuleCall_2_1_0 = (RuleCall)cIntentionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Position:
		//  "position" name=ID ("{" intentions+=Intention* "}")?;
		public ParserRule getRule() { return rule; }

		//"position" name=ID ("{" intentions+=Intention* "}")?
		public Group getGroup() { return cGroup; }

		//"position"
		public Keyword getPositionKeyword_0() { return cPositionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" intentions+=Intention* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//intentions+=Intention*
		public Assignment getIntentionsAssignment_2_1() { return cIntentionsAssignment_2_1; }

		//Intention
		public RuleCall getIntentionsIntentionParserRuleCall_2_1_0() { return cIntentionsIntentionParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class IntentionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Intention");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGoalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSoftgoalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTaskParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cResourceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBeliefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Intention:
		//  Goal|Softgoal|Task|Resource|Belief;
		public ParserRule getRule() { return rule; }

		//Goal|Softgoal|Task|Resource|Belief
		public Alternatives getAlternatives() { return cAlternatives; }

		//Goal
		public RuleCall getGoalParserRuleCall_0() { return cGoalParserRuleCall_0; }

		//Softgoal
		public RuleCall getSoftgoalParserRuleCall_1() { return cSoftgoalParserRuleCall_1; }

		//Task
		public RuleCall getTaskParserRuleCall_2() { return cTaskParserRuleCall_2; }

		//Resource
		public RuleCall getResourceParserRuleCall_3() { return cResourceParserRuleCall_3; }

		//Belief
		public RuleCall getBeliefParserRuleCall_4() { return cBeliefParserRuleCall_4; }
	}

	public class GoalElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDecompositionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cDecompositionsDecompositionCrossReference_2_1_0 = (CrossReference)cDecompositionsAssignment_2_1.eContents().get(0);
		private final RuleCall cDecompositionsDecompositionIDTerminalRuleCall_2_1_0_1 = (RuleCall)cDecompositionsDecompositionCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Goal:
		//  "goal" name=ID ("{" decompositions+=[Decomposition]* "}")?;
		public ParserRule getRule() { return rule; }

		//"goal" name=ID ("{" decompositions+=[Decomposition]* "}")?
		public Group getGroup() { return cGroup; }

		//"goal"
		public Keyword getGoalKeyword_0() { return cGoalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" decompositions+=[Decomposition]* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//decompositions+=[Decomposition]*
		public Assignment getDecompositionsAssignment_2_1() { return cDecompositionsAssignment_2_1; }

		//[Decomposition]
		public CrossReference getDecompositionsDecompositionCrossReference_2_1_0() { return cDecompositionsDecompositionCrossReference_2_1_0; }

		//ID
		public RuleCall getDecompositionsDecompositionIDTerminalRuleCall_2_1_0_1() { return cDecompositionsDecompositionIDTerminalRuleCall_2_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class SoftgoalElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Softgoal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSoftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Softgoal:
		//  "soft" name=ID;
		public ParserRule getRule() { return rule; }

		//"soft" name=ID
		public Group getGroup() { return cGroup; }

		//"soft"
		public Keyword getSoftKeyword_0() { return cSoftKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TaskElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Task:
		//  "task" name=ID;
		public ParserRule getRule() { return rule; }

		//"task" name=ID
		public Group getGroup() { return cGroup; }

		//"task"
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ResourceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Resource:
		//  "resource" name=ID;
		public ParserRule getRule() { return rule; }

		//"resource" name=ID
		public Group getGroup() { return cGroup; }

		//"resource"
		public Keyword getResourceKeyword_0() { return cResourceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class BeliefElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Belief");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeliefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Belief:
		//  "belief" name=ID;
		public ParserRule getRule() { return rule; }

		//"belief" name=ID
		public Group getGroup() { return cGroup; }

		//"belief"
		public Keyword getBeliefKeyword_0() { return cBeliefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class LinkElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssociationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDependencyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDecompositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cContributionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Link:
		//  Association|Dependency|Decomposition|Contribution;
		public ParserRule getRule() { return rule; }

		//Association|Dependency|Decomposition|Contribution
		public Alternatives getAlternatives() { return cAlternatives; }

		//Association
		public RuleCall getAssociationParserRuleCall_0() { return cAssociationParserRuleCall_0; }

		//Dependency
		public RuleCall getDependencyParserRuleCall_1() { return cDependencyParserRuleCall_1; }

		//Decomposition
		public RuleCall getDecompositionParserRuleCall_2() { return cDecompositionParserRuleCall_2; }

		//Contribution
		public RuleCall getContributionParserRuleCall_3() { return cContributionParserRuleCall_3; }
	}

	public class DependableElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntentionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContainerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Dependable:
		//  Intention|Container;
		public ParserRule getRule() { return rule; }

		//Intention|Container
		public Alternatives getAlternatives() { return cAlternatives; }

		//Intention
		public RuleCall getIntentionParserRuleCall_0() { return cIntentionParserRuleCall_0; }

		//Container
		public RuleCall getContainerParserRuleCall_1() { return cContainerParserRuleCall_1; }
	}

	public class AssociationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceContainerCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceContainerIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceContainerCrossReference_0_0.eContents().get(1);
		private final Keyword cTildeTildeGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetContainerCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetContainerIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetContainerCrossReference_2_0.eContents().get(1);
		
		//Association:
		//  source=[Container] "~~>" target=[Container];
		public ParserRule getRule() { return rule; }

		//source=[Container] "~~>" target=[Container]
		public Group getGroup() { return cGroup; }

		//source=[Container]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[Container]
		public CrossReference getSourceContainerCrossReference_0_0() { return cSourceContainerCrossReference_0_0; }

		//ID
		public RuleCall getSourceContainerIDTerminalRuleCall_0_0_1() { return cSourceContainerIDTerminalRuleCall_0_0_1; }

		//"~~>"
		public Keyword getTildeTildeGreaterThanSignKeyword_1() { return cTildeTildeGreaterThanSignKeyword_1; }

		//target=[Container]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[Container]
		public CrossReference getTargetContainerCrossReference_2_0() { return cTargetContainerCrossReference_2_0; }

		//ID
		public RuleCall getTargetContainerIDTerminalRuleCall_2_0_1() { return cTargetContainerIDTerminalRuleCall_2_0_1; }
	}

	public class DependencyElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDependencyFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDependencyFromDependableCrossReference_0_0 = (CrossReference)cDependencyFromAssignment_0.eContents().get(0);
		private final RuleCall cDependencyFromDependableIDTerminalRuleCall_0_0_1 = (RuleCall)cDependencyFromDependableCrossReference_0_0.eContents().get(1);
		private final Keyword cTildeGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDependencyToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDependencyToDependableCrossReference_2_0 = (CrossReference)cDependencyToAssignment_2.eContents().get(0);
		private final RuleCall cDependencyToDependableIDTerminalRuleCall_2_0_1 = (RuleCall)cDependencyToDependableCrossReference_2_0.eContents().get(1);
		
		//Dependency:
		//  dependencyFrom=[Dependable] "~>" dependencyTo=[Dependable];
		public ParserRule getRule() { return rule; }

		//dependencyFrom=[Dependable] "~>" dependencyTo=[Dependable]
		public Group getGroup() { return cGroup; }

		//dependencyFrom=[Dependable]
		public Assignment getDependencyFromAssignment_0() { return cDependencyFromAssignment_0; }

		//[Dependable]
		public CrossReference getDependencyFromDependableCrossReference_0_0() { return cDependencyFromDependableCrossReference_0_0; }

		//ID
		public RuleCall getDependencyFromDependableIDTerminalRuleCall_0_0_1() { return cDependencyFromDependableIDTerminalRuleCall_0_0_1; }

		//"~>"
		public Keyword getTildeGreaterThanSignKeyword_1() { return cTildeGreaterThanSignKeyword_1; }

		//dependencyTo=[Dependable]
		public Assignment getDependencyToAssignment_2() { return cDependencyToAssignment_2; }

		//[Dependable]
		public CrossReference getDependencyToDependableCrossReference_2_0() { return cDependencyToDependableCrossReference_2_0; }

		//ID
		public RuleCall getDependencyToDependableIDTerminalRuleCall_2_0_1() { return cDependencyToDependableIDTerminalRuleCall_2_0_1; }
	}

	public class DecompositionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decomposition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndDecompositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrDecompositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Decomposition:
		//  AndDecomposition|OrDecomposition;
		public ParserRule getRule() { return rule; }

		//AndDecomposition|OrDecomposition
		public Alternatives getAlternatives() { return cAlternatives; }

		//AndDecomposition
		public RuleCall getAndDecompositionParserRuleCall_0() { return cAndDecompositionParserRuleCall_0; }

		//OrDecomposition
		public RuleCall getOrDecompositionParserRuleCall_1() { return cOrDecompositionParserRuleCall_1; }
	}

	public class AndDecompositionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndDecomposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetIntentionCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetIntentionIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetIntentionCrossReference_0_0.eContents().get(1);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceIntentionCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceIntentionIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceIntentionCrossReference_2_0.eContents().get(1);
		
		//AndDecomposition:
		//  target=[Intention] "<-(and)-" source=[Intention];
		public ParserRule getRule() { return rule; }

		//target=[Intention] "<-(and)-" source=[Intention]
		public Group getGroup() { return cGroup; }

		//target=[Intention]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[Intention]
		public CrossReference getTargetIntentionCrossReference_0_0() { return cTargetIntentionCrossReference_0_0; }

		//ID
		public RuleCall getTargetIntentionIDTerminalRuleCall_0_0_1() { return cTargetIntentionIDTerminalRuleCall_0_0_1; }

		//"<-(and)-"
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }

		//source=[Intention]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Intention]
		public CrossReference getSourceIntentionCrossReference_2_0() { return cSourceIntentionCrossReference_2_0; }

		//ID
		public RuleCall getSourceIntentionIDTerminalRuleCall_2_0_1() { return cSourceIntentionIDTerminalRuleCall_2_0_1; }
	}

	public class OrDecompositionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrDecomposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetIntentionCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetIntentionIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetIntentionCrossReference_0_0.eContents().get(1);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceIntentionCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceIntentionIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceIntentionCrossReference_2_0.eContents().get(1);
		
		//OrDecomposition:
		//  target=[Intention] "<-(or)-" source=[Intention];
		public ParserRule getRule() { return rule; }

		//target=[Intention] "<-(or)-" source=[Intention]
		public Group getGroup() { return cGroup; }

		//target=[Intention]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[Intention]
		public CrossReference getTargetIntentionCrossReference_0_0() { return cTargetIntentionCrossReference_0_0; }

		//ID
		public RuleCall getTargetIntentionIDTerminalRuleCall_0_0_1() { return cTargetIntentionIDTerminalRuleCall_0_0_1; }

		//"<-(or)-"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }

		//source=[Intention]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[Intention]
		public CrossReference getSourceIntentionCrossReference_2_0() { return cSourceIntentionCrossReference_2_0; }

		//ID
		public RuleCall getSourceIntentionIDTerminalRuleCall_2_0_1() { return cSourceIntentionIDTerminalRuleCall_2_0_1; }
	}

	public class ContributionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Contribution");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndContributionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrContributionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHelpContributionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHurtContributionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMakeContributionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBreakContributionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Contribution:
		//  AndContribution|OrContribution|HelpContribution|HurtContribution|
		//  MakeContribution|BreakContribution;
		public ParserRule getRule() { return rule; }

		//AndContribution|OrContribution|HelpContribution|HurtContribution|
		//MakeContribution|BreakContribution
		public Alternatives getAlternatives() { return cAlternatives; }

		//AndContribution
		public RuleCall getAndContributionParserRuleCall_0() { return cAndContributionParserRuleCall_0; }

		//OrContribution
		public RuleCall getOrContributionParserRuleCall_1() { return cOrContributionParserRuleCall_1; }

		//HelpContribution
		public RuleCall getHelpContributionParserRuleCall_2() { return cHelpContributionParserRuleCall_2; }

		//HurtContribution
		public RuleCall getHurtContributionParserRuleCall_3() { return cHurtContributionParserRuleCall_3; }

		//MakeContribution
		public RuleCall getMakeContributionParserRuleCall_4() { return cMakeContributionParserRuleCall_4; }

		//BreakContribution
		public RuleCall getBreakContributionParserRuleCall_5() { return cBreakContributionParserRuleCall_5; }
	}

	public class AndContributionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndContribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceIntentionCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceIntentionIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceIntentionCrossReference_0_0.eContents().get(1);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetIntentionCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetIntentionIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetIntentionCrossReference_2_0.eContents().get(1);
		
		//AndContribution:
		//  source=[Intention] "-(and)->" target=[Intention];
		public ParserRule getRule() { return rule; }

		//source=[Intention] "-(and)->" target=[Intention]
		public Group getGroup() { return cGroup; }

		//source=[Intention]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[Intention]
		public CrossReference getSourceIntentionCrossReference_0_0() { return cSourceIntentionCrossReference_0_0; }

		//ID
		public RuleCall getSourceIntentionIDTerminalRuleCall_0_0_1() { return cSourceIntentionIDTerminalRuleCall_0_0_1; }

		//"-(and)->"
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }

		//target=[Intention]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[Intention]
		public CrossReference getTargetIntentionCrossReference_2_0() { return cTargetIntentionCrossReference_2_0; }

		//ID
		public RuleCall getTargetIntentionIDTerminalRuleCall_2_0_1() { return cTargetIntentionIDTerminalRuleCall_2_0_1; }
	}

	public class OrContributionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrContribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceIntentionCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceIntentionIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceIntentionCrossReference_0_0.eContents().get(1);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetIntentionCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetIntentionIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetIntentionCrossReference_2_0.eContents().get(1);
		
		//OrContribution:
		//  source=[Intention] "-(or)->" target=[Intention];
		public ParserRule getRule() { return rule; }

		//source=[Intention] "-(or)->" target=[Intention]
		public Group getGroup() { return cGroup; }

		//source=[Intention]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[Intention]
		public CrossReference getSourceIntentionCrossReference_0_0() { return cSourceIntentionCrossReference_0_0; }

		//ID
		public RuleCall getSourceIntentionIDTerminalRuleCall_0_0_1() { return cSourceIntentionIDTerminalRuleCall_0_0_1; }

		//"-(or)->"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }

		//target=[Intention]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[Intention]
		public CrossReference getTargetIntentionCrossReference_2_0() { return cTargetIntentionCrossReference_2_0; }

		//ID
		public RuleCall getTargetIntentionIDTerminalRuleCall_2_0_1() { return cTargetIntentionIDTerminalRuleCall_2_0_1; }
	}

	public class HelpContributionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HelpContribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceIntentionCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceIntentionIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceIntentionCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusLeftParenthesisPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetIntentionCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetIntentionIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetIntentionCrossReference_2_0.eContents().get(1);
		
		//HelpContribution:
		//  source=[Intention] "-(+)->" target=[Intention];
		public ParserRule getRule() { return rule; }

		//source=[Intention] "-(+)->" target=[Intention]
		public Group getGroup() { return cGroup; }

		//source=[Intention]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[Intention]
		public CrossReference getSourceIntentionCrossReference_0_0() { return cSourceIntentionCrossReference_0_0; }

		//ID
		public RuleCall getSourceIntentionIDTerminalRuleCall_0_0_1() { return cSourceIntentionIDTerminalRuleCall_0_0_1; }

		//"-(+)->"
		public Keyword getHyphenMinusLeftParenthesisPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusLeftParenthesisPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1; }

		//target=[Intention]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[Intention]
		public CrossReference getTargetIntentionCrossReference_2_0() { return cTargetIntentionCrossReference_2_0; }

		//ID
		public RuleCall getTargetIntentionIDTerminalRuleCall_2_0_1() { return cTargetIntentionIDTerminalRuleCall_2_0_1; }
	}

	public class MakeContributionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MakeContribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceIntentionCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceIntentionIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceIntentionCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusLeftParenthesisPlusSignPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetIntentionCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetIntentionIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetIntentionCrossReference_2_0.eContents().get(1);
		
		//MakeContribution:
		//  source=[Intention] "-(++)->" target=[Intention];
		public ParserRule getRule() { return rule; }

		//source=[Intention] "-(++)->" target=[Intention]
		public Group getGroup() { return cGroup; }

		//source=[Intention]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[Intention]
		public CrossReference getSourceIntentionCrossReference_0_0() { return cSourceIntentionCrossReference_0_0; }

		//ID
		public RuleCall getSourceIntentionIDTerminalRuleCall_0_0_1() { return cSourceIntentionIDTerminalRuleCall_0_0_1; }

		//"-(++)->"
		public Keyword getHyphenMinusLeftParenthesisPlusSignPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusLeftParenthesisPlusSignPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1; }

		//target=[Intention]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[Intention]
		public CrossReference getTargetIntentionCrossReference_2_0() { return cTargetIntentionCrossReference_2_0; }

		//ID
		public RuleCall getTargetIntentionIDTerminalRuleCall_2_0_1() { return cTargetIntentionIDTerminalRuleCall_2_0_1; }
	}

	public class HurtContributionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HurtContribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceIntentionCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceIntentionIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceIntentionCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusLeftParenthesisHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetIntentionCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetIntentionIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetIntentionCrossReference_2_0.eContents().get(1);
		
		//HurtContribution:
		//  source=[Intention] "-(-)->" target=[Intention];
		public ParserRule getRule() { return rule; }

		//source=[Intention] "-(-)->" target=[Intention]
		public Group getGroup() { return cGroup; }

		//source=[Intention]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[Intention]
		public CrossReference getSourceIntentionCrossReference_0_0() { return cSourceIntentionCrossReference_0_0; }

		//ID
		public RuleCall getSourceIntentionIDTerminalRuleCall_0_0_1() { return cSourceIntentionIDTerminalRuleCall_0_0_1; }

		//"-(-)->"
		public Keyword getHyphenMinusLeftParenthesisHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusLeftParenthesisHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1; }

		//target=[Intention]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[Intention]
		public CrossReference getTargetIntentionCrossReference_2_0() { return cTargetIntentionCrossReference_2_0; }

		//ID
		public RuleCall getTargetIntentionIDTerminalRuleCall_2_0_1() { return cTargetIntentionIDTerminalRuleCall_2_0_1; }
	}

	public class BreakContributionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakContribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceIntentionCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceIntentionIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceIntentionCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusLeftParenthesisHyphenMinusHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetIntentionCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetIntentionIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetIntentionCrossReference_2_0.eContents().get(1);
		
		//BreakContribution:
		//  source=[Intention] "-(--)->" target=[Intention];
		public ParserRule getRule() { return rule; }

		//source=[Intention] "-(--)->" target=[Intention]
		public Group getGroup() { return cGroup; }

		//source=[Intention]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[Intention]
		public CrossReference getSourceIntentionCrossReference_0_0() { return cSourceIntentionCrossReference_0_0; }

		//ID
		public RuleCall getSourceIntentionIDTerminalRuleCall_0_0_1() { return cSourceIntentionIDTerminalRuleCall_0_0_1; }

		//"-(--)->"
		public Keyword getHyphenMinusLeftParenthesisHyphenMinusHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusLeftParenthesisHyphenMinusHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1; }

		//target=[Intention]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[Intention]
		public CrossReference getTargetIntentionCrossReference_2_0() { return cTargetIntentionCrossReference_2_0; }

		//ID
		public RuleCall getTargetIntentionIDTerminalRuleCall_2_0_1() { return cTargetIntentionIDTerminalRuleCall_2_0_1; }
	}
	
	
	private ModelElements pModel;
	private ContainerElements pContainer;
	private ActorElements pActor;
	private AgentElements pAgent;
	private RoleElements pRole;
	private PositionElements pPosition;
	private IntentionElements pIntention;
	private GoalElements pGoal;
	private SoftgoalElements pSoftgoal;
	private TaskElements pTask;
	private ResourceElements pResource;
	private BeliefElements pBelief;
	private LinkElements pLink;
	private DependableElements pDependable;
	private AssociationElements pAssociation;
	private DependencyElements pDependency;
	private DecompositionElements pDecomposition;
	private AndDecompositionElements pAndDecomposition;
	private OrDecompositionElements pOrDecomposition;
	private ContributionElements pContribution;
	private AndContributionElements pAndContribution;
	private OrContributionElements pOrContribution;
	private HelpContributionElements pHelpContribution;
	private MakeContributionElements pMakeContribution;
	private HurtContributionElements pHurtContribution;
	private BreakContributionElements pBreakContribution;
	private TerminalRule tID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public IstarGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//  "istar" name=ID? ":" (containers+=Container|intentions+=Intention|decompositions+=
	//  Decomposition|dependencies+=Dependency|contributions+=Contribution|associations
	//  +=Association)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Container:
	//  Actor|Agent|Role|Position;
	public ContainerElements getContainerAccess() {
		return (pContainer != null) ? pContainer : (pContainer = new ContainerElements());
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}

	//Actor:
	//  "actor" name=ID (is_a+=[Actor]|is_part_of+=[Actor])* ("{" intentions+=Intention* "}")
	//  ?;
	public ActorElements getActorAccess() {
		return (pActor != null) ? pActor : (pActor = new ActorElements());
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//Agent:
	//  "agent" name=ID ("{" intentions+=Intention* "}")?;
	public AgentElements getAgentAccess() {
		return (pAgent != null) ? pAgent : (pAgent = new AgentElements());
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}

	//Role:
	//  "role" name=ID ("{" intentions+=Intention* "}")?;
	public RoleElements getRoleAccess() {
		return (pRole != null) ? pRole : (pRole = new RoleElements());
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//Position:
	//  "position" name=ID ("{" intentions+=Intention* "}")?;
	public PositionElements getPositionAccess() {
		return (pPosition != null) ? pPosition : (pPosition = new PositionElements());
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}

	//Intention:
	//  Goal|Softgoal|Task|Resource|Belief;
	public IntentionElements getIntentionAccess() {
		return (pIntention != null) ? pIntention : (pIntention = new IntentionElements());
	}
	
	public ParserRule getIntentionRule() {
		return getIntentionAccess().getRule();
	}

	//Goal:
	//  "goal" name=ID ("{" decompositions+=[Decomposition]* "}")?;
	public GoalElements getGoalAccess() {
		return (pGoal != null) ? pGoal : (pGoal = new GoalElements());
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	//Softgoal:
	//  "soft" name=ID;
	public SoftgoalElements getSoftgoalAccess() {
		return (pSoftgoal != null) ? pSoftgoal : (pSoftgoal = new SoftgoalElements());
	}
	
	public ParserRule getSoftgoalRule() {
		return getSoftgoalAccess().getRule();
	}

	//Task:
	//  "task" name=ID;
	public TaskElements getTaskAccess() {
		return (pTask != null) ? pTask : (pTask = new TaskElements());
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}

	//Resource:
	//  "resource" name=ID;
	public ResourceElements getResourceAccess() {
		return (pResource != null) ? pResource : (pResource = new ResourceElements());
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}

	//Belief:
	//  "belief" name=ID;
	public BeliefElements getBeliefAccess() {
		return (pBelief != null) ? pBelief : (pBelief = new BeliefElements());
	}
	
	public ParserRule getBeliefRule() {
		return getBeliefAccess().getRule();
	}

	//Link:
	//  Association|Dependency|Decomposition|Contribution;
	public LinkElements getLinkAccess() {
		return (pLink != null) ? pLink : (pLink = new LinkElements());
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//Dependable:
	//  Intention|Container;
	public DependableElements getDependableAccess() {
		return (pDependable != null) ? pDependable : (pDependable = new DependableElements());
	}
	
	public ParserRule getDependableRule() {
		return getDependableAccess().getRule();
	}

	//Association:
	//  source=[Container] "~~>" target=[Container];
	public AssociationElements getAssociationAccess() {
		return (pAssociation != null) ? pAssociation : (pAssociation = new AssociationElements());
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}

	//Dependency:
	//  dependencyFrom=[Dependable] "~>" dependencyTo=[Dependable];
	public DependencyElements getDependencyAccess() {
		return (pDependency != null) ? pDependency : (pDependency = new DependencyElements());
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}

	//Decomposition:
	//  AndDecomposition|OrDecomposition;
	public DecompositionElements getDecompositionAccess() {
		return (pDecomposition != null) ? pDecomposition : (pDecomposition = new DecompositionElements());
	}
	
	public ParserRule getDecompositionRule() {
		return getDecompositionAccess().getRule();
	}

	//AndDecomposition:
	//  target=[Intention] "<-(and)-" source=[Intention];
	public AndDecompositionElements getAndDecompositionAccess() {
		return (pAndDecomposition != null) ? pAndDecomposition : (pAndDecomposition = new AndDecompositionElements());
	}
	
	public ParserRule getAndDecompositionRule() {
		return getAndDecompositionAccess().getRule();
	}

	//OrDecomposition:
	//  target=[Intention] "<-(or)-" source=[Intention];
	public OrDecompositionElements getOrDecompositionAccess() {
		return (pOrDecomposition != null) ? pOrDecomposition : (pOrDecomposition = new OrDecompositionElements());
	}
	
	public ParserRule getOrDecompositionRule() {
		return getOrDecompositionAccess().getRule();
	}

	//Contribution:
	//  AndContribution|OrContribution|HelpContribution|HurtContribution|
	//  MakeContribution|BreakContribution;
	public ContributionElements getContributionAccess() {
		return (pContribution != null) ? pContribution : (pContribution = new ContributionElements());
	}
	
	public ParserRule getContributionRule() {
		return getContributionAccess().getRule();
	}

	//AndContribution:
	//  source=[Intention] "-(and)->" target=[Intention];
	public AndContributionElements getAndContributionAccess() {
		return (pAndContribution != null) ? pAndContribution : (pAndContribution = new AndContributionElements());
	}
	
	public ParserRule getAndContributionRule() {
		return getAndContributionAccess().getRule();
	}

	//OrContribution:
	//  source=[Intention] "-(or)->" target=[Intention];
	public OrContributionElements getOrContributionAccess() {
		return (pOrContribution != null) ? pOrContribution : (pOrContribution = new OrContributionElements());
	}
	
	public ParserRule getOrContributionRule() {
		return getOrContributionAccess().getRule();
	}

	//HelpContribution:
	//  source=[Intention] "-(+)->" target=[Intention];
	public HelpContributionElements getHelpContributionAccess() {
		return (pHelpContribution != null) ? pHelpContribution : (pHelpContribution = new HelpContributionElements());
	}
	
	public ParserRule getHelpContributionRule() {
		return getHelpContributionAccess().getRule();
	}

	//MakeContribution:
	//  source=[Intention] "-(++)->" target=[Intention];
	public MakeContributionElements getMakeContributionAccess() {
		return (pMakeContribution != null) ? pMakeContribution : (pMakeContribution = new MakeContributionElements());
	}
	
	public ParserRule getMakeContributionRule() {
		return getMakeContributionAccess().getRule();
	}

	//HurtContribution:
	//  source=[Intention] "-(-)->" target=[Intention];
	public HurtContributionElements getHurtContributionAccess() {
		return (pHurtContribution != null) ? pHurtContribution : (pHurtContribution = new HurtContributionElements());
	}
	
	public ParserRule getHurtContributionRule() {
		return getHurtContributionAccess().getRule();
	}

	//BreakContribution:
	//  source=[Intention] "-(--)->" target=[Intention];
	public BreakContributionElements getBreakContributionAccess() {
		return (pBreakContribution != null) ? pBreakContribution : (pBreakContribution = new BreakContributionElements());
	}
	
	public ParserRule getBreakContributionRule() {
		return getBreakContributionAccess().getRule();
	}

	//terminal ID:
	//  "#" !"#"+ "#" | "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
