/*
* generated by Xtext
*/
grammar InternalIstar;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package uk.ac.open.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.open.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import uk.ac.open.services.IstarGrammarAccess;

}

@parser::members {
 
 	private IstarGrammarAccess grammarAccess;
 	
    public InternalIstarParser(TokenStream input, IAstFactory factory, IstarGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("uk/ac/open/parser/antlr/internal/InternalIstar.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('istar' 
    {
        createLeafNode(grammarAccess.getModelAccess().getIstarKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?':' 
    {
        createLeafNode(grammarAccess.getModelAccess().getColonKeyword_2(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getContainersContainerParserRuleCall_3_0_0(), currentNode); 
	    }
	    lv_containers_3=ruleContainer 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "containers", lv_containers_3, "Container", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getIntentionsIntentionParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_intentions_4=ruleIntention 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intentions", lv_intentions_4, "Intention", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getDecompositionsDecompositionParserRuleCall_3_2_0(), currentNode); 
	    }
	    lv_decompositions_5=ruleDecomposition 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "decompositions", lv_decompositions_5, "Decomposition", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getDependenciesDependencyParserRuleCall_3_3_0(), currentNode); 
	    }
	    lv_dependencies_6=ruleDependency 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "dependencies", lv_dependencies_6, "Dependency", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getContributionsContributionParserRuleCall_3_4_0(), currentNode); 
	    }
	    lv_contributions_7=ruleContribution 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "contributions", lv_contributions_7, "Contribution", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getAssociationsAssociationParserRuleCall_3_5_0(), currentNode); 
	    }
	    lv_associations_8=ruleAssociation 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "associations", lv_associations_8, "Association", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleContainer
entryRuleContainer returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getContainerRule(), currentNode); }
	 iv_ruleContainer=ruleContainer 
	 { $current=$iv_ruleContainer.current; } 
	 EOF 
;

// Rule Container
ruleContainer returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getContainerAccess().getActorParserRuleCall_0(), currentNode); 
    }
    this_Actor_0=ruleActor
    { 
        $current = $this_Actor_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContainerAccess().getAgentParserRuleCall_1(), currentNode); 
    }
    this_Agent_1=ruleAgent
    { 
        $current = $this_Agent_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContainerAccess().getRoleParserRuleCall_2(), currentNode); 
    }
    this_Role_2=ruleRole
    { 
        $current = $this_Role_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContainerAccess().getPositionParserRuleCall_3(), currentNode); 
    }
    this_Position_3=rulePosition
    { 
        $current = $this_Position_3.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getActorRule(), currentNode); }
	 iv_ruleActor=ruleActor 
	 { $current=$iv_ruleActor.current; } 
	 EOF 
;

// Rule Actor
ruleActor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('actor' 
    {
        createLeafNode(grammarAccess.getActorAccess().getActorKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getActorAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getActorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getActorAccess().getIs_aActorCrossReference_2_0_0(), "is_a"); 
	}

		// TODO assign feature to currentNode
	
)
    |(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getActorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getActorAccess().getIs_part_ofActorCrossReference_2_1_0(), "is_part_of"); 
	}

		// TODO assign feature to currentNode
	
))*('{' 
    {
        createLeafNode(grammarAccess.getActorAccess().getLeftCurlyBracketKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActorAccess().getIntentionsIntentionParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_intentions_5=ruleIntention 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intentions", lv_intentions_5, "Intention", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getActorAccess().getRightCurlyBracketKeyword_3_2(), null); 
    }
)?);





// Entry rule entryRuleAgent
entryRuleAgent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAgentRule(), currentNode); }
	 iv_ruleAgent=ruleAgent 
	 { $current=$iv_ruleAgent.current; } 
	 EOF 
;

// Rule Agent
ruleAgent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('agent' 
    {
        createLeafNode(grammarAccess.getAgentAccess().getAgentKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getAgentAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAgentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('{' 
    {
        createLeafNode(grammarAccess.getAgentAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAgentAccess().getIntentionsIntentionParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_intentions_3=ruleIntention 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAgentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intentions", lv_intentions_3, "Intention", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getAgentAccess().getRightCurlyBracketKeyword_2_2(), null); 
    }
)?);





// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRoleRule(), currentNode); }
	 iv_ruleRole=ruleRole 
	 { $current=$iv_ruleRole.current; } 
	 EOF 
;

// Rule Role
ruleRole returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('role' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getRoleKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getRoleAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('{' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRoleAccess().getIntentionsIntentionParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_intentions_3=ruleIntention 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intentions", lv_intentions_3, "Intention", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getRoleAccess().getRightCurlyBracketKeyword_2_2(), null); 
    }
)?);





// Entry rule entryRulePosition
entryRulePosition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPositionRule(), currentNode); }
	 iv_rulePosition=rulePosition 
	 { $current=$iv_rulePosition.current; } 
	 EOF 
;

// Rule Position
rulePosition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('position' 
    {
        createLeafNode(grammarAccess.getPositionAccess().getPositionKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getPositionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('{' 
    {
        createLeafNode(grammarAccess.getPositionAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPositionAccess().getIntentionsIntentionParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_intentions_3=ruleIntention 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "intentions", lv_intentions_3, "Intention", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getPositionAccess().getRightCurlyBracketKeyword_2_2(), null); 
    }
)?);





// Entry rule entryRuleIntention
entryRuleIntention returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntentionRule(), currentNode); }
	 iv_ruleIntention=ruleIntention 
	 { $current=$iv_ruleIntention.current; } 
	 EOF 
;

// Rule Intention
ruleIntention returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getIntentionAccess().getGoalParserRuleCall_0(), currentNode); 
    }
    this_Goal_0=ruleGoal
    { 
        $current = $this_Goal_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIntentionAccess().getSoftgoalParserRuleCall_1(), currentNode); 
    }
    this_Softgoal_1=ruleSoftgoal
    { 
        $current = $this_Softgoal_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIntentionAccess().getTaskParserRuleCall_2(), currentNode); 
    }
    this_Task_2=ruleTask
    { 
        $current = $this_Task_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIntentionAccess().getResourceParserRuleCall_3(), currentNode); 
    }
    this_Resource_3=ruleResource
    { 
        $current = $this_Resource_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIntentionAccess().getBeliefParserRuleCall_4(), currentNode); 
    }
    this_Belief_4=ruleBelief
    { 
        $current = $this_Belief_4.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleGoal
entryRuleGoal returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getGoalRule(), currentNode); }
	 iv_ruleGoal=ruleGoal 
	 { $current=$iv_ruleGoal.current; } 
	 EOF 
;

// Rule Goal
ruleGoal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('goal' 
    {
        createLeafNode(grammarAccess.getGoalAccess().getGoalKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getGoalAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGoalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('{' 
    {
        createLeafNode(grammarAccess.getGoalAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getGoalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getGoalAccess().getDecompositionsDecompositionCrossReference_2_1_0(), "decompositions"); 
	}

		// TODO assign feature to currentNode
	
)*'}' 
    {
        createLeafNode(grammarAccess.getGoalAccess().getRightCurlyBracketKeyword_2_2(), null); 
    }
)?);





// Entry rule entryRuleSoftgoal
entryRuleSoftgoal returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSoftgoalRule(), currentNode); }
	 iv_ruleSoftgoal=ruleSoftgoal 
	 { $current=$iv_ruleSoftgoal.current; } 
	 EOF 
;

// Rule Softgoal
ruleSoftgoal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('soft' 
    {
        createLeafNode(grammarAccess.getSoftgoalAccess().getSoftKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getSoftgoalAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSoftgoalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTaskRule(), currentNode); }
	 iv_ruleTask=ruleTask 
	 { $current=$iv_ruleTask.current; } 
	 EOF 
;

// Rule Task
ruleTask returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('task' 
    {
        createLeafNode(grammarAccess.getTaskAccess().getTaskKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTaskRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getResourceRule(), currentNode); }
	 iv_ruleResource=ruleResource 
	 { $current=$iv_ruleResource.current; } 
	 EOF 
;

// Rule Resource
ruleResource returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('resource' 
    {
        createLeafNode(grammarAccess.getResourceAccess().getResourceKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getResourceAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResourceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleBelief
entryRuleBelief returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBeliefRule(), currentNode); }
	 iv_ruleBelief=ruleBelief 
	 { $current=$iv_ruleBelief.current; } 
	 EOF 
;

// Rule Belief
ruleBelief returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('belief' 
    {
        createLeafNode(grammarAccess.getBeliefAccess().getBeliefKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getBeliefAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBeliefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));









// Entry rule entryRuleAssociation
entryRuleAssociation returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssociationRule(), currentNode); }
	 iv_ruleAssociation=ruleAssociation 
	 { $current=$iv_ruleAssociation.current; } 
	 EOF 
;

// Rule Association
ruleAssociation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getSourceContainerCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'~~>' 
    {
        createLeafNode(grammarAccess.getAssociationAccess().getTildeTildeGreaterThanSignKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationAccess().getTargetContainerCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDependencyRule(), currentNode); }
	 iv_ruleDependency=ruleDependency 
	 { $current=$iv_ruleDependency.current; } 
	 EOF 
;

// Rule Dependency
ruleDependency returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDependencyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDependencyAccess().getDependencyFromDependableCrossReference_0_0(), "dependencyFrom"); 
	}

		// TODO assign feature to currentNode
	
)'~>' 
    {
        createLeafNode(grammarAccess.getDependencyAccess().getTildeGreaterThanSignKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDependencyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDependencyAccess().getDependencyToDependableCrossReference_2_0(), "dependencyTo"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleDecomposition
entryRuleDecomposition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDecompositionRule(), currentNode); }
	 iv_ruleDecomposition=ruleDecomposition 
	 { $current=$iv_ruleDecomposition.current; } 
	 EOF 
;

// Rule Decomposition
ruleDecomposition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDecompositionAccess().getAndDecompositionParserRuleCall_0(), currentNode); 
    }
    this_AndDecomposition_0=ruleAndDecomposition
    { 
        $current = $this_AndDecomposition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDecompositionAccess().getOrDecompositionParserRuleCall_1(), currentNode); 
    }
    this_OrDecomposition_1=ruleOrDecomposition
    { 
        $current = $this_OrDecomposition_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleAndDecomposition
entryRuleAndDecomposition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAndDecompositionRule(), currentNode); }
	 iv_ruleAndDecomposition=ruleAndDecomposition 
	 { $current=$iv_ruleAndDecomposition.current; } 
	 EOF 
;

// Rule AndDecomposition
ruleAndDecomposition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAndDecompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAndDecompositionAccess().getTargetIntentionCrossReference_0_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
)'<-(and)-' 
    {
        createLeafNode(grammarAccess.getAndDecompositionAccess().getAndKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAndDecompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAndDecompositionAccess().getSourceIntentionCrossReference_2_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleOrDecomposition
entryRuleOrDecomposition returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOrDecompositionRule(), currentNode); }
	 iv_ruleOrDecomposition=ruleOrDecomposition 
	 { $current=$iv_ruleOrDecomposition.current; } 
	 EOF 
;

// Rule OrDecomposition
ruleOrDecomposition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOrDecompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOrDecompositionAccess().getTargetIntentionCrossReference_0_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
)'<-(or)-' 
    {
        createLeafNode(grammarAccess.getOrDecompositionAccess().getOrKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOrDecompositionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOrDecompositionAccess().getSourceIntentionCrossReference_2_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleContribution
entryRuleContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getContributionRule(), currentNode); }
	 iv_ruleContribution=ruleContribution 
	 { $current=$iv_ruleContribution.current; } 
	 EOF 
;

// Rule Contribution
ruleContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getContributionAccess().getAndContributionParserRuleCall_0(), currentNode); 
    }
    this_AndContribution_0=ruleAndContribution
    { 
        $current = $this_AndContribution_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContributionAccess().getOrContributionParserRuleCall_1(), currentNode); 
    }
    this_OrContribution_1=ruleOrContribution
    { 
        $current = $this_OrContribution_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContributionAccess().getHelpContributionParserRuleCall_2(), currentNode); 
    }
    this_HelpContribution_2=ruleHelpContribution
    { 
        $current = $this_HelpContribution_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContributionAccess().getHurtContributionParserRuleCall_3(), currentNode); 
    }
    this_HurtContribution_3=ruleHurtContribution
    { 
        $current = $this_HurtContribution_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContributionAccess().getMakeContributionParserRuleCall_4(), currentNode); 
    }
    this_MakeContribution_4=ruleMakeContribution
    { 
        $current = $this_MakeContribution_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getContributionAccess().getBreakContributionParserRuleCall_5(), currentNode); 
    }
    this_BreakContribution_5=ruleBreakContribution
    { 
        $current = $this_BreakContribution_5.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleAndContribution
entryRuleAndContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAndContributionRule(), currentNode); }
	 iv_ruleAndContribution=ruleAndContribution 
	 { $current=$iv_ruleAndContribution.current; } 
	 EOF 
;

// Rule AndContribution
ruleAndContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAndContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAndContributionAccess().getSourceIntentionCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'-(and)->' 
    {
        createLeafNode(grammarAccess.getAndContributionAccess().getAndKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAndContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAndContributionAccess().getTargetIntentionCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleOrContribution
entryRuleOrContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOrContributionRule(), currentNode); }
	 iv_ruleOrContribution=ruleOrContribution 
	 { $current=$iv_ruleOrContribution.current; } 
	 EOF 
;

// Rule OrContribution
ruleOrContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOrContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOrContributionAccess().getSourceIntentionCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'-(or)->' 
    {
        createLeafNode(grammarAccess.getOrContributionAccess().getOrKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOrContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOrContributionAccess().getTargetIntentionCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleHelpContribution
entryRuleHelpContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getHelpContributionRule(), currentNode); }
	 iv_ruleHelpContribution=ruleHelpContribution 
	 { $current=$iv_ruleHelpContribution.current; } 
	 EOF 
;

// Rule HelpContribution
ruleHelpContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getHelpContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getHelpContributionAccess().getSourceIntentionCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'-(+)->' 
    {
        createLeafNode(grammarAccess.getHelpContributionAccess().getHyphenMinusLeftParenthesisPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getHelpContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getHelpContributionAccess().getTargetIntentionCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleMakeContribution
entryRuleMakeContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMakeContributionRule(), currentNode); }
	 iv_ruleMakeContribution=ruleMakeContribution 
	 { $current=$iv_ruleMakeContribution.current; } 
	 EOF 
;

// Rule MakeContribution
ruleMakeContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getMakeContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getMakeContributionAccess().getSourceIntentionCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'-(++)->' 
    {
        createLeafNode(grammarAccess.getMakeContributionAccess().getHyphenMinusLeftParenthesisPlusSignPlusSignRightParenthesisHyphenMinusGreaterThanSignKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getMakeContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getMakeContributionAccess().getTargetIntentionCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleHurtContribution
entryRuleHurtContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getHurtContributionRule(), currentNode); }
	 iv_ruleHurtContribution=ruleHurtContribution 
	 { $current=$iv_ruleHurtContribution.current; } 
	 EOF 
;

// Rule HurtContribution
ruleHurtContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getHurtContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getHurtContributionAccess().getSourceIntentionCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'-(-)->' 
    {
        createLeafNode(grammarAccess.getHurtContributionAccess().getHyphenMinusLeftParenthesisHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getHurtContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getHurtContributionAccess().getTargetIntentionCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleBreakContribution
entryRuleBreakContribution returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBreakContributionRule(), currentNode); }
	 iv_ruleBreakContribution=ruleBreakContribution 
	 { $current=$iv_ruleBreakContribution.current; } 
	 EOF 
;

// Rule BreakContribution
ruleBreakContribution returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getBreakContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getBreakContributionAccess().getSourceIntentionCrossReference_0_0(), "source"); 
	}

		// TODO assign feature to currentNode
	
)'-(--)->' 
    {
        createLeafNode(grammarAccess.getBreakContributionAccess().getHyphenMinusLeftParenthesisHyphenMinusHyphenMinusRightParenthesisHyphenMinusGreaterThanSignKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getBreakContributionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getBreakContributionAccess().getTargetIntentionCrossReference_2_0(), "target"); 
	}

		// TODO assign feature to currentNode
	
));





RULE_ID : ('#' ~('#')+ '#'|'^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*);

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


