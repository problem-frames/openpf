/*
* generated by Xtext
*/
package uk.ac.open.istar.parser.packrat;

import org.eclipse.xtext.parser.packrat.AbstractParserConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;

import uk.ac.open.istar.services.IstarGrammarAccess;

import org.eclipse.xtext.common.parser.packrat.TerminalsParserConfiguration; 
import uk.ac.open.istar.parser.packrat.consumers.IstarModelConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarContainerConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarActorConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarAgentConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarRoleConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarPositionConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarIntentionConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarGoalConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarSoftgoalConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarTaskConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarResourceConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarBeliefConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarLinkConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarDependableConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarAssociationConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarDependencyConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarDecompositionConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarAndDecompositionConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarOrDecompositionConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarContributionConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarAndContributionConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarOrContributionConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarHelpContributionConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarMakeContributionConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarHurtContributionConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarBreakContributionConsumer;
import uk.ac.open.istar.parser.packrat.consumers.IstarIDConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsINTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSTRINGConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsML_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsSL_COMMENTConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsWSConsumer;
import org.eclipse.xtext.common.parser.packrat.consumers.TerminalsANY_OTHERConsumer;

public class IstarParserConfiguration extends AbstractParserConfiguration {

	private final TerminalsParserConfiguration terminalsConfiguration; 
    private IstarModelConsumer modelConsumer;
    private IstarContainerConsumer containerConsumer;
    private IstarActorConsumer actorConsumer;
    private IstarAgentConsumer agentConsumer;
    private IstarRoleConsumer roleConsumer;
    private IstarPositionConsumer positionConsumer;
    private IstarIntentionConsumer intentionConsumer;
    private IstarGoalConsumer goalConsumer;
    private IstarSoftgoalConsumer softgoalConsumer;
    private IstarTaskConsumer taskConsumer;
    private IstarResourceConsumer resourceConsumer;
    private IstarBeliefConsumer beliefConsumer;
    private IstarLinkConsumer linkConsumer;
    private IstarDependableConsumer dependableConsumer;
    private IstarAssociationConsumer associationConsumer;
    private IstarDependencyConsumer dependencyConsumer;
    private IstarDecompositionConsumer decompositionConsumer;
    private IstarAndDecompositionConsumer andDecompositionConsumer;
    private IstarOrDecompositionConsumer orDecompositionConsumer;
    private IstarContributionConsumer contributionConsumer;
    private IstarAndContributionConsumer andContributionConsumer;
    private IstarOrContributionConsumer orContributionConsumer;
    private IstarHelpContributionConsumer helpContributionConsumer;
    private IstarMakeContributionConsumer makeContributionConsumer;
    private IstarHurtContributionConsumer hurtContributionConsumer;
    private IstarBreakContributionConsumer breakContributionConsumer;
    private IstarIDConsumer idConsumer;

	private IstarGrammarAccess grammarAccess;

	public IstarParserConfiguration(IInternalParserConfiguration configuration, IstarGrammarAccess grammarAccess) {
		super(configuration);
		this.grammarAccess = grammarAccess;
		this.terminalsConfiguration = new TerminalsParserConfiguration(configuration, null);
	}

	public IstarModelConsumer getRootConsumer() {
		return modelConsumer;
	} 

	public void createNonTerminalConsumers() {
		getTerminalsConfiguration().createNonTerminalConsumers();
		modelConsumer = new IstarModelConsumer(
    		this, null
    	);
		containerConsumer = new IstarContainerConsumer(
    		this, null
    	);
		actorConsumer = new IstarActorConsumer(
    		this, null
    	);
		agentConsumer = new IstarAgentConsumer(
    		this, null
    	);
		roleConsumer = new IstarRoleConsumer(
    		this, null
    	);
		positionConsumer = new IstarPositionConsumer(
    		this, null
    	);
		intentionConsumer = new IstarIntentionConsumer(
    		this, null
    	);
		goalConsumer = new IstarGoalConsumer(
    		this, null
    	);
		softgoalConsumer = new IstarSoftgoalConsumer(
    		this, null
    	);
		taskConsumer = new IstarTaskConsumer(
    		this, null
    	);
		resourceConsumer = new IstarResourceConsumer(
    		this, null
    	);
		beliefConsumer = new IstarBeliefConsumer(
    		this, null
    	);
		linkConsumer = new IstarLinkConsumer(
    		this, null
    	);
		dependableConsumer = new IstarDependableConsumer(
    		this, null
    	);
		associationConsumer = new IstarAssociationConsumer(
    		this, null
    	);
		dependencyConsumer = new IstarDependencyConsumer(
    		this, null
    	);
		decompositionConsumer = new IstarDecompositionConsumer(
    		this, null
    	);
		andDecompositionConsumer = new IstarAndDecompositionConsumer(
    		this, null
    	);
		orDecompositionConsumer = new IstarOrDecompositionConsumer(
    		this, null
    	);
		contributionConsumer = new IstarContributionConsumer(
    		this, null
    	);
		andContributionConsumer = new IstarAndContributionConsumer(
    		this, null
    	);
		orContributionConsumer = new IstarOrContributionConsumer(
    		this, null
    	);
		helpContributionConsumer = new IstarHelpContributionConsumer(
    		this, null
    	);
		makeContributionConsumer = new IstarMakeContributionConsumer(
    		this, null
    	);
		hurtContributionConsumer = new IstarHurtContributionConsumer(
    		this, null
    	);
		breakContributionConsumer = new IstarBreakContributionConsumer(
    		this, null
    	);
	}
	
	public void createTerminalConsumers() {
		getTerminalsConfiguration().createTerminalConsumers();
		idConsumer = new IstarIDConsumer(this);
	}
	
	public void configureConsumers() {
		if (grammarAccess == null)
			throw new NullPointerException("grammarAccess may not be null, you call configureConsumers");
		getModelConsumer().setRule(grammarAccess.getModelAccess());
		getContainerConsumer().setRule(grammarAccess.getContainerAccess());
		getActorConsumer().setRule(grammarAccess.getActorAccess());
		getAgentConsumer().setRule(grammarAccess.getAgentAccess());
		getRoleConsumer().setRule(grammarAccess.getRoleAccess());
		getPositionConsumer().setRule(grammarAccess.getPositionAccess());
		getIntentionConsumer().setRule(grammarAccess.getIntentionAccess());
		getGoalConsumer().setRule(grammarAccess.getGoalAccess());
		getSoftgoalConsumer().setRule(grammarAccess.getSoftgoalAccess());
		getTaskConsumer().setRule(grammarAccess.getTaskAccess());
		getResourceConsumer().setRule(grammarAccess.getResourceAccess());
		getBeliefConsumer().setRule(grammarAccess.getBeliefAccess());
		getLinkConsumer().setRule(grammarAccess.getLinkAccess());
		getDependableConsumer().setRule(grammarAccess.getDependableAccess());
		getAssociationConsumer().setRule(grammarAccess.getAssociationAccess());
		getDependencyConsumer().setRule(grammarAccess.getDependencyAccess());
		getDecompositionConsumer().setRule(grammarAccess.getDecompositionAccess());
		getAndDecompositionConsumer().setRule(grammarAccess.getAndDecompositionAccess());
		getOrDecompositionConsumer().setRule(grammarAccess.getOrDecompositionAccess());
		getContributionConsumer().setRule(grammarAccess.getContributionAccess());
		getAndContributionConsumer().setRule(grammarAccess.getAndContributionAccess());
		getOrContributionConsumer().setRule(grammarAccess.getOrContributionAccess());
		getHelpContributionConsumer().setRule(grammarAccess.getHelpContributionAccess());
		getMakeContributionConsumer().setRule(grammarAccess.getMakeContributionAccess());
		getHurtContributionConsumer().setRule(grammarAccess.getHurtContributionAccess());
		getBreakContributionConsumer().setRule(grammarAccess.getBreakContributionAccess());
		getIdConsumer().setRule(grammarAccess.getIDRule());
		getIntConsumer().setRule(grammarAccess.getINTRule());
		getStringConsumer().setRule(grammarAccess.getSTRINGRule());
		getMlCommentConsumer().setRule(grammarAccess.getML_COMMENTRule());
		getSlCommentConsumer().setRule(grammarAccess.getSL_COMMENTRule());
		getWsConsumer().setRule(grammarAccess.getWSRule());
		getAnyOtherConsumer().setRule(grammarAccess.getANY_OTHERRule());


		getModelConsumer().setAssociationConsumer(getAssociationConsumer());
		getModelConsumer().setContainerConsumer(getContainerConsumer());
		getModelConsumer().setContributionConsumer(getContributionConsumer());
		getModelConsumer().setDecompositionConsumer(getDecompositionConsumer());
		getModelConsumer().setDependencyConsumer(getDependencyConsumer());
		getModelConsumer().setIdConsumer(getIdConsumer());
		getModelConsumer().setIntentionConsumer(getIntentionConsumer());

		getContainerConsumer().setActorConsumer(getActorConsumer());
		getContainerConsumer().setAgentConsumer(getAgentConsumer());
		getContainerConsumer().setPositionConsumer(getPositionConsumer());
		getContainerConsumer().setRoleConsumer(getRoleConsumer());

		getActorConsumer().setIdConsumer(getIdConsumer());
		getActorConsumer().setIntentionConsumer(getIntentionConsumer());

		getAgentConsumer().setIdConsumer(getIdConsumer());
		getAgentConsumer().setIntentionConsumer(getIntentionConsumer());

		getRoleConsumer().setIdConsumer(getIdConsumer());
		getRoleConsumer().setIntentionConsumer(getIntentionConsumer());

		getPositionConsumer().setIdConsumer(getIdConsumer());
		getPositionConsumer().setIntentionConsumer(getIntentionConsumer());

		getIntentionConsumer().setBeliefConsumer(getBeliefConsumer());
		getIntentionConsumer().setGoalConsumer(getGoalConsumer());
		getIntentionConsumer().setResourceConsumer(getResourceConsumer());
		getIntentionConsumer().setSoftgoalConsumer(getSoftgoalConsumer());
		getIntentionConsumer().setTaskConsumer(getTaskConsumer());

		getGoalConsumer().setIdConsumer(getIdConsumer());

		getSoftgoalConsumer().setIdConsumer(getIdConsumer());

		getTaskConsumer().setIdConsumer(getIdConsumer());

		getResourceConsumer().setIdConsumer(getIdConsumer());

		getBeliefConsumer().setIdConsumer(getIdConsumer());

		getLinkConsumer().setAssociationConsumer(getAssociationConsumer());
		getLinkConsumer().setContributionConsumer(getContributionConsumer());
		getLinkConsumer().setDecompositionConsumer(getDecompositionConsumer());
		getLinkConsumer().setDependencyConsumer(getDependencyConsumer());

		getDependableConsumer().setContainerConsumer(getContainerConsumer());
		getDependableConsumer().setIntentionConsumer(getIntentionConsumer());

		getAssociationConsumer().setIdConsumer(getIdConsumer());

		getDependencyConsumer().setIdConsumer(getIdConsumer());

		getDecompositionConsumer().setAndDecompositionConsumer(getAndDecompositionConsumer());
		getDecompositionConsumer().setOrDecompositionConsumer(getOrDecompositionConsumer());

		getAndDecompositionConsumer().setIdConsumer(getIdConsumer());

		getOrDecompositionConsumer().setIdConsumer(getIdConsumer());

		getContributionConsumer().setAndContributionConsumer(getAndContributionConsumer());
		getContributionConsumer().setBreakContributionConsumer(getBreakContributionConsumer());
		getContributionConsumer().setHelpContributionConsumer(getHelpContributionConsumer());
		getContributionConsumer().setHurtContributionConsumer(getHurtContributionConsumer());
		getContributionConsumer().setMakeContributionConsumer(getMakeContributionConsumer());
		getContributionConsumer().setOrContributionConsumer(getOrContributionConsumer());

		getAndContributionConsumer().setIdConsumer(getIdConsumer());

		getOrContributionConsumer().setIdConsumer(getIdConsumer());

		getHelpContributionConsumer().setIdConsumer(getIdConsumer());

		getMakeContributionConsumer().setIdConsumer(getIdConsumer());

		getHurtContributionConsumer().setIdConsumer(getIdConsumer());

		getBreakContributionConsumer().setIdConsumer(getIdConsumer());

		getModelConsumer().setKeyword$2$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$4$Delimiter);
		getModelConsumer().setKeyword$5$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getModelConsumer().setRuleCall$4$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getActorConsumer().setKeyword$2$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$4$Delimiter);
		getActorConsumer().setKeyword$15$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getActorConsumer().setKeyword$18$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getActorConsumer().setRuleCall$4$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getActorConsumer().setRuleCall$9$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getActorConsumer().setRuleCall$13$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getAgentConsumer().setKeyword$2$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$4$Delimiter);
		getAgentConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getAgentConsumer().setKeyword$9$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getAgentConsumer().setRuleCall$4$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getRoleConsumer().setKeyword$2$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$4$Delimiter);
		getRoleConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getRoleConsumer().setKeyword$9$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getRoleConsumer().setRuleCall$4$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getPositionConsumer().setKeyword$2$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$4$Delimiter);
		getPositionConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getPositionConsumer().setKeyword$9$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getPositionConsumer().setRuleCall$4$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getGoalConsumer().setKeyword$11$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getGoalConsumer().setKeyword$2$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$4$Delimiter);
		getGoalConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getGoalConsumer().setRuleCall$10$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getGoalConsumer().setRuleCall$4$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getSoftgoalConsumer().setKeyword$2$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$4$Delimiter);
		getSoftgoalConsumer().setRuleCall$4$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getTaskConsumer().setKeyword$2$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$4$Delimiter);
		getTaskConsumer().setRuleCall$4$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getResourceConsumer().setKeyword$2$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$4$Delimiter);
		getResourceConsumer().setRuleCall$4$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getBeliefConsumer().setKeyword$2$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$4$Delimiter);
		getBeliefConsumer().setRuleCall$4$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getAssociationConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getAssociationConsumer().setRuleCall$5$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getAssociationConsumer().setRuleCall$10$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getDependencyConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getDependencyConsumer().setRuleCall$5$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getDependencyConsumer().setRuleCall$10$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getAndDecompositionConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getAndDecompositionConsumer().setRuleCall$5$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getAndDecompositionConsumer().setRuleCall$10$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getOrDecompositionConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getOrDecompositionConsumer().setRuleCall$5$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getOrDecompositionConsumer().setRuleCall$10$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getAndContributionConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getAndContributionConsumer().setRuleCall$5$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getAndContributionConsumer().setRuleCall$10$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getOrContributionConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getOrContributionConsumer().setRuleCall$5$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getOrContributionConsumer().setRuleCall$10$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getHelpContributionConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getHelpContributionConsumer().setRuleCall$5$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getHelpContributionConsumer().setRuleCall$10$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getMakeContributionConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getMakeContributionConsumer().setRuleCall$5$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getMakeContributionConsumer().setRuleCall$10$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getHurtContributionConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getHurtContributionConsumer().setRuleCall$5$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getHurtContributionConsumer().setRuleCall$10$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getBreakContributionConsumer().setKeyword$6$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.keyword$7$Delimiter);
		getBreakContributionConsumer().setRuleCall$5$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
		getBreakContributionConsumer().setRuleCall$10$Delimiter(uk.ac.open.istar.parser.packrat.IstarDelimiters.ruleCall$6$Delimiter);
	}
	
	public TerminalsParserConfiguration getTerminalsConfiguration() {
		return terminalsConfiguration;
	} 
	
    public IstarModelConsumer getModelConsumer() {
    	return modelConsumer;
    }

    public IstarContainerConsumer getContainerConsumer() {
    	return containerConsumer;
    }

    public IstarActorConsumer getActorConsumer() {
    	return actorConsumer;
    }

    public IstarAgentConsumer getAgentConsumer() {
    	return agentConsumer;
    }

    public IstarRoleConsumer getRoleConsumer() {
    	return roleConsumer;
    }

    public IstarPositionConsumer getPositionConsumer() {
    	return positionConsumer;
    }

    public IstarIntentionConsumer getIntentionConsumer() {
    	return intentionConsumer;
    }

    public IstarGoalConsumer getGoalConsumer() {
    	return goalConsumer;
    }

    public IstarSoftgoalConsumer getSoftgoalConsumer() {
    	return softgoalConsumer;
    }

    public IstarTaskConsumer getTaskConsumer() {
    	return taskConsumer;
    }

    public IstarResourceConsumer getResourceConsumer() {
    	return resourceConsumer;
    }

    public IstarBeliefConsumer getBeliefConsumer() {
    	return beliefConsumer;
    }

    public IstarLinkConsumer getLinkConsumer() {
    	return linkConsumer;
    }

    public IstarDependableConsumer getDependableConsumer() {
    	return dependableConsumer;
    }

    public IstarAssociationConsumer getAssociationConsumer() {
    	return associationConsumer;
    }

    public IstarDependencyConsumer getDependencyConsumer() {
    	return dependencyConsumer;
    }

    public IstarDecompositionConsumer getDecompositionConsumer() {
    	return decompositionConsumer;
    }

    public IstarAndDecompositionConsumer getAndDecompositionConsumer() {
    	return andDecompositionConsumer;
    }

    public IstarOrDecompositionConsumer getOrDecompositionConsumer() {
    	return orDecompositionConsumer;
    }

    public IstarContributionConsumer getContributionConsumer() {
    	return contributionConsumer;
    }

    public IstarAndContributionConsumer getAndContributionConsumer() {
    	return andContributionConsumer;
    }

    public IstarOrContributionConsumer getOrContributionConsumer() {
    	return orContributionConsumer;
    }

    public IstarHelpContributionConsumer getHelpContributionConsumer() {
    	return helpContributionConsumer;
    }

    public IstarMakeContributionConsumer getMakeContributionConsumer() {
    	return makeContributionConsumer;
    }

    public IstarHurtContributionConsumer getHurtContributionConsumer() {
    	return hurtContributionConsumer;
    }

    public IstarBreakContributionConsumer getBreakContributionConsumer() {
    	return breakContributionConsumer;
    }

    public IstarIDConsumer getIdConsumer() {
    	return idConsumer;
    }

    public TerminalsINTConsumer getIntConsumer() {
    	return getTerminalsConfiguration().getIntConsumer();
    }

    public TerminalsSTRINGConsumer getStringConsumer() {
    	return getTerminalsConfiguration().getStringConsumer();
    }

    public TerminalsML_COMMENTConsumer getMlCommentConsumer() {
    	return getTerminalsConfiguration().getMlCommentConsumer();
    }

    public TerminalsSL_COMMENTConsumer getSlCommentConsumer() {
    	return getTerminalsConfiguration().getSlCommentConsumer();
    }

    public TerminalsWSConsumer getWsConsumer() {
    	return getTerminalsConfiguration().getWsConsumer();
    }

    public TerminalsANY_OTHERConsumer getAnyOtherConsumer() {
    	return getTerminalsConfiguration().getAnyOtherConsumer();
    }


	@Override
	public ITerminalConsumer[] getInitialHiddenTerminals() {
		return getTerminalsConfiguration().getInitialHiddenTerminals();
	}
	
}
