/*
* generated by Xtext
*/
package uk.ac.open.istar.parser.packrat.consumers;

import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.AbstractRuleAwareTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.ConsumeResult;


public final class IstarIDConsumer extends AbstractRuleAwareTerminalConsumer {

	public IstarIDConsumer(ITerminalConsumerConfiguration configuration) {
		super(configuration);
	}
	
	@Override
	protected int doConsume() {
		return consumeAlternatives$1() ? ConsumeResult.SUCCESS : ConsumeResult.EMPTY_MATCH;
	}

	protected boolean consumeAlternatives$1() {
		if (consumeGroup$2())
			return true;
		if (consumeGroup$7())
			return true;
		return false;
	}

	protected boolean consumeGroup$2() {
		final int marker = mark();
		if (!consumeKeyword$3()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeNegatedToken$4()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeKeyword$6()) {
			rollbackTo(marker);
			return false;
		}
		return true;
	}

	protected boolean consumeKeyword$3() {
		return readChar('#');
	}

	protected boolean consumeNegatedToken$4() {
		if (doConsumeNegatedToken$4()) {
			while(doConsumeNegatedToken$4()) {}
			return true;
		}
		return false;
	}

	protected boolean doConsumeNegatedToken$4() {
		final int marker = mark();
		if (!eof() && !consumeKeyword$5()) {
			incOffset();
			return true;
		}
		rollbackTo(marker);
		return false;
	}

	protected boolean consumeKeyword$5() {
		return readChar('#');
	}

	protected boolean consumeKeyword$6() {
		return readChar('#');
	}

	protected boolean consumeGroup$7() {
		final int marker = mark();
		if (!consumeKeyword$8()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeAlternatives$9()) {
			rollbackTo(marker);
			return false;
		}
		if (!consumeAlternatives$17()) {
			rollbackTo(marker);
			return false;
		}
		return true;
	}

	protected boolean consumeKeyword$8() {
		doConsumeKeyword$8();
		return true;
	}

	protected boolean doConsumeKeyword$8() {
		return readChar('^');
	}

	protected boolean consumeAlternatives$9() {
		if (consumeCharacterRange$10())
			return true;
		if (consumeCharacterRange$13())
			return true;
		if (consumeKeyword$16())
			return true;
		return false;
	}

	protected boolean consumeCharacterRange$10() {
		return readCharBetween('a', 'z');
	}

	protected boolean consumeCharacterRange$13() {
		return readCharBetween('A', 'Z');
	}

	protected boolean consumeKeyword$16() {
		return readChar('_');
	}

	protected boolean consumeAlternatives$17() {
		while(doConsumeAlternatives$17()) {}
		return true;
	}

	protected boolean doConsumeAlternatives$17() {
		if (consumeCharacterRange$18())
			return true;
		if (consumeCharacterRange$21())
			return true;
		if (consumeKeyword$24())
			return true;
		if (consumeCharacterRange$25())
			return true;
		return false;
	}

	protected boolean consumeCharacterRange$18() {
		return readCharBetween('a', 'z');
	}

	protected boolean consumeCharacterRange$21() {
		return readCharBetween('A', 'Z');
	}

	protected boolean consumeKeyword$24() {
		return readChar('_');
	}

	protected boolean consumeCharacterRange$25() {
		return readCharBetween('0', '9');
	}
	
}
