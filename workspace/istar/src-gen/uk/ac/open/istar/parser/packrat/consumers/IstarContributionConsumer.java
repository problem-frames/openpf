/*
* generated by Xtext
*/
package uk.ac.open.istar.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;

import uk.ac.open.istar.services.IstarGrammarAccess.ContributionElements;

public final class IstarContributionConsumer extends NonTerminalConsumer {

	private ContributionElements rule;	

	private INonTerminalConsumer andContributionConsumer;

	private INonTerminalConsumer breakContributionConsumer;

	private INonTerminalConsumer helpContributionConsumer;

	private INonTerminalConsumer hurtContributionConsumer;

	private INonTerminalConsumer makeContributionConsumer;

	private INonTerminalConsumer orContributionConsumer;

	private IElementConsumer alternatives$1$Consumer;

	private IElementConsumer ruleCall$2$Consumer;

	private IElementConsumer ruleCall$3$Consumer;

	private IElementConsumer ruleCall$4$Consumer;

	private IElementConsumer ruleCall$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer ruleCall$7$Consumer;

	protected class Alternatives$1$Consumer extends AlternativesConsumer {
		
		protected Alternatives$1$Consumer(final Alternatives alternatives) {
			super(alternatives);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(ruleCall$2$Consumer);
			acceptor.accept(ruleCall$3$Consumer);
			acceptor.accept(ruleCall$4$Consumer);
			acceptor.accept(ruleCall$5$Consumer);
			acceptor.accept(ruleCall$6$Consumer);
			acceptor.accept(ruleCall$7$Consumer);
		}
	}

	protected class RuleCall$2$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$2$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(andContributionConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$3$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$3$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(orContributionConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$4$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$4$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(helpContributionConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$5$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$5$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(hurtContributionConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(makeContributionConsumer, null, false, false, false, getElement(), optional);
		}
	}

	protected class RuleCall$7$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$7$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume(boolean optional) throws Exception {
			return consumeNonTerminal(breakContributionConsumer, null, false, false, false, getElement(), optional);
		}
	}

	public IstarContributionConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
	}
	
	@Override
	protected int doConsume() throws Exception {
		return alternatives$1$Consumer.consume();
	}

	public ContributionElements getRule() {
		return rule;
	}
	
	public void setRule(ContributionElements rule) {
		this.rule = rule;
		
		alternatives$1$Consumer = new Alternatives$1$Consumer(rule.getAlternatives());
		ruleCall$2$Consumer = new RuleCall$2$Consumer(rule.getAndContributionParserRuleCall_0());
		ruleCall$3$Consumer = new RuleCall$3$Consumer(rule.getOrContributionParserRuleCall_1());
		ruleCall$4$Consumer = new RuleCall$4$Consumer(rule.getHelpContributionParserRuleCall_2());
		ruleCall$5$Consumer = new RuleCall$5$Consumer(rule.getHurtContributionParserRuleCall_3());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.getMakeContributionParserRuleCall_4());
		ruleCall$7$Consumer = new RuleCall$7$Consumer(rule.getBreakContributionParserRuleCall_5());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getClassifier();
	}
	
	public void setAndContributionConsumer(INonTerminalConsumer andContributionConsumer) {
		this.andContributionConsumer = andContributionConsumer;
	}
	
	public void setBreakContributionConsumer(INonTerminalConsumer breakContributionConsumer) {
		this.breakContributionConsumer = breakContributionConsumer;
	}
	
	public void setHelpContributionConsumer(INonTerminalConsumer helpContributionConsumer) {
		this.helpContributionConsumer = helpContributionConsumer;
	}
	
	public void setHurtContributionConsumer(INonTerminalConsumer hurtContributionConsumer) {
		this.hurtContributionConsumer = hurtContributionConsumer;
	}
	
	public void setMakeContributionConsumer(INonTerminalConsumer makeContributionConsumer) {
		this.makeContributionConsumer = makeContributionConsumer;
	}
	
	public void setOrContributionConsumer(INonTerminalConsumer orContributionConsumer) {
		this.orContributionConsumer = orContributionConsumer;
	}
	
}
