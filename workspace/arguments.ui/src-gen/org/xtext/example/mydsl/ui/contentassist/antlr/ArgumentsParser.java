/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.ArgumentsGrammarAccess;

public class ArgumentsParser extends AbstractContentAssistParser {
	
	@Inject
	private ArgumentsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalArgumentsParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalArgumentsParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalArgumentsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
					put(grammarAccess.getRebuttalAccess().getGroup(), "rule__Rebuttal__Group__0");
					put(grammarAccess.getGStatementAccess().getGroup(), "rule__GStatement__Group__0");
					put(grammarAccess.getWStatementAccess().getGroup(), "rule__WStatement__Group__0");
					put(grammarAccess.getRStatementAccess().getGroup(), "rule__RStatement__Group__0");
					put(grammarAccess.getArgumentAccess().getCnameAssignment_1(), "rule__Argument__CnameAssignment_1");
					put(grammarAccess.getArgumentAccess().getClaimstrAssignment_2(), "rule__Argument__ClaimstrAssignment_2");
					put(grammarAccess.getArgumentAccess().getGnameAssignment_4(), "rule__Argument__GnameAssignment_4");
					put(grammarAccess.getArgumentAccess().getGroundstatementsAssignment_6(), "rule__Argument__GroundstatementsAssignment_6");
					put(grammarAccess.getArgumentAccess().getWnameAssignment_9(), "rule__Argument__WnameAssignment_9");
					put(grammarAccess.getArgumentAccess().getWarrantstatementsAssignment_11(), "rule__Argument__WarrantstatementsAssignment_11");
					put(grammarAccess.getRebuttalAccess().getAnameAssignment_1(), "rule__Rebuttal__AnameAssignment_1");
					put(grammarAccess.getRebuttalAccess().getRnameAssignment_3(), "rule__Rebuttal__RnameAssignment_3");
					put(grammarAccess.getRebuttalAccess().getRebuttalstatementsAssignment_5(), "rule__Rebuttal__RebuttalstatementsAssignment_5");
					put(grammarAccess.getGStatementAccess().getNameAssignment_1(), "rule__GStatement__NameAssignment_1");
					put(grammarAccess.getGStatementAccess().getGroundstrAssignment_2(), "rule__GStatement__GroundstrAssignment_2");
					put(grammarAccess.getWStatementAccess().getNameAssignment_1(), "rule__WStatement__NameAssignment_1");
					put(grammarAccess.getWStatementAccess().getGroundstrAssignment_2(), "rule__WStatement__GroundstrAssignment_2");
					put(grammarAccess.getRStatementAccess().getNameAssignment_1(), "rule__RStatement__NameAssignment_1");
					put(grammarAccess.getRStatementAccess().getGroundstrAssignment_2(), "rule__RStatement__GroundstrAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalArgumentsParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalArgumentsParser) parser;
			typedParser.entryRuleArgument();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ArgumentsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ArgumentsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
