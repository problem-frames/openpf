[module generate('http://open.ac.uk/problem')/]

[template public generate(d: ProblemDiagram)]
[file (d.description, false)]
load foundations/Root.e
load foundations/EC.e	
    [for (dom: Node | d.nodes)]
      [for (hidden: Phenomenon | dom.hiddenPhenomena)]
       [if (hidden.type = PhenomenonType.STATE))]      
fluent [hidden.name/]_[dom.name/]()
       [/if]
       [/for]
      [/for]
      [for (interface: Link | d.links)]
      [for (shared: Phenomenon | interface.phenomena)]
		[if (shared.oclIsKindOf(Event))]  
event [shared.name/]_[interface.name/]()
        [/if]
		[if (shared.oclIsKindOf(State))]      
fluent [shared.name/]_[interface.name/]()
        [/if]
      [/for]
    [/for]	
    [for (p: Process | s.subjects)]
     [if (p.oclIsKindOf(Process))]
;--[p.name/]--
['['/]time[']'/][for (happens: Happens | p.precondition)]
  [if (happens.oclIsKindOf(Happens))]\ 
Happens([happens.action.name/](), [happens.time/]),[/if]
      [/for][for (holdsAt: HoldsAt | p.precondition)]
      [if (holdsAt.oclIsKindOf(HoldsAt))]HoldsAt([holdsAt.state.name/](), [holdsAt.time/]),[/if][/for]
->[for (happens: Happens | p.postcondition)]
  [if (happens.oclIsKindOf(Happens))]Happens([happens.action.name/](), [happens.time/]),[/if][/for]
   [for (holdsAt: HoldsAt | p.postcondition)]
     [if (holdsAt.oclIsKindOf(HoldsAt))]HoldsAt([holdsAt.state.name/](), [holdsAt.time/]),[/if]
   [/for].
   [/if]
[/for]
range time 0 3
range offset 1 2	
[/file]	
[/template]
	
[/template]
