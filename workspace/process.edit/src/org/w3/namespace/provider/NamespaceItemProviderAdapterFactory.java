/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.w3.namespace.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.w3.namespace.util.NamespaceAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class NamespaceItemProviderAdapterFactory extends NamespaceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NamespaceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Aborter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AborterItemProvider aborterItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Aborter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAborterAdapter() {
		if (aborterItemProvider == null) {
			aborterItemProvider = new AborterItemProvider(this);
		}

		return aborterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Aggregate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregateItemProvider aggregateItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Aggregate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregateAdapter() {
		if (aggregateItemProvider == null) {
			aggregateItemProvider = new AggregateItemProvider(this);
		}

		return aggregateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Annotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationItemProvider annotationItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Annotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationAdapter() {
		if (annotationItemProvider == null) {
			annotationItemProvider = new AnnotationItemProvider(this);
		}

		return annotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Binding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BindingItemProvider bindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Binding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBindingAdapter() {
		if (bindingItemProvider == null) {
			bindingItemProvider = new BindingItemProvider(this);
		}

		return bindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Cardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CardinalityItemProvider cardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Cardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCardinalityAdapter() {
		if (cardinalityItemProvider == null) {
			cardinalityItemProvider = new CardinalityItemProvider(this);
		}

		return cardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.ChannelBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChannelBindingItemProvider channelBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.ChannelBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChannelBindingAdapter() {
		if (channelBindingItemProvider == null) {
			channelBindingItemProvider = new ChannelBindingItemProvider(this);
		}

		return channelBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Connector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectorItemProvider connectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Connector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectorAdapter() {
		if (connectorItemProvider == null) {
			connectorItemProvider = new ConnectorItemProvider(this);
		}

		return connectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.ConstantBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantBindingItemProvider constantBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.ConstantBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantBindingAdapter() {
		if (constantBindingItemProvider == null) {
			constantBindingItemProvider = new ConstantBindingItemProvider(this);
		}

		return constantBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.ControlParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlParameterItemProvider controlParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.ControlParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlParameterAdapter() {
		if (controlParameterItemProvider == null) {
			controlParameterItemProvider = new ControlParameterItemProvider(this);
		}

		return controlParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Diagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramItemProvider diagramItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Diagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramAdapter() {
		if (diagramItemProvider == null) {
			diagramItemProvider = new DiagramItemProvider(this);
		}

		return diagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Export} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExportItemProvider exportItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Export}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExportAdapter() {
		if (exportItemProvider == null) {
			exportItemProvider = new ExportItemProvider(this);
		}

		return exportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.ExternalObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalObjectItemProvider externalObjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.ExternalObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalObjectAdapter() {
		if (externalObjectItemProvider == null) {
			externalObjectItemProvider = new ExternalObjectItemProvider(this);
		}

		return externalObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldItemProvider fieldItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAdapter() {
		if (fieldItemProvider == null) {
			fieldItemProvider = new FieldItemProvider(this);
		}

		return fieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.HandlerConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HandlerConnectorItemProvider handlerConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.HandlerConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHandlerConnectorAdapter() {
		if (handlerConnectorItemProvider == null) {
			handlerConnectorItemProvider = new HandlerConnectorItemProvider(this);
		}

		return handlerConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Import} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportItemProvider importItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Import}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportAdapter() {
		if (importItemProvider == null) {
			importItemProvider = new ImportItemProvider(this);
		}

		return importItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.InterfaceDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceDeclItemProvider interfaceDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.InterfaceDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceDeclAdapter() {
		if (interfaceDeclItemProvider == null) {
			interfaceDeclItemProvider = new InterfaceDeclItemProvider(this);
		}

		return interfaceDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Littlejil} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LittlejilItemProvider littlejilItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Littlejil}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLittlejilAdapter() {
		if (littlejilItemProvider == null) {
			littlejilItemProvider = new LittlejilItemProvider(this);
		}

		return littlejilItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Location} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocationItemProvider locationItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Location}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocationAdapter() {
		if (locationItemProvider == null) {
			locationItemProvider = new LocationItemProvider(this);
		}

		return locationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Metadata} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetadataItemProvider metadataItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Metadata}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetadataAdapter() {
		if (metadataItemProvider == null) {
			metadataItemProvider = new MetadataItemProvider(this);
		}

		return metadataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.Module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleItemProvider moduleItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.Module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleAdapter() {
		if (moduleItemProvider == null) {
			moduleItemProvider = new ModuleItemProvider(this);
		}

		return moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.NullAggregate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NullAggregateItemProvider nullAggregateItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.NullAggregate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNullAggregateAdapter() {
		if (nullAggregateItemProvider == null) {
			nullAggregateItemProvider = new NullAggregateItemProvider(this);
		}

		return nullAggregateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.PostIt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PostItItemProvider postItItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.PostIt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPostItAdapter() {
		if (postItItemProvider == null) {
			postItItemProvider = new PostItItemProvider(this);
		}

		return postItItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.PredicateExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PredicateExpressionItemProvider predicateExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.PredicateExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPredicateExpressionAdapter() {
		if (predicateExpressionItemProvider == null) {
			predicateExpressionItemProvider = new PredicateExpressionItemProvider(this);
		}

		return predicateExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.ReactionConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReactionConnectorItemProvider reactionConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.ReactionConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReactionConnectorAdapter() {
		if (reactionConnectorItemProvider == null) {
			reactionConnectorItemProvider = new ReactionConnectorItemProvider(this);
		}

		return reactionConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.RequisiteConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequisiteConnectorItemProvider requisiteConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.RequisiteConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequisiteConnectorAdapter() {
		if (requisiteConnectorItemProvider == null) {
			requisiteConnectorItemProvider = new RequisiteConnectorItemProvider(this);
		}

		return requisiteConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.ScopeBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScopeBindingItemProvider scopeBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.ScopeBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScopeBindingAdapter() {
		if (scopeBindingItemProvider == null) {
			scopeBindingItemProvider = new ScopeBindingItemProvider(this);
		}

		return scopeBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.SimpleRequisiteConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleRequisiteConnectorItemProvider simpleRequisiteConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.SimpleRequisiteConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleRequisiteConnectorAdapter() {
		if (simpleRequisiteConnectorItemProvider == null) {
			simpleRequisiteConnectorItemProvider = new SimpleRequisiteConnectorItemProvider(this);
		}

		return simpleRequisiteConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.StepDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepDeclarationItemProvider stepDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.StepDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepDeclarationAdapter() {
		if (stepDeclarationItemProvider == null) {
			stepDeclarationItemProvider = new StepDeclarationItemProvider(this);
		}

		return stepDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.StepReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepReferenceItemProvider stepReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.StepReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepReferenceAdapter() {
		if (stepReferenceItemProvider == null) {
			stepReferenceItemProvider = new StepReferenceItemProvider(this);
		}

		return stepReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.SubstepConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubstepConnectorItemProvider substepConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.SubstepConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubstepConnectorAdapter() {
		if (substepConnectorItemProvider == null) {
			substepConnectorItemProvider = new SubstepConnectorItemProvider(this);
		}

		return substepConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.w3.namespace.TaggedLocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaggedLocationItemProvider taggedLocationItemProvider;

	/**
	 * This creates an adapter for a {@link org.w3.namespace.TaggedLocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaggedLocationAdapter() {
		if (taggedLocationItemProvider == null) {
			taggedLocationItemProvider = new TaggedLocationItemProvider(this);
		}

		return taggedLocationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (aborterItemProvider != null) aborterItemProvider.dispose();
		if (aggregateItemProvider != null) aggregateItemProvider.dispose();
		if (annotationItemProvider != null) annotationItemProvider.dispose();
		if (bindingItemProvider != null) bindingItemProvider.dispose();
		if (cardinalityItemProvider != null) cardinalityItemProvider.dispose();
		if (channelBindingItemProvider != null) channelBindingItemProvider.dispose();
		if (connectorItemProvider != null) connectorItemProvider.dispose();
		if (constantBindingItemProvider != null) constantBindingItemProvider.dispose();
		if (controlParameterItemProvider != null) controlParameterItemProvider.dispose();
		if (diagramItemProvider != null) diagramItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (exportItemProvider != null) exportItemProvider.dispose();
		if (externalObjectItemProvider != null) externalObjectItemProvider.dispose();
		if (fieldItemProvider != null) fieldItemProvider.dispose();
		if (handlerConnectorItemProvider != null) handlerConnectorItemProvider.dispose();
		if (importItemProvider != null) importItemProvider.dispose();
		if (interfaceDeclItemProvider != null) interfaceDeclItemProvider.dispose();
		if (littlejilItemProvider != null) littlejilItemProvider.dispose();
		if (locationItemProvider != null) locationItemProvider.dispose();
		if (metadataItemProvider != null) metadataItemProvider.dispose();
		if (moduleItemProvider != null) moduleItemProvider.dispose();
		if (nullAggregateItemProvider != null) nullAggregateItemProvider.dispose();
		if (postItItemProvider != null) postItItemProvider.dispose();
		if (predicateExpressionItemProvider != null) predicateExpressionItemProvider.dispose();
		if (reactionConnectorItemProvider != null) reactionConnectorItemProvider.dispose();
		if (requisiteConnectorItemProvider != null) requisiteConnectorItemProvider.dispose();
		if (scopeBindingItemProvider != null) scopeBindingItemProvider.dispose();
		if (simpleRequisiteConnectorItemProvider != null) simpleRequisiteConnectorItemProvider.dispose();
		if (stepDeclarationItemProvider != null) stepDeclarationItemProvider.dispose();
		if (stepReferenceItemProvider != null) stepReferenceItemProvider.dispose();
		if (substepConnectorItemProvider != null) substepConnectorItemProvider.dispose();
		if (taggedLocationItemProvider != null) taggedLocationItemProvider.dispose();
	}

}
